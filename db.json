{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"03c4fe8ace49b5381fab088c6aee1ca0ca0ff87d","modified":1641120689043},{"_id":"source/_posts/.DS_Store","hash":"030875e28ef5c34cae2e3ddf672b76e76677dbd7","modified":1535220174000},{"_id":"source/_posts/from-result-to-error-handling.md","hash":"e0de78c1bbece6ff758c8a93a84cfa5591c21699","modified":1641122897640},{"_id":"source/_posts/cherry-blessing.md","hash":"4f86b0c15f42a4a984d7c7ae26e45bbc36807c02","modified":1641122769895},{"_id":"source/_posts/group-theory-and-category-theory.md","hash":"331ccf728bf6b2d26ec9a34251999a89e5727e36","modified":1641122807155},{"_id":"source/README.md","hash":"430812029f981e74415029cad78121b4802d26ec","modified":1641120689043},{"_id":"source/_posts/http-chunked-2.md","hash":"15770be52eeb9dc556f4abbbab584ac63e0a0a59","modified":1641123678349},{"_id":"source/_posts/http-chunked.md","hash":"759691cb63219a1c5dc176788bdc3351c0a7239f","modified":1641124000949},{"_id":"source/_posts/logging-system.md","hash":"4a8c214cc47623d8eeebc7dd8af7111dc4bf34b2","modified":1641122856392},{"_id":"source/_posts/pats.md","hash":"30866453b2e6842444473de0b85e56ca25b6c2f8","modified":1641122872361},{"_id":"source/_posts/parser-combinator.md","hash":"d01533ce2b0ce918312b4b244b31088d3cd8de9e","modified":1641122791731},{"_id":"source/tags/index.md","hash":"f6fb24a33f1509ae539de27321a24b703af648af","modified":1641120689047},{"_id":"source/_posts/plist-parser.md","hash":"4205bd6d84bf463859bd1d8536c2d68d3b0db36e","modified":1641122823726},{"_id":"source/.DS_Store","hash":"4f35b2832be884568b6c9757adc39d2d125e8652","modified":1502528898000},{"_id":"source/_posts/existential.md","hash":"c866d7deba430496023efe069b82183555a660c2","modified":1641122914031},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689118},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689083},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689083},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689111},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689111},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689112},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689117},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641120689118},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1641120689070},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1641120689070},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1641120689070},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1641120689071},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1641120689072},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1641120689071},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1641120689072},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1641120689072},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1641120689072},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1641120689072},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1641120689073},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1641120689073},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1641120689074},{"_id":"themes/next/_config.yml","hash":"0113f7373827dd6f06102da88af8915312dd7bd1","modified":1641120689073},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1641120689094},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1641120689073},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1641120689071},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1641120689071},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1641120689074},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1641120689074},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1641120689074},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1641120689075},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1641120689075},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1641120689075},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1641120689075},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1641120689075},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1641120689076},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1641120689076},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1641120689076},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1641120689076},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1641120689077},{"_id":"themes/next/layout/_layout.swig","hash":"9d1a23a6add6f3d0f88c2d17979956f14aaa37a4","modified":1641120689077},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641120689092},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1641120689092},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1641120689093},{"_id":"themes/next/layout/page.swig","hash":"2c6a78999133b991d9221f484aee2eacae894251","modified":1641120689093},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641120689093},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1641120689093},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641120689094},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1641120689094},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1641120689148},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1641120689095},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1641120689149},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1641120689149},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1641120689077},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1641120689077},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1641120689079},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1641120689079},{"_id":"themes/next/layout/_partials/head.swig","hash":"d4a05c51aac02f1f6248baccf2ddb8ee12b9122f","modified":1641120689080},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1641120689080},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1641120689080},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1641120689081},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1641120689081},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1641120689083},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1641120689083},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1641120689084},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1641120689089},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1641120689090},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1641120689090},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1641120689090},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1641120689090},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1641120689078},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1641120689078},{"_id":"themes/next/layout/_macro/post.swig","hash":"c00261ee0dca8ef7d3f7753e8f8cd444f51118c4","modified":1641120689078},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1641120689078},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1641120689079},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1641120689079},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1641120689095},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1641120689095},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1641120689095},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1641120689095},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1641120689096},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1641120689096},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1641120689118},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1641120689118},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1641120689118},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1641120689118},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1641120689119},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1641120689119},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1641120689119},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1641120689119},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1641120689119},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1641120689119},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1641120689120},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1641120689120},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1641120689120},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1641120689120},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1641120689120},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1641120689080},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1641120689080},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1641120689081},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1641120689081},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1641120689082},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1641120689082},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1641120689082},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1641120689082},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1641120689082},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1641120689084},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1641120689084},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1641120689084},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1641120689085},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1641120689085},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1641120689085},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1641120689085},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1641120689085},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1641120689086},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1641120689086},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1641120689086},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1641120689086},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1641120689087},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1641120689087},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1641120689088},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1641120689089},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1641120689089},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1641120689089},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1641120689089},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1641120689091},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1641120689091},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1641120689092},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1641120689092},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1641120689111},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1641120689111},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1641120689112},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1641120689117},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1641120689117},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1641120689117},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1641120689120},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1641120689121},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1641120689121},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1641120689121},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1641120689121},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1641120689121},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1641120689121},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1641120689121},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1641120689122},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1641120689122},{"_id":"themes/next/source/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1641120689122},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1641120689125},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1641120689127},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1495258266000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1641120689127},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1641120689130},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1641120689131},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1641120689131},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1641120689131},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1641120689132},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1641120689132},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1495258266000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1641120689132},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1641120689132},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1641120689140},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1641120689141},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1641120689141},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1641120689133},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1641120689142},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1641120689142},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1641120689142},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1641120689142},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1641120689143},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1641120689143},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1641120689083},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1641120689146},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1641120689146},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641120689148},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1641120689148},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641120689148},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1641120689086},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1641120689142},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1641120689091},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1641120689091},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1641120689096},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1641120689097},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1641120689097},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1641120689097},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1641120689097},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1641120689101},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1641120689106},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1641120689110},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1641120689110},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1641120689110},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1641120689110},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1641120689110},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1641120689111},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1641120689112},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1641120689112},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1641120689112},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1641120689113},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1641120689113},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1641120689113},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1641120689113},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1641120689114},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1641120689114},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1641120689115},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1641120689115},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1641120689115},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1641120689115},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1641120689116},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1641120689116},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1641120689116},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1641120689116},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1641120689117},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1641120689122},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1641120689124},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1641120689125},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1641120689128},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1641120689130},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1641120689130},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1641120689130},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1641120689131},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1641120689132},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1641120689133},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1641120689133},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1641120689134},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1641120689146},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1641120689146},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1641120689098},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1641120689098},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1641120689098},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1641120689098},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1641120689099},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1641120689098},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1641120689099},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1641120689099},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1641120689099},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1641120689100},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1641120689100},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1641120689100},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1641120689100},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1641120689101},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1641120689101},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"dbc07ec641a537df5918b41ce40a6466712a44f6","modified":1641120689101},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1641120689101},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1641120689102},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1641120689102},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1641120689102},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c089419916988d0f51d89b225460fe11b631e0a3","modified":1641120689102},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1641120689103},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1641120689103},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1641120689103},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1641120689103},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1641120689103},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1641120689104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1641120689104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1641120689104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1641120689104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1641120689105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1641120689105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1641120689105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1641120689105},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1641120689106},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1641120689106},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1641120689106},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1641120689106},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1641120689107},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1641120689107},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1641120689107},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1641120689107},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1641120689108},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1641120689108},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1641120689108},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1641120689108},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1641120689108},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1641120689109},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1641120689109},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1641120689109},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1641120689109},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1641120689114},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1641120689114},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1641120689115},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1641120689123},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1641120689123},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1641120689123},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1641120689123},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1641120689129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1641120689129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1641120689129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1641120689129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1641120689129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1641120689129},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1641120689141},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1641120689123},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1641120689124},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1641120689140},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1641120689140},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1641120689135},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1641120689136},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1641120689139},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1641120689147},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1641120689127},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1641120689138},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1641120689145},{"_id":"public/README.html","hash":"2c6a78999133b991d9221f484aee2eacae894251","modified":1641125967315},{"_id":"public/tags/index.html","hash":"2c6a78999133b991d9221f484aee2eacae894251","modified":1641125967315},{"_id":"public/2020/04/15/http-chunked/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2019/06/05/existential/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2018/11/19/from-result-to-error-handling/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2018/08/26/pats/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2020/04/25/http-chunked-2/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2017/08/10/plist-parser/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2017/06/12/group-theory-and-category-theory/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2018/08/26/logging-system/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2017/05/28/parser-combinator/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/2017/05/20/cherry-blessing/index.html","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1641125967315},{"_id":"public/archives/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2017/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2017/05/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2017/06/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2017/08/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2018/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2018/11/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2018/08/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2019/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2019/06/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2020/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/archives/2020/04/index.html","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1641125967315},{"_id":"public/categories/advanced-swift/index.html","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1641125967315},{"_id":"public/categories/functional-programming/index.html","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1641125967315},{"_id":"public/categories/networking/index.html","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1641125967315},{"_id":"public/tags/swift/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/index.html","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1641125967315},{"_id":"public/tags/error-handling/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/result/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/group-theory/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/category-theory/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/semigroup/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/monoid/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/functor/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/applicative/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/monad/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/functional-programming/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/existential/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/protocol/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/generic/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/logger/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/logging/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/pats/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/chunked/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/streaming/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/http/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/parser/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/parser-combinator/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/type-erasure/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/type-erased/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/tags/plist-parser/index.html","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1641125967315},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1641125967315},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1641125967315},{"_id":"public/CNAME","hash":"03c4fe8ace49b5381fab088c6aee1ca0ca0ff87d","modified":1641125967315},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1641125967315},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1641125967315},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1641125967315},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1641125967315},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1641125967315},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1641125967315},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1641125967315},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1641125967315},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1641125967315},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1641125967315},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1641125967315},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1641125967315},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1641125967315},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1641125967315},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1641125967315},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1641125967315},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1641125967315},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1641125967315},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1641125967315},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1641125967315},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1641125967315},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1641125967315},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1641125967315},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1641125967315},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1641125967315},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1641125967315},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1641125967315},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1641125967315},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1641125967315},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1641125967315},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1641125967315},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1641125967315},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1641125967315},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1641125967315},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1641125967315},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1641125967315},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1641125967315},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1641125967315},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1641125967315},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1641125967315},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1641125967315},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1641125967315},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1641125967315},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1641125967315},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1641125967315},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1641125967315},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1641125967315},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641125967315},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1641125967315},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1641125967315},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1641125967315},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1641125967315},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1641125967315},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1641125967315},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1641125967315},{"_id":"public/css/main.css","hash":"980d336d02264b60d00eb73f74d3786fde7a495a","modified":1641125967315},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1641125967315},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1641125967315},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1641125967315},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1641125967315},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1641125967315},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1641125967315},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1641125967315},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1641125967315},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641125967315},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1641125967315},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1641125967315},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1641125967315},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1641125967315},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1641125967315},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1641125967315},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1641125967315},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1641125967315},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1641125967315},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1641125967315}],"Category":[{"name":"advanced swift","_id":"ckxx810x600049ith5nfg6ej7"},{"name":"functional programming","_id":"ckxx810xb00099ithfzo6gcuj"},{"name":"networking","_id":"ckxx810xg000j9ith3w6fgxtw"}],"Data":[],"Page":[{"_content":"## Cherry Blessing\n","source":"README.md","raw":"## Cherry Blessing\n","date":"2022-01-02T10:51:29.043Z","updated":"2022-01-02T10:51:29.043Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckxx810wy00009ithhftqbv27","content":"<h2 id=\"Cherry-Blessing\"><a href=\"#Cherry-Blessing\" class=\"headerlink\" title=\"Cherry Blessing\"></a>Cherry Blessing</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Cherry-Blessing\"><a href=\"#Cherry-Blessing\" class=\"headerlink\" title=\"Cherry Blessing\"></a>Cherry Blessing</h2>"},{"title":"tags","date":"2017-06-05T14:30:24.000Z","type":"tags","_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 22:30:24\ntype: \"tags\"\n---\n\n\n","updated":"2022-01-02T10:51:29.047Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxx810x400029ithakdi1f8b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"From Result to Error Handling","date":"2018-11-19T12:00:00.000Z","_content":"> 最近关于 [Add Result to the Standard Library](swift-evolution/0235-add-result.md at master · apple/swift-evolution · GitHub) 的提案正在激烈的[讨论中](SE-0235 - Add Result to the Standard Library - Proposal Reviews - Swift Forums)，讨论的内容从命名到异步错误处理，再到是否应该有一个 `Either` 类型等等。\n\n## Result\n\n对于在项目中使用过 Swift 的人来说，`Result` 类型应该再熟悉不过了，在 community 中有着非常广泛的应用。最早看到对于 `Result` 的应用是在[Alamofire](https://github.com/Alamofire/Alamofire) 中，然后是有订阅的博客开始介绍 `Result` 是如何帮忙解决非必要的错误值/可选值检查，明确的区分成功和失败。再后来就是大家都开始在项目中使用 `Result` 类型来进行 **异步错误处理**。\n\n为什么说 **异步错误处理** 呢，因为最早接触到 `Result` 这个类型的使用案例，就是用来处理异步错误的，并且它非常的适合，如果不从语言设计上考虑的话，它可以说是非常完美，因为它和 `Optional` 一样是个 Monad。虽然 `Result` 只是一个非常简单的数据结构，它和同步异步一点关系都没有，它只跟错误处理有关。\n\n## Error Handling\n\n错误处理按执行顺序上可以分为同步（synchronization）和异步（concurrency）两种。\n\n同步错误处理在 Cocoa 中有两种，一种是 `throw` + `try catch`，遇到异常的时候函数内部通过 `throw`/`raise`等关键词把异常信息抛出，调用方通过 `try catch` 进行捕获。另一种是古老的 C 中的 Error 指针，调用方通过把 Error 指针作为参数传到函数内部，当遇到错误时，给 Error 指针赋值，以达到把错误信息往外传递的目的。\n\n异步错误处理在 Cocoa 中一般是通过 block, delegate 或者 notification 等方式进行传递，但大多数接口通常会把正常结果回调和异常结果回调合并一起进行回调，好处在于不需要两个 block 或者两个 delegate 函数或者 notification，缺点也就是上面的 `Result` 解决的问题。除此之外也有一些比较少见的方式，比如 [AVAssetExportSession](https://developer.apple.com/documentation/avfoundation/avassetexportsession)，它的 `completionHandler` 是 `@escaping () ->  Void`，并不携带任何正常和错误的信息，而是通过 `var status: AVAssetExportSession.Status` 和 `var error: Error?` 等属性来提供。\n\n抛开遥遥无期的 async/await 不谈，对于异步错误处理来说，可能由于网络库之类的接触的太多，所以平时去设计 API 的时候都非常的顺手的就写出来了，要么 `completionHandler: (Value?, Error?) -> Void`，要么 `completionHandler: (Result<Value>) -> Void`。但是对于同步错误处理却不是这样。\n\n首先在 Swift 中推荐的错误处理是 `throw` + `try catch`，所以 Error 指针是不需要再讨论的。但不知道是因为 `throw` + `try catch` 难用，还是因为懒，一般的项目中其实很少见到 `throw/throws/rethrows` 这样的关键词（ObjC 中很少见到 throw/raise 同理）。\n\n注：异步中是无法直接使用 `throw` + `try catch`，下面的两种写法都是不合法的：\n\n```swift\nfunc remove(forKey key: StoreKey) throws {\n    queue.async {\n        let url = try disk.url(atPath: path(forKey: key), in: directory)\n        try disk.remove(at: url)\n    }\n}\n\nfunc remove(forKey key: StoreKey) throws {\n    try queue.async {\n        let url = try disk.url(atPath: path(forKey: key), in: directory)\n        try disk.remove(at: url)\n    }\n}\n```\n\n### 万恶的 return\n\n一个当前在做的 Alligator 项目中的代码片段：\n\n```swift\n/// 视频导出\n///\n/// - Parameter asset: 要导出的视频资源\n/// - Parameter outputURL: 指定的导出地址\nfunc export(asset: AVAsset, to outputURL: URL) {\n    guard outputURL.isFileURL else {\n        assertionFailure(\"output url must be file url.\")\n        return\n    }\n    ...\n    guard let exportSession = AVAssetExportSession(asset: asset, presetName: AVAssetExportPresetHighestQuality) else {\n        return\n    }\n\n    exportSession.outputURL = outputURL\n    exportSession.outputFileType = .mp4\n    ...\n}\n```\n\n这个函数的大概功能是进行配置和导出视频到文件，看起来是不是很熟悉？有参赛合法性的判断，提供开发调试帮助的 assertion，`guard` 的使用也很合理。\n\n再看一段：\n\n```swift\n// VideoProcessor.swift\nfunc prepare() {\n    let videoWriterInput = \n    let audioWriterInput = \n    guard let videoWriter = try? AVAssetWriter(outputURL: outputURL, fileType: .mp4) else {\n        return\n    }\n    \n    if videoWriter.canAdd(videoWriterInput) {\n        videoWriter.add(videoWriterInput)\n    } else {\n        assertionFailure(\"can't add video writer input\")\n    }\n\n    if videoWriter.canAdd(audioWriterInput) {\n        videoWriter.add(audioWriterInput)\n    } else {\n        assertionFailure(\"can't add audio writer input\")\n    }\n    ...\n}\n```\n\n类似这样的代码在 project 中应该非常常见，但是却有着非常大的问题，那就是 **故意的忽略异常**。只处理了一切正常执行的分支，当遇到异常的时候，直接 return 或是加上 assertion 信息。这样写大多数情况下都没有什么问题，功能也正常，即使是遇到了异常情况，也不会引起 crash，但却有着很大的缺陷。（甚至有很多人连 assertion 都不用，替而代之的是 `print` :P\n\n在这个例子中这些视频处理的逻辑实际上是相对比较独立的，功能也比较”单一”，这些异常一旦出现，后续的逻辑基本都是不可用，并且大多数的异常在实际应用中是需要被调用方知道并处理的，比如体现在 UI 上。\n\n一个带异常处理（滑稽）的视频处理的示例代码片段：\n\n```swift\n// AVAsset+Processor.swift\n\nextension Alligator where Base: AVAsset {\n    /// Merge the given video asset and audio asset\n    ///\n    /// - Parameters:\n    ///   - videoAsset: the given video asset\n    ///   - audioAsset: the given audio asset\n    /// - Returns: the merged asset\n    /// - Throws: throws error when the given asset is invalid. e.g. video asset without video tracks.\n    public static func merge(videoAsset: AVAsset, audioAsset: AVAsset) throws -> AVAsset {\n        let mixComposition = AVMutableComposition()\n        \n        try mixComposition.agt.add(.video, from: videoAsset)\n\n        let videoDuration = mixComposition.duration\n        try mixComposition.agt.add(.audio, from: audioAsset, maxBounds: videoDuration)\n\n        return mixComposition\n    }\n\n    /// Merge the given assets one by one\n    ///\n    /// - Parameters:\n    ///   - segments: given assets, it can't be empty\n    ///   - isMuted: if true, it will passthrough audio tracks\n    /// - Returns: merged asset\n    /// - Throws: throws error when segments is empry, or some segment is invalid.\n    public static func merge(segments: [AVAsset], isMuted: Bool) throws -> AVAsset {\n        guard !segments.isEmpty else {\n            throw Error.segmentsEmpty\n        }\n\n        if segments.count > 1 {\n            let mixComposition = AVMutableComposition()\n            try mixComposition.agt.add(segments, isMuted: isMuted)\n            return mixComposition\n        } else {\n            return segments[0]\n        }\n    }\n}\n```\n\n### 无脑的 Optional\n\n无脑的 Optional 指的是，对于一个有明确返回值类型 `T` 的函数，有可能出现某个入参不符合要求的情况，就把返回值改成 `T?`，用 `return nil` 来处理异常。如：\n\n```swift\nstruct Formatter {\n    /// Format a string, replace invalid symbol with empty character\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) -> String? {\n        guard string.isEmpty else {\n            return nil\n        }\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n应该大多数人都试过这样，并且甚至有人一直都是这样，不经思索。有人会觉得这样写并没有什么问题。那么再看：\n\n```swift\nstruct Formatter {\n    /// Format a string, replace invalid symbol with empty character. If it is empty or contains `@`, `#`, return nil.\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) -> String? {\n        guard string.isEmpty else {\n            throw nil\n        }\n\n        guard !string.contains(\"@\") else {\n            return nil\n        }\n\n        guard !string.contains(\"#\") else {\n            return nil\n        }\n\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n这样写有没有问题呢？或者说有没有更好的方案呢？\n\n```swift\nstruct Formatter {\n    enum Error: Swift.Error {\n        case emptyString\n        case containsHashtag\n        case containsMention\n    }\n\n    /// Format a string, replace invalid symbol with empty character\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) throws -> String {\n        guard string.isEmpty else {\n            throw Error.emptyString\n        }\n\n        guard !string.contains(\"@\") else {\n            throw Error.containsMention\n        }\n\n        guard !string.contains(\"#\") else {\n            throw Error.containsHashtag\n        }\n\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n其实这个问题可以归为，**对于同步 API 的异常处理，什么时候应该使用 throw？，什么时候可以返回 nil？**\n\n这是一个很大的话题，并且大多数情况下需要根据场景来选择。通过对比这两种设计，可以简单的理解为如果希望使用方以更加合适的方式来处理错误，错误信息分类清晰详细，那么应该使用 `throw`。是否需要隐藏异常，交给使用方来决定。如果错误比较单一明确，可以考虑使用 `Optional`。\n\n### 混淆的人为错误和程序错误\n\n简单来说对于人为错误，应该通过 `assertion`, `precondition`, `fatalError` 等来帮助在开发测试阶段发现问题。而对于程序错误，应该根据同步或者异步来区分处理，使得程序能继续正常的工作。\n\n人为错误一般是指手误参数传错这种，如果没有手误（比如拼错单词、下标越界等），从逻辑上说不可能发生这种情况。\n\n```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath) else {\n        fataError(\"不应该啊兄弟\")\n    }\n    return cell\n}\n```\n\n程序错误更多是指所有参数都没有错误，但还是遇到异常了，并且不能忽略，比如磁盘满了导致无法写入文件。\n\n> 最后值得一提的就是大多数人在写 ObjC 的时候都会选择性的忽略异常，经典的场景就是设计 API 的时候滥用 `id`，然后虽然在方法内部对参数类型进行了判断，但在出现参数类型不合法的时候，直接通过 `return` 来处理。\n\n## 参考\n\n[Swift Package Manager](https://github.com/apple/swift-package-manager/blob/master/Sources/Basic/Result.swift)\n[Result&lt;T&gt; 还是 Result&lt;T, E: Error&gt;](https://onevcat.com/2018/10/swift-result-error/)\n\n\n","source":"_posts/from-result-to-error-handling.md","raw":"---\ntitle: From Result to Error Handling\ndate: 2018-11-19 20:00:00\ntags:\n    - swift\n    - error handling\n    - result\ncategories: advanced swift\n---\n> 最近关于 [Add Result to the Standard Library](swift-evolution/0235-add-result.md at master · apple/swift-evolution · GitHub) 的提案正在激烈的[讨论中](SE-0235 - Add Result to the Standard Library - Proposal Reviews - Swift Forums)，讨论的内容从命名到异步错误处理，再到是否应该有一个 `Either` 类型等等。\n\n## Result\n\n对于在项目中使用过 Swift 的人来说，`Result` 类型应该再熟悉不过了，在 community 中有着非常广泛的应用。最早看到对于 `Result` 的应用是在[Alamofire](https://github.com/Alamofire/Alamofire) 中，然后是有订阅的博客开始介绍 `Result` 是如何帮忙解决非必要的错误值/可选值检查，明确的区分成功和失败。再后来就是大家都开始在项目中使用 `Result` 类型来进行 **异步错误处理**。\n\n为什么说 **异步错误处理** 呢，因为最早接触到 `Result` 这个类型的使用案例，就是用来处理异步错误的，并且它非常的适合，如果不从语言设计上考虑的话，它可以说是非常完美，因为它和 `Optional` 一样是个 Monad。虽然 `Result` 只是一个非常简单的数据结构，它和同步异步一点关系都没有，它只跟错误处理有关。\n\n## Error Handling\n\n错误处理按执行顺序上可以分为同步（synchronization）和异步（concurrency）两种。\n\n同步错误处理在 Cocoa 中有两种，一种是 `throw` + `try catch`，遇到异常的时候函数内部通过 `throw`/`raise`等关键词把异常信息抛出，调用方通过 `try catch` 进行捕获。另一种是古老的 C 中的 Error 指针，调用方通过把 Error 指针作为参数传到函数内部，当遇到错误时，给 Error 指针赋值，以达到把错误信息往外传递的目的。\n\n异步错误处理在 Cocoa 中一般是通过 block, delegate 或者 notification 等方式进行传递，但大多数接口通常会把正常结果回调和异常结果回调合并一起进行回调，好处在于不需要两个 block 或者两个 delegate 函数或者 notification，缺点也就是上面的 `Result` 解决的问题。除此之外也有一些比较少见的方式，比如 [AVAssetExportSession](https://developer.apple.com/documentation/avfoundation/avassetexportsession)，它的 `completionHandler` 是 `@escaping () ->  Void`，并不携带任何正常和错误的信息，而是通过 `var status: AVAssetExportSession.Status` 和 `var error: Error?` 等属性来提供。\n\n抛开遥遥无期的 async/await 不谈，对于异步错误处理来说，可能由于网络库之类的接触的太多，所以平时去设计 API 的时候都非常的顺手的就写出来了，要么 `completionHandler: (Value?, Error?) -> Void`，要么 `completionHandler: (Result<Value>) -> Void`。但是对于同步错误处理却不是这样。\n\n首先在 Swift 中推荐的错误处理是 `throw` + `try catch`，所以 Error 指针是不需要再讨论的。但不知道是因为 `throw` + `try catch` 难用，还是因为懒，一般的项目中其实很少见到 `throw/throws/rethrows` 这样的关键词（ObjC 中很少见到 throw/raise 同理）。\n\n注：异步中是无法直接使用 `throw` + `try catch`，下面的两种写法都是不合法的：\n\n```swift\nfunc remove(forKey key: StoreKey) throws {\n    queue.async {\n        let url = try disk.url(atPath: path(forKey: key), in: directory)\n        try disk.remove(at: url)\n    }\n}\n\nfunc remove(forKey key: StoreKey) throws {\n    try queue.async {\n        let url = try disk.url(atPath: path(forKey: key), in: directory)\n        try disk.remove(at: url)\n    }\n}\n```\n\n### 万恶的 return\n\n一个当前在做的 Alligator 项目中的代码片段：\n\n```swift\n/// 视频导出\n///\n/// - Parameter asset: 要导出的视频资源\n/// - Parameter outputURL: 指定的导出地址\nfunc export(asset: AVAsset, to outputURL: URL) {\n    guard outputURL.isFileURL else {\n        assertionFailure(\"output url must be file url.\")\n        return\n    }\n    ...\n    guard let exportSession = AVAssetExportSession(asset: asset, presetName: AVAssetExportPresetHighestQuality) else {\n        return\n    }\n\n    exportSession.outputURL = outputURL\n    exportSession.outputFileType = .mp4\n    ...\n}\n```\n\n这个函数的大概功能是进行配置和导出视频到文件，看起来是不是很熟悉？有参赛合法性的判断，提供开发调试帮助的 assertion，`guard` 的使用也很合理。\n\n再看一段：\n\n```swift\n// VideoProcessor.swift\nfunc prepare() {\n    let videoWriterInput = \n    let audioWriterInput = \n    guard let videoWriter = try? AVAssetWriter(outputURL: outputURL, fileType: .mp4) else {\n        return\n    }\n    \n    if videoWriter.canAdd(videoWriterInput) {\n        videoWriter.add(videoWriterInput)\n    } else {\n        assertionFailure(\"can't add video writer input\")\n    }\n\n    if videoWriter.canAdd(audioWriterInput) {\n        videoWriter.add(audioWriterInput)\n    } else {\n        assertionFailure(\"can't add audio writer input\")\n    }\n    ...\n}\n```\n\n类似这样的代码在 project 中应该非常常见，但是却有着非常大的问题，那就是 **故意的忽略异常**。只处理了一切正常执行的分支，当遇到异常的时候，直接 return 或是加上 assertion 信息。这样写大多数情况下都没有什么问题，功能也正常，即使是遇到了异常情况，也不会引起 crash，但却有着很大的缺陷。（甚至有很多人连 assertion 都不用，替而代之的是 `print` :P\n\n在这个例子中这些视频处理的逻辑实际上是相对比较独立的，功能也比较”单一”，这些异常一旦出现，后续的逻辑基本都是不可用，并且大多数的异常在实际应用中是需要被调用方知道并处理的，比如体现在 UI 上。\n\n一个带异常处理（滑稽）的视频处理的示例代码片段：\n\n```swift\n// AVAsset+Processor.swift\n\nextension Alligator where Base: AVAsset {\n    /// Merge the given video asset and audio asset\n    ///\n    /// - Parameters:\n    ///   - videoAsset: the given video asset\n    ///   - audioAsset: the given audio asset\n    /// - Returns: the merged asset\n    /// - Throws: throws error when the given asset is invalid. e.g. video asset without video tracks.\n    public static func merge(videoAsset: AVAsset, audioAsset: AVAsset) throws -> AVAsset {\n        let mixComposition = AVMutableComposition()\n        \n        try mixComposition.agt.add(.video, from: videoAsset)\n\n        let videoDuration = mixComposition.duration\n        try mixComposition.agt.add(.audio, from: audioAsset, maxBounds: videoDuration)\n\n        return mixComposition\n    }\n\n    /// Merge the given assets one by one\n    ///\n    /// - Parameters:\n    ///   - segments: given assets, it can't be empty\n    ///   - isMuted: if true, it will passthrough audio tracks\n    /// - Returns: merged asset\n    /// - Throws: throws error when segments is empry, or some segment is invalid.\n    public static func merge(segments: [AVAsset], isMuted: Bool) throws -> AVAsset {\n        guard !segments.isEmpty else {\n            throw Error.segmentsEmpty\n        }\n\n        if segments.count > 1 {\n            let mixComposition = AVMutableComposition()\n            try mixComposition.agt.add(segments, isMuted: isMuted)\n            return mixComposition\n        } else {\n            return segments[0]\n        }\n    }\n}\n```\n\n### 无脑的 Optional\n\n无脑的 Optional 指的是，对于一个有明确返回值类型 `T` 的函数，有可能出现某个入参不符合要求的情况，就把返回值改成 `T?`，用 `return nil` 来处理异常。如：\n\n```swift\nstruct Formatter {\n    /// Format a string, replace invalid symbol with empty character\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) -> String? {\n        guard string.isEmpty else {\n            return nil\n        }\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n应该大多数人都试过这样，并且甚至有人一直都是这样，不经思索。有人会觉得这样写并没有什么问题。那么再看：\n\n```swift\nstruct Formatter {\n    /// Format a string, replace invalid symbol with empty character. If it is empty or contains `@`, `#`, return nil.\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) -> String? {\n        guard string.isEmpty else {\n            throw nil\n        }\n\n        guard !string.contains(\"@\") else {\n            return nil\n        }\n\n        guard !string.contains(\"#\") else {\n            return nil\n        }\n\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n这样写有没有问题呢？或者说有没有更好的方案呢？\n\n```swift\nstruct Formatter {\n    enum Error: Swift.Error {\n        case emptyString\n        case containsHashtag\n        case containsMention\n    }\n\n    /// Format a string, replace invalid symbol with empty character\n    ///\n    /// - Parameter string: string needs to be format\n    /// - Returns: formatted string\n    func format(_ string: String) throws -> String {\n        guard string.isEmpty else {\n            throw Error.emptyString\n        }\n\n        guard !string.contains(\"@\") else {\n            throw Error.containsMention\n        }\n\n        guard !string.contains(\"#\") else {\n            throw Error.containsHashtag\n        }\n\n        return string.replacingOccurrences(of: \"\\n\", with: \"\")\n    }\n}\n```\n\n其实这个问题可以归为，**对于同步 API 的异常处理，什么时候应该使用 throw？，什么时候可以返回 nil？**\n\n这是一个很大的话题，并且大多数情况下需要根据场景来选择。通过对比这两种设计，可以简单的理解为如果希望使用方以更加合适的方式来处理错误，错误信息分类清晰详细，那么应该使用 `throw`。是否需要隐藏异常，交给使用方来决定。如果错误比较单一明确，可以考虑使用 `Optional`。\n\n### 混淆的人为错误和程序错误\n\n简单来说对于人为错误，应该通过 `assertion`, `precondition`, `fatalError` 等来帮助在开发测试阶段发现问题。而对于程序错误，应该根据同步或者异步来区分处理，使得程序能继续正常的工作。\n\n人为错误一般是指手误参数传错这种，如果没有手误（比如拼错单词、下标越界等），从逻辑上说不可能发生这种情况。\n\n```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath) else {\n        fataError(\"不应该啊兄弟\")\n    }\n    return cell\n}\n```\n\n程序错误更多是指所有参数都没有错误，但还是遇到异常了，并且不能忽略，比如磁盘满了导致无法写入文件。\n\n> 最后值得一提的就是大多数人在写 ObjC 的时候都会选择性的忽略异常，经典的场景就是设计 API 的时候滥用 `id`，然后虽然在方法内部对参数类型进行了判断，但在出现参数类型不合法的时候，直接通过 `return` 来处理。\n\n## 参考\n\n[Swift Package Manager](https://github.com/apple/swift-package-manager/blob/master/Sources/Basic/Result.swift)\n[Result&lt;T&gt; 还是 Result&lt;T, E: Error&gt;](https://onevcat.com/2018/10/swift-result-error/)\n\n\n","slug":"from-result-to-error-handling","published":1,"updated":"2022-01-02T11:28:17.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810x100019ithgkok4y2u","content":"<blockquote>\n<p>最近关于 [Add Result to the Standard Library](swift-evolution/0235-add-result.md at master · apple/swift-evolution · GitHub) 的提案正在激烈的[讨论中](SE-0235 - Add Result to the Standard Library - Proposal Reviews - Swift Forums)，讨论的内容从命名到异步错误处理，再到是否应该有一个 <code>Either</code> 类型等等。</p>\n</blockquote>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>对于在项目中使用过 Swift 的人来说，<code>Result</code> 类型应该再熟悉不过了，在 community 中有着非常广泛的应用。最早看到对于 <code>Result</code> 的应用是在<a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> 中，然后是有订阅的博客开始介绍 <code>Result</code> 是如何帮忙解决非必要的错误值/可选值检查，明确的区分成功和失败。再后来就是大家都开始在项目中使用 <code>Result</code> 类型来进行 <strong>异步错误处理</strong>。</p>\n<p>为什么说 <strong>异步错误处理</strong> 呢，因为最早接触到 <code>Result</code> 这个类型的使用案例，就是用来处理异步错误的，并且它非常的适合，如果不从语言设计上考虑的话，它可以说是非常完美，因为它和 <code>Optional</code> 一样是个 Monad。虽然 <code>Result</code> 只是一个非常简单的数据结构，它和同步异步一点关系都没有，它只跟错误处理有关。</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>错误处理按执行顺序上可以分为同步（synchronization）和异步（concurrency）两种。</p>\n<p>同步错误处理在 Cocoa 中有两种，一种是 <code>throw</code> + <code>try catch</code>，遇到异常的时候函数内部通过 <code>throw</code>/<code>raise</code>等关键词把异常信息抛出，调用方通过 <code>try catch</code> 进行捕获。另一种是古老的 C 中的 Error 指针，调用方通过把 Error 指针作为参数传到函数内部，当遇到错误时，给 Error 指针赋值，以达到把错误信息往外传递的目的。</p>\n<p>异步错误处理在 Cocoa 中一般是通过 block, delegate 或者 notification 等方式进行传递，但大多数接口通常会把正常结果回调和异常结果回调合并一起进行回调，好处在于不需要两个 block 或者两个 delegate 函数或者 notification，缺点也就是上面的 <code>Result</code> 解决的问题。除此之外也有一些比较少见的方式，比如 <a href=\"https://developer.apple.com/documentation/avfoundation/avassetexportsession\">AVAssetExportSession</a>，它的 <code>completionHandler</code> 是 <code>@escaping () -&gt;  Void</code>，并不携带任何正常和错误的信息，而是通过 <code>var status: AVAssetExportSession.Status</code> 和 <code>var error: Error?</code> 等属性来提供。</p>\n<p>抛开遥遥无期的 async/await 不谈，对于异步错误处理来说，可能由于网络库之类的接触的太多，所以平时去设计 API 的时候都非常的顺手的就写出来了，要么 <code>completionHandler: (Value?, Error?) -&gt; Void</code>，要么 <code>completionHandler: (Result&lt;Value&gt;) -&gt; Void</code>。但是对于同步错误处理却不是这样。</p>\n<p>首先在 Swift 中推荐的错误处理是 <code>throw</code> + <code>try catch</code>，所以 Error 指针是不需要再讨论的。但不知道是因为 <code>throw</code> + <code>try catch</code> 难用，还是因为懒，一般的项目中其实很少见到 <code>throw/throws/rethrows</code> 这样的关键词（ObjC 中很少见到 throw/raise 同理）。</p>\n<p>注：异步中是无法直接使用 <code>throw</code> + <code>try catch</code>，下面的两种写法都是不合法的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">remove</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">StoreKey</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">try</span> disk.url(atPath: path(forKey: key), in: directory)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> disk.remove(at: url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">remove</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">StoreKey</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> queue.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">try</span> disk.url(atPath: path(forKey: key), in: directory)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> disk.remove(at: url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"万恶的-return\"><a href=\"#万恶的-return\" class=\"headerlink\" title=\"万恶的 return\"></a>万恶的 return</h3><p>一个当前在做的 Alligator 项目中的代码片段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 视频导出</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// - Parameter asset: 要导出的视频资源</span></span><br><span class=\"line\"><span class=\"comment\">/// - Parameter outputURL: 指定的导出地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span>(<span class=\"params\">asset</span>: <span class=\"type\">AVAsset</span>, <span class=\"params\">to</span> <span class=\"params\">outputURL</span>: <span class=\"type\">URL</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> outputURL.isFileURL <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;output url must be file url.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> exportSession <span class=\"operator\">=</span> <span class=\"type\">AVAssetExportSession</span>(asset: asset, presetName: <span class=\"type\">AVAssetExportPresetHighestQuality</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    exportSession.outputURL <span class=\"operator\">=</span> outputURL</span><br><span class=\"line\">    exportSession.outputFileType <span class=\"operator\">=</span> .mp4</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数的大概功能是进行配置和导出视频到文件，看起来是不是很熟悉？有参赛合法性的判断，提供开发调试帮助的 assertion，<code>guard</code> 的使用也很合理。</p>\n<p>再看一段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// VideoProcessor.swift</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepare</span>()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoWriterInput <span class=\"operator\">=</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioWriterInput <span class=\"operator\">=</span> </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> videoWriter <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">AVAssetWriter</span>(outputURL: outputURL, fileType: .mp4) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> videoWriter.canAdd(videoWriterInput) &#123;</span><br><span class=\"line\">        videoWriter.add(videoWriterInput)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;can&#x27;t add video writer input&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> videoWriter.canAdd(audioWriterInput) &#123;</span><br><span class=\"line\">        videoWriter.add(audioWriterInput)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;can&#x27;t add audio writer input&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类似这样的代码在 project 中应该非常常见，但是却有着非常大的问题，那就是 <strong>故意的忽略异常</strong>。只处理了一切正常执行的分支，当遇到异常的时候，直接 return 或是加上 assertion 信息。这样写大多数情况下都没有什么问题，功能也正常，即使是遇到了异常情况，也不会引起 crash，但却有着很大的缺陷。（甚至有很多人连 assertion 都不用，替而代之的是 <code>print</code> :P</p>\n<p>在这个例子中这些视频处理的逻辑实际上是相对比较独立的，功能也比较”单一”，这些异常一旦出现，后续的逻辑基本都是不可用，并且大多数的异常在实际应用中是需要被调用方知道并处理的，比如体现在 UI 上。</p>\n<p>一个带异常处理（滑稽）的视频处理的示例代码片段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AVAsset+Processor.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Alligator</span> <span class=\"title\">where</span> <span class=\"title\">Base</span>: <span class=\"title\">AVAsset</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Merge the given video asset and audio asset</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameters:</span></span><br><span class=\"line\">    <span class=\"comment\">///   - videoAsset: the given video asset</span></span><br><span class=\"line\">    <span class=\"comment\">///   - audioAsset: the given audio asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: the merged asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Throws: throws error when the given asset is invalid. e.g. video asset without video tracks.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span>(<span class=\"params\">videoAsset</span>: <span class=\"type\">AVAsset</span>, <span class=\"params\">audioAsset</span>: <span class=\"type\">AVAsset</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">AVAsset</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mixComposition <span class=\"operator\">=</span> <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> mixComposition.agt.add(.video, from: videoAsset)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoDuration <span class=\"operator\">=</span> mixComposition.duration</span><br><span class=\"line\">        <span class=\"keyword\">try</span> mixComposition.agt.add(.audio, from: audioAsset, maxBounds: videoDuration)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mixComposition</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Merge the given assets one by one</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameters:</span></span><br><span class=\"line\">    <span class=\"comment\">///   - segments: given assets, it can&#x27;t be empty</span></span><br><span class=\"line\">    <span class=\"comment\">///   - isMuted: if true, it will passthrough audio tracks</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: merged asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Throws: throws error when segments is empry, or some segment is invalid.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span>(<span class=\"params\">segments</span>: [<span class=\"type\">AVAsset</span>], <span class=\"params\">isMuted</span>: <span class=\"type\">Bool</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">AVAsset</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>segments.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.segmentsEmpty</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> segments.count <span class=\"operator\">&gt;</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> mixComposition <span class=\"operator\">=</span> <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\">            <span class=\"keyword\">try</span> mixComposition.agt.add(segments, isMuted: isMuted)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mixComposition</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> segments[<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无脑的-Optional\"><a href=\"#无脑的-Optional\" class=\"headerlink\" title=\"无脑的 Optional\"></a>无脑的 Optional</h3><p>无脑的 Optional 指的是，对于一个有明确返回值类型 <code>T</code> 的函数，有可能出现某个入参不符合要求的情况，就把返回值改成 <code>T?</code>，用 <code>return nil</code> 来处理异常。如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应该大多数人都试过这样，并且甚至有人一直都是这样，不经思索。有人会觉得这样写并没有什么问题。那么再看：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character. If it is empty or contains `@`, `#`, return nil.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;@&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;#&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写有没有问题呢？或者说有没有更好的方案呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Error</span>: <span class=\"title\">Swift</span>.<span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> emptyString</span><br><span class=\"line\">        <span class=\"keyword\">case</span> containsHashtag</span><br><span class=\"line\">        <span class=\"keyword\">case</span> containsMention</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.emptyString</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;@&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.containsMention</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;#&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.containsHashtag</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实这个问题可以归为，<strong>对于同步 API 的异常处理，什么时候应该使用 throw？，什么时候可以返回 nil？</strong></p>\n<p>这是一个很大的话题，并且大多数情况下需要根据场景来选择。通过对比这两种设计，可以简单的理解为如果希望使用方以更加合适的方式来处理错误，错误信息分类清晰详细，那么应该使用 <code>throw</code>。是否需要隐藏异常，交给使用方来决定。如果错误比较单一明确，可以考虑使用 <code>Optional</code>。</p>\n<h3 id=\"混淆的人为错误和程序错误\"><a href=\"#混淆的人为错误和程序错误\" class=\"headerlink\" title=\"混淆的人为错误和程序错误\"></a>混淆的人为错误和程序错误</h3><p>简单来说对于人为错误，应该通过 <code>assertion</code>, <code>precondition</code>, <code>fatalError</code> 等来帮助在开发测试阶段发现问题。而对于程序错误，应该根据同步或者异步来区分处理，使得程序能继续正常的工作。</p>\n<p>人为错误一般是指手误参数传错这种，如果没有手误（比如拼错单词、下标越界等），从逻辑上说不可能发生这种情况。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span>(<span class=\"keyword\">_</span> <span class=\"params\">tableView</span>: <span class=\"type\">UITableView</span>, <span class=\"params\">cellForRowAt</span> <span class=\"params\">indexPath</span>: <span class=\"type\">IndexPath</span>)</span> -&gt; <span class=\"type\">UITableViewCell</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> cell <span class=\"operator\">=</span> tableView.dequeueReusableCell(withIdentifier: <span class=\"string\">&quot;cell&quot;</span>, for: indexPath) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fataError(<span class=\"string\">&quot;不应该啊兄弟&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序错误更多是指所有参数都没有错误，但还是遇到异常了，并且不能忽略，比如磁盘满了导致无法写入文件。</p>\n<blockquote>\n<p>最后值得一提的就是大多数人在写 ObjC 的时候都会选择性的忽略异常，经典的场景就是设计 API 的时候滥用 <code>id</code>，然后虽然在方法内部对参数类型进行了判断，但在出现参数类型不合法的时候，直接通过 <code>return</code> 来处理。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/apple/swift-package-manager/blob/master/Sources/Basic/Result.swift\">Swift Package Manager</a><br><a href=\"https://onevcat.com/2018/10/swift-result-error/\">Result&lt;T&gt; 还是 Result&lt;T, E: Error&gt;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>最近关于 [Add Result to the Standard Library](swift-evolution/0235-add-result.md at master · apple/swift-evolution · GitHub) 的提案正在激烈的[讨论中](SE-0235 - Add Result to the Standard Library - Proposal Reviews - Swift Forums)，讨论的内容从命名到异步错误处理，再到是否应该有一个 <code>Either</code> 类型等等。</p>\n</blockquote>\n<h2 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h2><p>对于在项目中使用过 Swift 的人来说，<code>Result</code> 类型应该再熟悉不过了，在 community 中有着非常广泛的应用。最早看到对于 <code>Result</code> 的应用是在<a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> 中，然后是有订阅的博客开始介绍 <code>Result</code> 是如何帮忙解决非必要的错误值/可选值检查，明确的区分成功和失败。再后来就是大家都开始在项目中使用 <code>Result</code> 类型来进行 <strong>异步错误处理</strong>。</p>\n<p>为什么说 <strong>异步错误处理</strong> 呢，因为最早接触到 <code>Result</code> 这个类型的使用案例，就是用来处理异步错误的，并且它非常的适合，如果不从语言设计上考虑的话，它可以说是非常完美，因为它和 <code>Optional</code> 一样是个 Monad。虽然 <code>Result</code> 只是一个非常简单的数据结构，它和同步异步一点关系都没有，它只跟错误处理有关。</p>\n<h2 id=\"Error-Handling\"><a href=\"#Error-Handling\" class=\"headerlink\" title=\"Error Handling\"></a>Error Handling</h2><p>错误处理按执行顺序上可以分为同步（synchronization）和异步（concurrency）两种。</p>\n<p>同步错误处理在 Cocoa 中有两种，一种是 <code>throw</code> + <code>try catch</code>，遇到异常的时候函数内部通过 <code>throw</code>/<code>raise</code>等关键词把异常信息抛出，调用方通过 <code>try catch</code> 进行捕获。另一种是古老的 C 中的 Error 指针，调用方通过把 Error 指针作为参数传到函数内部，当遇到错误时，给 Error 指针赋值，以达到把错误信息往外传递的目的。</p>\n<p>异步错误处理在 Cocoa 中一般是通过 block, delegate 或者 notification 等方式进行传递，但大多数接口通常会把正常结果回调和异常结果回调合并一起进行回调，好处在于不需要两个 block 或者两个 delegate 函数或者 notification，缺点也就是上面的 <code>Result</code> 解决的问题。除此之外也有一些比较少见的方式，比如 <a href=\"https://developer.apple.com/documentation/avfoundation/avassetexportsession\">AVAssetExportSession</a>，它的 <code>completionHandler</code> 是 <code>@escaping () -&gt;  Void</code>，并不携带任何正常和错误的信息，而是通过 <code>var status: AVAssetExportSession.Status</code> 和 <code>var error: Error?</code> 等属性来提供。</p>\n<p>抛开遥遥无期的 async/await 不谈，对于异步错误处理来说，可能由于网络库之类的接触的太多，所以平时去设计 API 的时候都非常的顺手的就写出来了，要么 <code>completionHandler: (Value?, Error?) -&gt; Void</code>，要么 <code>completionHandler: (Result&lt;Value&gt;) -&gt; Void</code>。但是对于同步错误处理却不是这样。</p>\n<p>首先在 Swift 中推荐的错误处理是 <code>throw</code> + <code>try catch</code>，所以 Error 指针是不需要再讨论的。但不知道是因为 <code>throw</code> + <code>try catch</code> 难用，还是因为懒，一般的项目中其实很少见到 <code>throw/throws/rethrows</code> 这样的关键词（ObjC 中很少见到 throw/raise 同理）。</p>\n<p>注：异步中是无法直接使用 <code>throw</code> + <code>try catch</code>，下面的两种写法都是不合法的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">remove</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">StoreKey</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    queue.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">try</span> disk.url(atPath: path(forKey: key), in: directory)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> disk.remove(at: url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">remove</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">StoreKey</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> queue.async &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url <span class=\"operator\">=</span> <span class=\"keyword\">try</span> disk.url(atPath: path(forKey: key), in: directory)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> disk.remove(at: url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"万恶的-return\"><a href=\"#万恶的-return\" class=\"headerlink\" title=\"万恶的 return\"></a>万恶的 return</h3><p>一个当前在做的 Alligator 项目中的代码片段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 视频导出</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// - Parameter asset: 要导出的视频资源</span></span><br><span class=\"line\"><span class=\"comment\">/// - Parameter outputURL: 指定的导出地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">export</span>(<span class=\"params\">asset</span>: <span class=\"type\">AVAsset</span>, <span class=\"params\">to</span> <span class=\"params\">outputURL</span>: <span class=\"type\">URL</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> outputURL.isFileURL <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;output url must be file url.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> exportSession <span class=\"operator\">=</span> <span class=\"type\">AVAssetExportSession</span>(asset: asset, presetName: <span class=\"type\">AVAssetExportPresetHighestQuality</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    exportSession.outputURL <span class=\"operator\">=</span> outputURL</span><br><span class=\"line\">    exportSession.outputFileType <span class=\"operator\">=</span> .mp4</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个函数的大概功能是进行配置和导出视频到文件，看起来是不是很熟悉？有参赛合法性的判断，提供开发调试帮助的 assertion，<code>guard</code> 的使用也很合理。</p>\n<p>再看一段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// VideoProcessor.swift</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">prepare</span>()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> videoWriterInput <span class=\"operator\">=</span> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioWriterInput <span class=\"operator\">=</span> </span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> videoWriter <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">AVAssetWriter</span>(outputURL: outputURL, fileType: .mp4) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> videoWriter.canAdd(videoWriterInput) &#123;</span><br><span class=\"line\">        videoWriter.add(videoWriterInput)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;can&#x27;t add video writer input&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> videoWriter.canAdd(audioWriterInput) &#123;</span><br><span class=\"line\">        videoWriter.add(audioWriterInput)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assertionFailure</span>(<span class=\"string\">&quot;can&#x27;t add audio writer input&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"operator\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类似这样的代码在 project 中应该非常常见，但是却有着非常大的问题，那就是 <strong>故意的忽略异常</strong>。只处理了一切正常执行的分支，当遇到异常的时候，直接 return 或是加上 assertion 信息。这样写大多数情况下都没有什么问题，功能也正常，即使是遇到了异常情况，也不会引起 crash，但却有着很大的缺陷。（甚至有很多人连 assertion 都不用，替而代之的是 <code>print</code> :P</p>\n<p>在这个例子中这些视频处理的逻辑实际上是相对比较独立的，功能也比较”单一”，这些异常一旦出现，后续的逻辑基本都是不可用，并且大多数的异常在实际应用中是需要被调用方知道并处理的，比如体现在 UI 上。</p>\n<p>一个带异常处理（滑稽）的视频处理的示例代码片段：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AVAsset+Processor.swift</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Alligator</span> <span class=\"title\">where</span> <span class=\"title\">Base</span>: <span class=\"title\">AVAsset</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Merge the given video asset and audio asset</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameters:</span></span><br><span class=\"line\">    <span class=\"comment\">///   - videoAsset: the given video asset</span></span><br><span class=\"line\">    <span class=\"comment\">///   - audioAsset: the given audio asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: the merged asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Throws: throws error when the given asset is invalid. e.g. video asset without video tracks.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span>(<span class=\"params\">videoAsset</span>: <span class=\"type\">AVAsset</span>, <span class=\"params\">audioAsset</span>: <span class=\"type\">AVAsset</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">AVAsset</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mixComposition <span class=\"operator\">=</span> <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span> mixComposition.agt.add(.video, from: videoAsset)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> videoDuration <span class=\"operator\">=</span> mixComposition.duration</span><br><span class=\"line\">        <span class=\"keyword\">try</span> mixComposition.agt.add(.audio, from: audioAsset, maxBounds: videoDuration)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mixComposition</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Merge the given assets one by one</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameters:</span></span><br><span class=\"line\">    <span class=\"comment\">///   - segments: given assets, it can&#x27;t be empty</span></span><br><span class=\"line\">    <span class=\"comment\">///   - isMuted: if true, it will passthrough audio tracks</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: merged asset</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Throws: throws error when segments is empry, or some segment is invalid.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span>(<span class=\"params\">segments</span>: [<span class=\"type\">AVAsset</span>], <span class=\"params\">isMuted</span>: <span class=\"type\">Bool</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">AVAsset</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>segments.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.segmentsEmpty</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> segments.count <span class=\"operator\">&gt;</span> <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> mixComposition <span class=\"operator\">=</span> <span class=\"type\">AVMutableComposition</span>()</span><br><span class=\"line\">            <span class=\"keyword\">try</span> mixComposition.agt.add(segments, isMuted: isMuted)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mixComposition</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> segments[<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无脑的-Optional\"><a href=\"#无脑的-Optional\" class=\"headerlink\" title=\"无脑的 Optional\"></a>无脑的 Optional</h3><p>无脑的 Optional 指的是，对于一个有明确返回值类型 <code>T</code> 的函数，有可能出现某个入参不符合要求的情况，就把返回值改成 <code>T?</code>，用 <code>return nil</code> 来处理异常。如：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应该大多数人都试过这样，并且甚至有人一直都是这样，不经思索。有人会觉得这样写并没有什么问题。那么再看：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character. If it is empty or contains `@`, `#`, return nil.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">String</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;@&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;#&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样写有没有问题呢？或者说有没有更好的方案呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Error</span>: <span class=\"title\">Swift</span>.<span class=\"title\">Error</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> emptyString</span><br><span class=\"line\">        <span class=\"keyword\">case</span> containsHashtag</span><br><span class=\"line\">        <span class=\"keyword\">case</span> containsMention</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Format a string, replace invalid symbol with empty character</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter string: string needs to be format</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: formatted string</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> <span class=\"keyword\">throws</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> string.isEmpty <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.emptyString</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;@&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.containsMention</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"operator\">!</span>string.contains(<span class=\"string\">&quot;#&quot;</span>) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"type\">Error</span>.containsHashtag</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> string.replacingOccurrences(of: <span class=\"string\">&quot;<span class=\"subst\">\\n</span>&quot;</span>, with: <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实这个问题可以归为，<strong>对于同步 API 的异常处理，什么时候应该使用 throw？，什么时候可以返回 nil？</strong></p>\n<p>这是一个很大的话题，并且大多数情况下需要根据场景来选择。通过对比这两种设计，可以简单的理解为如果希望使用方以更加合适的方式来处理错误，错误信息分类清晰详细，那么应该使用 <code>throw</code>。是否需要隐藏异常，交给使用方来决定。如果错误比较单一明确，可以考虑使用 <code>Optional</code>。</p>\n<h3 id=\"混淆的人为错误和程序错误\"><a href=\"#混淆的人为错误和程序错误\" class=\"headerlink\" title=\"混淆的人为错误和程序错误\"></a>混淆的人为错误和程序错误</h3><p>简单来说对于人为错误，应该通过 <code>assertion</code>, <code>precondition</code>, <code>fatalError</code> 等来帮助在开发测试阶段发现问题。而对于程序错误，应该根据同步或者异步来区分处理，使得程序能继续正常的工作。</p>\n<p>人为错误一般是指手误参数传错这种，如果没有手误（比如拼错单词、下标越界等），从逻辑上说不可能发生这种情况。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tableView</span>(<span class=\"keyword\">_</span> <span class=\"params\">tableView</span>: <span class=\"type\">UITableView</span>, <span class=\"params\">cellForRowAt</span> <span class=\"params\">indexPath</span>: <span class=\"type\">IndexPath</span>)</span> -&gt; <span class=\"type\">UITableViewCell</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> cell <span class=\"operator\">=</span> tableView.dequeueReusableCell(withIdentifier: <span class=\"string\">&quot;cell&quot;</span>, for: indexPath) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fataError(<span class=\"string\">&quot;不应该啊兄弟&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序错误更多是指所有参数都没有错误，但还是遇到异常了，并且不能忽略，比如磁盘满了导致无法写入文件。</p>\n<blockquote>\n<p>最后值得一提的就是大多数人在写 ObjC 的时候都会选择性的忽略异常，经典的场景就是设计 API 的时候滥用 <code>id</code>，然后虽然在方法内部对参数类型进行了判断，但在出现参数类型不合法的时候，直接通过 <code>return</code> 来处理。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/apple/swift-package-manager/blob/master/Sources/Basic/Result.swift\">Swift Package Manager</a><br><a href=\"https://onevcat.com/2018/10/swift-result-error/\">Result&lt;T&gt; 还是 Result&lt;T, E: Error&gt;</a></p>\n"},{"title":"Group Theory and Category Theory","date":"2017-06-12T12:00:00.000Z","_content":"想理解函数式编程中的一些高大上的概念，比如 Functor, Monad 等，必须要先理解范畴论。\n\n## Group\n\n> 群，是一种代数结构，由一个集合（G）以及一个二元运算符（·）所组成。[wikipedia](https://zh.wikipedia.org/wiki/群)\n\n一个群必须满足一些称为 *群公理* 的条件，也就是 **封闭性**、**结合律**、**单位元** 和 **逆元**。如整数配备上加法运算就形成一个群。\n\n* 封闭性（Closure）：对于任意 a,b∈G，a·b∈G。\n* 结合律（Associativity）：对于任意 a,b,c∈G，(a·b)·c = a·(b·c)。\n* 单位元（Identity）：G 中存在一个元素 e，使得任意 a∈G，a·e = e·a = a。\n* 逆元：对于任意 a∈G，存在 b∈G，使得 a·b = b·a = e。\n\n群并不要求这个二元运算符（·）具体做什么，它只要求这个二元运算符存在，所以很多数学结构都是群。比如我们可以把整数当作一个群，把 `+` 作为二元运算符。\n\n* 封闭性：对于任意两个整数 a,b，a+b 依然是一个整数。\n* 结合律：对于任意整数 a,b,c，(a+b)+c = a+(b+c)。\n* 单位元：存在元素 0，使得 a+0 = 0+a = a。\n* 逆元：对于任意整数 a，当 b=-a 时，a+b = b+a = e。\n\n所以我们可以说 `(整数, +)` 是一个群。如果把 `*` 当作二元运算符，把 `1` 作为单位元的时候，整数就形成了另一个群。\n\n除了整数，还有很多数学结构是群。\n\n### Semigroup\n\n满足封闭性和结合律的群，称为半群（semigroup）。\n\n```swift\ninfix operator <>: AdditionPrecedence\n\nprotocol Semigroup {\n    static func <>(lhs: Self, rhs: Self) -> Self\n}\n\nextension Int: Semigroup {\n    static func <>(lhs: Int, rhs: Int) -> Int {\n        return lhs + rhs\n    }\n}\n\nextension Array: Semigroup {\n    static func <>(lhs: Array, rhs: Array) -> Array {\n        return lhs + rhs\n    }\n}\n\n// 折叠 fold\nfunc concat<S: Semigroup>(_ xs: [S], _ initial: S) -> S {\n    return xs.reduce(initial, <>)\n}\n```\n\n半群的结合律特性使得我们可以进行并行运算，`1 <> 2 <> 3 <> 4`。\n\n### Monoid\n\n在抽象代数中，有一类简单的抽象结构被称为 Monoid（幺半群）。许多数学结构都是幺半群，因为成为幺半群的要求非常低。\n\n存在单位元的半群，称为含幺半群，或者幺半群，或者单群，或者独异点（monoid）。\n\n```swift\nprotocol Monoid: Semigroup {\n    static var e: Self { get }\n}\n\nextension Int: Monoid {\n    static var e = 0\n}\n\nextension Array: Monoid {\n    static var e: Array {\n        return []\n    }\n}\n\nfunc concat<M: Monoid>(_ xs: [M]) -> M {\n    return xs.reduce(M.e, <>)\n}\n```\n\n`concat` 是对 Monoid 的一种应用，它可以利用 Monoid 的定义（ 二元操作 `<>` 和 单位元 `e` ）进行折叠操作。\n\n## Category Theory\n\n> 范畴论是数学的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。[wikipedia](https://zh.wikipedia.org/wiki/范畴论)\n\n### Category\n\n一个范畴 C 包括：\n\n* 一个由对象（object）组成的类 ob(C)。（注：这里把“物件”成为“对象“更有助于从计算机的角度理解\n* 对象间态射（morphism，->）组成的类 hom(C)：每个态射 f 都只有一个「源对象」a 以及一个「目标对象」b（其中 a,b 都在 ob(C) 内），称之为 **从 a 到 b 的态射**，记为 f: a->b。（注：identity 态射即自己映射到自己的特殊态射，f: a->a，简单记为 id[a]）\n* 一个二元运算符（·），用于态射组合，如 h=g·f。\n\n满足公理：\n\n* 结合律：f: a->b, g: b->c, h: c->d，h·(g·f) = (h·g)·f。\n* 单位元：id[a]·f = id[b]·f = f。\n* 封闭性：f: a->b, g: b->c, h: a->c, h = f·g。\n\n范畴举例：\n\n* 范畴 C 有 Int 类型和 String 类型对象。\n* 存在态射 f: Int->String。\n\n划重点：幺半群可以视为一类特殊的范畴。幺半群运算满足的公理同于范畴中 **从一个对象到自身的态射**。换言之：\n幺半群实质上是只有单个对象的范畴。\n\n### Functor\n\n> 在范畴论中，函子是范畴间的一类映射。函子也可以解释为小范畴为成员的范畴内的态射。 [wikipedia](https://zh.wikipedia.org/wiki/函子)\n\n在当代数学中，函子被用来描述各种范畴间的关系。对范畴论者来说，函子则是个特别类型的函数。\n\n设 C 和 D 为范畴，从 C 至 D 的函子为一映射 F:\n\n* 将每个对象 x∈C 映射至一对象 F(x)∈D 上。\n* 将每个态射 f: x->y∈C 映射至一态射 F(f): F(x)->F(y)∈D 上，\n\n使之满足：\n\n* 对任何对象 x∈C，恒有 F(id[x]) = id[F(x)]。\n* 对任何态射 f: x->y, g: y->z，恒有 F(f·g) = F(f)·F(g)。\n\n换言之，函子会保持单位态射与态射的复合。\n一个由一范畴映射至其自身的函子称之为 **自函子（Endofunctor）**。\n\n#### 可以把范畴当作一组类型的集合\n\n如范畴 C 有 `Int` 类型和 `String` 类型对象，以及 `Int -> String` 的态射；范畴 D 有 `Array<Int>` 类型和 `Array<String>` 类型对象，以及 `Array<Int> -> Array<String>` 的态射。两个范畴之间的映射 F：\n\n* `Int` 映射至 `Array<Int>` 上，`String` 映射至 `Array<String>` 上。\n* 态射 `Int -> String` 映射至 `Array<Int> -> Array<String>` 上。\n\n翻译成代码：C: `Int`, `String`, f: `Int -> String`, D: `Array<Int>`, `Array<String>`, f: `Array<Int> -> Array<String>`。\n\n* x: `Int` -> F(x): `Array<Int>`，`String` -> F(x): `Array<String>`\n* f: `(Int -> String)` -> F(f): `(Array<Int> -> Array<String>)`\n\n范畴是不涉及具体类型的，所以用泛型表示：\n\n```swift\nfunc tmap<T>(x: T) -> F<T>\nfunc fmap<A, B>(f: A -> B) -> (F<A> -> F<B>)\n```\n\n简化一下变成：\n\n```swift\n// Swift 中把 Int 映射到 Array<Int> 由 Array 的初始化方法提供，\n// 所以可以不写。\n// 由于 fmap 实际上是 (F<A>, A -> B) -> F<B> 的 currying 版本，\n// 所以两者是等价的。\nfunc map<A, B>(x: F<A>, f: A -> B) -> F<B>\n```\n\n再来看看 Swift 中的 `Array` 和 `Optional`。如果把 Swift 中所有的类型 `A, B` 当作对象，以及 Swift 中所有的函数当作态射 `A -> B`，那么这些类型和函数就组成一个范畴 A。把 `Array` 类型当作对象 `Array<A>, Array<B>`，`Array` 上所有的函数当作态射 `Array<A> -> Array<B>`，那么也组成一个范畴 B。而 A 到 B 之间的函子是 `Array`，因为函子 `Array` 能将任意类型 `T` 转换为 `Array<T>`。`Optional` 同理。\n\n很多库对 `Functor` 的支持直接在类型构造器（Type Constructor）的定义中实现 `map` 方法，比如 Swift 中的 `Array` 和 `Optional` 就是需要一个泛型作为参数来构建具体类型的类型构造器，它在定义中实现了 `map` 方法。这些类型构造器相当于同时具备了类型和函数的映射。在 Haskell 里把这个行为称为 `Lift`，相当于把类型和函数放到容器里面。所以一个带有 `map` 方法的类型构造器就是一个函子。\n\n范畴与高阶类型：如果忽略范畴中的态射，范畴其实就是对特定类型的抽象，即高阶类型（类型构造器）。对于范畴 D，它的所有类型都是 `Array<T>` 的特定类型。而对于范畴 C，可以看作是一个 Identity 类型的构造器（id[T] = T）。\n\n注意⚠️：函子不是容器，函子不是容器，函子不是容器。\n如 `typealias Parser<A> = (String) -> (A, String)?` 我们可以实现 `func map<A, B>(x: Parser<A>, f: (A) -> B) -> Parser<B>` 函数，所以我们可以说 `Parser<A>` 是一个函子，但它不是容器。\n\n### Endofunctor\n\n> A functor that maps a category to itself。一个由一范畴映射至其自身的函子称之为 **自函子（Endofunctor）**。\n\n先看自函数的概念：将一个类型映射到自身类型，如 `Int -> Int`。\n\n```swift\nfunc f(x: Int) -> Int { return x + 1 }\n```\n\n单位函数（Identity Function）的概念：什么都不做，传入什么就返回什么。属于自函数的特例。\n\n```swift\nfunc id(x: Int) -> Int { return x }\n```\n\n**自函子不是单位函子（Identity Functor）**。还是上面的范畴 C，为了区分自函子和单位函子，多加一种态射 g: `String -> Int`，那么：\n\n自函子：对于函子 F，对于 `F(Int)` 结果是 `String`，`F(String)` 结果是 `Int`，对于 `F(f: Int -> String)` 结果是 g: `String -> Int`。那么这个函子就是自函子。\n\n单位函子（Identity Functor）：对于函子 F，对于 `F(Int)` 结果还是 `Int`，对于 `F(String)` 结果还是 `String`，对于 `F(f: Int -> String)` 结果还是 `f: Int -> String`，对于 `F(g: String -> Int)` 结果还是 g: `String -> Int`。那么这个函子就是单位函子。 \n\n## Applicative\n\n> An applicative is a monoid in the category of endofunctors, what's the problem?\n\n虽然在 Haskell 中 Monad 是 Applicative 的一种，但是 Applicative 的出现却在 Monad 之后。\n\n[Applicative](https://www.reddit.com/r/haskell/comments/2lompe/where_do_the_applicative_laws_come_from/)\n\n## Monad\n\n> A monad is a monoid in the category of endofunctors -- Philip Wadler\n\n自函子说穿了就是把一个范畴映射到自身的函子，自函子范畴说穿了就是从小范畴映射到自身的函子所构成的以自函子为对象以自然变换为态射的范畴，幺半群说穿了就是只有单个对象的范畴，给定了一个幺半群则可构造出一个仅有单个对象的小范畴使其态射由幺半群的元素给出而合成由幺半群的运算给出，而单子说穿了就是自函子范畴上的这样一个幺半群。（这都不理解么亲连这种最基本的概念都不理解还学什么编程！\n\n一系列 Endofunctor 组成的范畴，成为 **自函子范畴**。\n\n* X 上的自函子：F：`X -> X`\n* 单位自函子 id[X] 到函子 F 的自然转换：`id[X] -> F` (pure\n* 函子 F 的张量积 F⊗F 到函子 F 的自然转换：`F⊗F -> F` (join\n\n代码表示：\n\n* `func unit<T>(x: T) -> F<T> // x = id[x]` \n* `func join<T>(a: F<F<T>>) -> F<T>`\n\n此处函子的张量积 ⊗ 可以看作为组合（Composition）；\n注意结合 Monoidal Category 理解，`unit` 和 `join` 满足 Monoid 的定律，所有形成了 Monoid。\n\n也就是说：单子（Monad）是自函子的 Monoidal 范畴上的一个幺半群，该 Monoidal 范畴的张量积（Tensor Product，⊗：F×F -> F）是自函子的复合（Composition），单位元是 Id Functor。\n\n`bind` 或者说 `flatMap` 或者 `>>=` 其实等于 `map + join`。（见 [apple/swift](https://github.com/apple/swift) 中的 `stdlib/public/core/FlatMap.swift`\n\n```swift\nfunc >>=<A, B>(x: F<A>, f: A -> F<B>) -> F<B>\n// Currying 前的样子\nfunc >>=<A, B>(x: F<A>) -> (f: A -> F<B>) -> F<B>\n```\n\n## Ref\n\nToo much\n\n\n","source":"_posts/group-theory-and-category-theory.md","raw":"---\ntitle: Group Theory and Category Theory\ndate: 2017-06-12 20:00:00\ntags:\n\t- group theory\n\t- category theory\n\t- semigroup\n\t- monoid\n\t- functor\n\t- applicative\n\t- monad\n\t- functional programming\n\t- swift\ncategories: functional programming\n---\n想理解函数式编程中的一些高大上的概念，比如 Functor, Monad 等，必须要先理解范畴论。\n\n## Group\n\n> 群，是一种代数结构，由一个集合（G）以及一个二元运算符（·）所组成。[wikipedia](https://zh.wikipedia.org/wiki/群)\n\n一个群必须满足一些称为 *群公理* 的条件，也就是 **封闭性**、**结合律**、**单位元** 和 **逆元**。如整数配备上加法运算就形成一个群。\n\n* 封闭性（Closure）：对于任意 a,b∈G，a·b∈G。\n* 结合律（Associativity）：对于任意 a,b,c∈G，(a·b)·c = a·(b·c)。\n* 单位元（Identity）：G 中存在一个元素 e，使得任意 a∈G，a·e = e·a = a。\n* 逆元：对于任意 a∈G，存在 b∈G，使得 a·b = b·a = e。\n\n群并不要求这个二元运算符（·）具体做什么，它只要求这个二元运算符存在，所以很多数学结构都是群。比如我们可以把整数当作一个群，把 `+` 作为二元运算符。\n\n* 封闭性：对于任意两个整数 a,b，a+b 依然是一个整数。\n* 结合律：对于任意整数 a,b,c，(a+b)+c = a+(b+c)。\n* 单位元：存在元素 0，使得 a+0 = 0+a = a。\n* 逆元：对于任意整数 a，当 b=-a 时，a+b = b+a = e。\n\n所以我们可以说 `(整数, +)` 是一个群。如果把 `*` 当作二元运算符，把 `1` 作为单位元的时候，整数就形成了另一个群。\n\n除了整数，还有很多数学结构是群。\n\n### Semigroup\n\n满足封闭性和结合律的群，称为半群（semigroup）。\n\n```swift\ninfix operator <>: AdditionPrecedence\n\nprotocol Semigroup {\n    static func <>(lhs: Self, rhs: Self) -> Self\n}\n\nextension Int: Semigroup {\n    static func <>(lhs: Int, rhs: Int) -> Int {\n        return lhs + rhs\n    }\n}\n\nextension Array: Semigroup {\n    static func <>(lhs: Array, rhs: Array) -> Array {\n        return lhs + rhs\n    }\n}\n\n// 折叠 fold\nfunc concat<S: Semigroup>(_ xs: [S], _ initial: S) -> S {\n    return xs.reduce(initial, <>)\n}\n```\n\n半群的结合律特性使得我们可以进行并行运算，`1 <> 2 <> 3 <> 4`。\n\n### Monoid\n\n在抽象代数中，有一类简单的抽象结构被称为 Monoid（幺半群）。许多数学结构都是幺半群，因为成为幺半群的要求非常低。\n\n存在单位元的半群，称为含幺半群，或者幺半群，或者单群，或者独异点（monoid）。\n\n```swift\nprotocol Monoid: Semigroup {\n    static var e: Self { get }\n}\n\nextension Int: Monoid {\n    static var e = 0\n}\n\nextension Array: Monoid {\n    static var e: Array {\n        return []\n    }\n}\n\nfunc concat<M: Monoid>(_ xs: [M]) -> M {\n    return xs.reduce(M.e, <>)\n}\n```\n\n`concat` 是对 Monoid 的一种应用，它可以利用 Monoid 的定义（ 二元操作 `<>` 和 单位元 `e` ）进行折叠操作。\n\n## Category Theory\n\n> 范畴论是数学的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。[wikipedia](https://zh.wikipedia.org/wiki/范畴论)\n\n### Category\n\n一个范畴 C 包括：\n\n* 一个由对象（object）组成的类 ob(C)。（注：这里把“物件”成为“对象“更有助于从计算机的角度理解\n* 对象间态射（morphism，->）组成的类 hom(C)：每个态射 f 都只有一个「源对象」a 以及一个「目标对象」b（其中 a,b 都在 ob(C) 内），称之为 **从 a 到 b 的态射**，记为 f: a->b。（注：identity 态射即自己映射到自己的特殊态射，f: a->a，简单记为 id[a]）\n* 一个二元运算符（·），用于态射组合，如 h=g·f。\n\n满足公理：\n\n* 结合律：f: a->b, g: b->c, h: c->d，h·(g·f) = (h·g)·f。\n* 单位元：id[a]·f = id[b]·f = f。\n* 封闭性：f: a->b, g: b->c, h: a->c, h = f·g。\n\n范畴举例：\n\n* 范畴 C 有 Int 类型和 String 类型对象。\n* 存在态射 f: Int->String。\n\n划重点：幺半群可以视为一类特殊的范畴。幺半群运算满足的公理同于范畴中 **从一个对象到自身的态射**。换言之：\n幺半群实质上是只有单个对象的范畴。\n\n### Functor\n\n> 在范畴论中，函子是范畴间的一类映射。函子也可以解释为小范畴为成员的范畴内的态射。 [wikipedia](https://zh.wikipedia.org/wiki/函子)\n\n在当代数学中，函子被用来描述各种范畴间的关系。对范畴论者来说，函子则是个特别类型的函数。\n\n设 C 和 D 为范畴，从 C 至 D 的函子为一映射 F:\n\n* 将每个对象 x∈C 映射至一对象 F(x)∈D 上。\n* 将每个态射 f: x->y∈C 映射至一态射 F(f): F(x)->F(y)∈D 上，\n\n使之满足：\n\n* 对任何对象 x∈C，恒有 F(id[x]) = id[F(x)]。\n* 对任何态射 f: x->y, g: y->z，恒有 F(f·g) = F(f)·F(g)。\n\n换言之，函子会保持单位态射与态射的复合。\n一个由一范畴映射至其自身的函子称之为 **自函子（Endofunctor）**。\n\n#### 可以把范畴当作一组类型的集合\n\n如范畴 C 有 `Int` 类型和 `String` 类型对象，以及 `Int -> String` 的态射；范畴 D 有 `Array<Int>` 类型和 `Array<String>` 类型对象，以及 `Array<Int> -> Array<String>` 的态射。两个范畴之间的映射 F：\n\n* `Int` 映射至 `Array<Int>` 上，`String` 映射至 `Array<String>` 上。\n* 态射 `Int -> String` 映射至 `Array<Int> -> Array<String>` 上。\n\n翻译成代码：C: `Int`, `String`, f: `Int -> String`, D: `Array<Int>`, `Array<String>`, f: `Array<Int> -> Array<String>`。\n\n* x: `Int` -> F(x): `Array<Int>`，`String` -> F(x): `Array<String>`\n* f: `(Int -> String)` -> F(f): `(Array<Int> -> Array<String>)`\n\n范畴是不涉及具体类型的，所以用泛型表示：\n\n```swift\nfunc tmap<T>(x: T) -> F<T>\nfunc fmap<A, B>(f: A -> B) -> (F<A> -> F<B>)\n```\n\n简化一下变成：\n\n```swift\n// Swift 中把 Int 映射到 Array<Int> 由 Array 的初始化方法提供，\n// 所以可以不写。\n// 由于 fmap 实际上是 (F<A>, A -> B) -> F<B> 的 currying 版本，\n// 所以两者是等价的。\nfunc map<A, B>(x: F<A>, f: A -> B) -> F<B>\n```\n\n再来看看 Swift 中的 `Array` 和 `Optional`。如果把 Swift 中所有的类型 `A, B` 当作对象，以及 Swift 中所有的函数当作态射 `A -> B`，那么这些类型和函数就组成一个范畴 A。把 `Array` 类型当作对象 `Array<A>, Array<B>`，`Array` 上所有的函数当作态射 `Array<A> -> Array<B>`，那么也组成一个范畴 B。而 A 到 B 之间的函子是 `Array`，因为函子 `Array` 能将任意类型 `T` 转换为 `Array<T>`。`Optional` 同理。\n\n很多库对 `Functor` 的支持直接在类型构造器（Type Constructor）的定义中实现 `map` 方法，比如 Swift 中的 `Array` 和 `Optional` 就是需要一个泛型作为参数来构建具体类型的类型构造器，它在定义中实现了 `map` 方法。这些类型构造器相当于同时具备了类型和函数的映射。在 Haskell 里把这个行为称为 `Lift`，相当于把类型和函数放到容器里面。所以一个带有 `map` 方法的类型构造器就是一个函子。\n\n范畴与高阶类型：如果忽略范畴中的态射，范畴其实就是对特定类型的抽象，即高阶类型（类型构造器）。对于范畴 D，它的所有类型都是 `Array<T>` 的特定类型。而对于范畴 C，可以看作是一个 Identity 类型的构造器（id[T] = T）。\n\n注意⚠️：函子不是容器，函子不是容器，函子不是容器。\n如 `typealias Parser<A> = (String) -> (A, String)?` 我们可以实现 `func map<A, B>(x: Parser<A>, f: (A) -> B) -> Parser<B>` 函数，所以我们可以说 `Parser<A>` 是一个函子，但它不是容器。\n\n### Endofunctor\n\n> A functor that maps a category to itself。一个由一范畴映射至其自身的函子称之为 **自函子（Endofunctor）**。\n\n先看自函数的概念：将一个类型映射到自身类型，如 `Int -> Int`。\n\n```swift\nfunc f(x: Int) -> Int { return x + 1 }\n```\n\n单位函数（Identity Function）的概念：什么都不做，传入什么就返回什么。属于自函数的特例。\n\n```swift\nfunc id(x: Int) -> Int { return x }\n```\n\n**自函子不是单位函子（Identity Functor）**。还是上面的范畴 C，为了区分自函子和单位函子，多加一种态射 g: `String -> Int`，那么：\n\n自函子：对于函子 F，对于 `F(Int)` 结果是 `String`，`F(String)` 结果是 `Int`，对于 `F(f: Int -> String)` 结果是 g: `String -> Int`。那么这个函子就是自函子。\n\n单位函子（Identity Functor）：对于函子 F，对于 `F(Int)` 结果还是 `Int`，对于 `F(String)` 结果还是 `String`，对于 `F(f: Int -> String)` 结果还是 `f: Int -> String`，对于 `F(g: String -> Int)` 结果还是 g: `String -> Int`。那么这个函子就是单位函子。 \n\n## Applicative\n\n> An applicative is a monoid in the category of endofunctors, what's the problem?\n\n虽然在 Haskell 中 Monad 是 Applicative 的一种，但是 Applicative 的出现却在 Monad 之后。\n\n[Applicative](https://www.reddit.com/r/haskell/comments/2lompe/where_do_the_applicative_laws_come_from/)\n\n## Monad\n\n> A monad is a monoid in the category of endofunctors -- Philip Wadler\n\n自函子说穿了就是把一个范畴映射到自身的函子，自函子范畴说穿了就是从小范畴映射到自身的函子所构成的以自函子为对象以自然变换为态射的范畴，幺半群说穿了就是只有单个对象的范畴，给定了一个幺半群则可构造出一个仅有单个对象的小范畴使其态射由幺半群的元素给出而合成由幺半群的运算给出，而单子说穿了就是自函子范畴上的这样一个幺半群。（这都不理解么亲连这种最基本的概念都不理解还学什么编程！\n\n一系列 Endofunctor 组成的范畴，成为 **自函子范畴**。\n\n* X 上的自函子：F：`X -> X`\n* 单位自函子 id[X] 到函子 F 的自然转换：`id[X] -> F` (pure\n* 函子 F 的张量积 F⊗F 到函子 F 的自然转换：`F⊗F -> F` (join\n\n代码表示：\n\n* `func unit<T>(x: T) -> F<T> // x = id[x]` \n* `func join<T>(a: F<F<T>>) -> F<T>`\n\n此处函子的张量积 ⊗ 可以看作为组合（Composition）；\n注意结合 Monoidal Category 理解，`unit` 和 `join` 满足 Monoid 的定律，所有形成了 Monoid。\n\n也就是说：单子（Monad）是自函子的 Monoidal 范畴上的一个幺半群，该 Monoidal 范畴的张量积（Tensor Product，⊗：F×F -> F）是自函子的复合（Composition），单位元是 Id Functor。\n\n`bind` 或者说 `flatMap` 或者 `>>=` 其实等于 `map + join`。（见 [apple/swift](https://github.com/apple/swift) 中的 `stdlib/public/core/FlatMap.swift`\n\n```swift\nfunc >>=<A, B>(x: F<A>, f: A -> F<B>) -> F<B>\n// Currying 前的样子\nfunc >>=<A, B>(x: F<A>) -> (f: A -> F<B>) -> F<B>\n```\n\n## Ref\n\nToo much\n\n\n","slug":"group-theory-and-category-theory","published":1,"updated":"2022-01-02T11:26:47.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810x400039ith5vew3297","content":"<p>想理解函数式编程中的一些高大上的概念，比如 Functor, Monad 等，必须要先理解范畴论。</p>\n<h2 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h2><blockquote>\n<p>群，是一种代数结构，由一个集合（G）以及一个二元运算符（·）所组成。<a href=\"https://zh.wikipedia.org/wiki/%E7%BE%A4\">wikipedia</a></p>\n</blockquote>\n<p>一个群必须满足一些称为 <em>群公理</em> 的条件，也就是 <strong>封闭性</strong>、<strong>结合律</strong>、<strong>单位元</strong> 和 <strong>逆元</strong>。如整数配备上加法运算就形成一个群。</p>\n<ul>\n<li>封闭性（Closure）：对于任意 a,b∈G，a·b∈G。</li>\n<li>结合律（Associativity）：对于任意 a,b,c∈G，(a·b)·c = a·(b·c)。</li>\n<li>单位元（Identity）：G 中存在一个元素 e，使得任意 a∈G，a·e = e·a = a。</li>\n<li>逆元：对于任意 a∈G，存在 b∈G，使得 a·b = b·a = e。</li>\n</ul>\n<p>群并不要求这个二元运算符（·）具体做什么，它只要求这个二元运算符存在，所以很多数学结构都是群。比如我们可以把整数当作一个群，把 <code>+</code> 作为二元运算符。</p>\n<ul>\n<li>封闭性：对于任意两个整数 a,b，a+b 依然是一个整数。</li>\n<li>结合律：对于任意整数 a,b,c，(a+b)+c = a+(b+c)。</li>\n<li>单位元：存在元素 0，使得 a+0 = 0+a = a。</li>\n<li>逆元：对于任意整数 a，当 b=-a 时，a+b = b+a = e。</li>\n</ul>\n<p>所以我们可以说 <code>(整数, +)</code> 是一个群。如果把 <code>*</code> 当作二元运算符，把 <code>1</code> 作为单位元的时候，整数就形成了另一个群。</p>\n<p>除了整数，还有很多数学结构是群。</p>\n<h3 id=\"Semigroup\"><a href=\"#Semigroup\" class=\"headerlink\" title=\"Semigroup\"></a>Semigroup</h3><p>满足封闭性和结合律的群，称为半群（semigroup）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> <span class=\"title\">&lt;&gt;</span>: <span class=\"type\">AdditionPrecedence</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"keyword\">Self</span>, <span class=\"params\">rhs</span>: <span class=\"keyword\">Self</span>)</span> -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Int</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs <span class=\"operator\">+</span> rhs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Array</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Array</span>)</span> -&gt; <span class=\"type\">Array</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs <span class=\"operator\">+</span> rhs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 折叠 fold</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concat</span>&lt;<span class=\"type\">S</span>: <span class=\"type\">Semigroup</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">S</span>], <span class=\"keyword\">_</span> <span class=\"params\">initial</span>: <span class=\"type\">S</span>)</span> -&gt; <span class=\"type\">S</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(initial, <span class=\"operator\">&lt;&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>半群的结合律特性使得我们可以进行并行运算，<code>1 &lt;&gt; 2 &lt;&gt; 3 &lt;&gt; 4</code>。</p>\n<h3 id=\"Monoid\"><a href=\"#Monoid\" class=\"headerlink\" title=\"Monoid\"></a>Monoid</h3><p>在抽象代数中，有一类简单的抽象结构被称为 Monoid（幺半群）。许多数学结构都是幺半群，因为成为幺半群的要求非常低。</p>\n<p>存在单位元的半群，称为含幺半群，或者幺半群，或者单群，或者独异点（monoid）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Monoid</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e: <span class=\"keyword\">Self</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Monoid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Monoid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e: <span class=\"type\">Array</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concat</span>&lt;<span class=\"type\">M</span>: <span class=\"type\">Monoid</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">M</span>])</span> -&gt; <span class=\"type\">M</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(<span class=\"type\">M</span>.e, <span class=\"operator\">&lt;&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>concat</code> 是对 Monoid 的一种应用，它可以利用 Monoid 的定义（ 二元操作 <code>&lt;&gt;</code> 和 单位元 <code>e</code> ）进行折叠操作。</p>\n<h2 id=\"Category-Theory\"><a href=\"#Category-Theory\" class=\"headerlink\" title=\"Category Theory\"></a>Category Theory</h2><blockquote>\n<p>范畴论是数学的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。<a href=\"https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA\">wikipedia</a></p>\n</blockquote>\n<h3 id=\"Category\"><a href=\"#Category\" class=\"headerlink\" title=\"Category\"></a>Category</h3><p>一个范畴 C 包括：</p>\n<ul>\n<li>一个由对象（object）组成的类 ob(C)。（注：这里把“物件”成为“对象“更有助于从计算机的角度理解</li>\n<li>对象间态射（morphism，-&gt;）组成的类 hom(C)：每个态射 f 都只有一个「源对象」a 以及一个「目标对象」b（其中 a,b 都在 ob(C) 内），称之为 <strong>从 a 到 b 的态射</strong>，记为 f: a-&gt;b。（注：identity 态射即自己映射到自己的特殊态射，f: a-&gt;a，简单记为 id[a]）</li>\n<li>一个二元运算符（·），用于态射组合，如 h=g·f。</li>\n</ul>\n<p>满足公理：</p>\n<ul>\n<li>结合律：f: a-&gt;b, g: b-&gt;c, h: c-&gt;d，h·(g·f) = (h·g)·f。</li>\n<li>单位元：id[a]·f = id[b]·f = f。</li>\n<li>封闭性：f: a-&gt;b, g: b-&gt;c, h: a-&gt;c, h = f·g。</li>\n</ul>\n<p>范畴举例：</p>\n<ul>\n<li>范畴 C 有 Int 类型和 String 类型对象。</li>\n<li>存在态射 f: Int-&gt;String。</li>\n</ul>\n<p>划重点：幺半群可以视为一类特殊的范畴。幺半群运算满足的公理同于范畴中 <strong>从一个对象到自身的态射</strong>。换言之：<br>幺半群实质上是只有单个对象的范畴。</p>\n<h3 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h3><blockquote>\n<p>在范畴论中，函子是范畴间的一类映射。函子也可以解释为小范畴为成员的范畴内的态射。 <a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E5%AD%90\">wikipedia</a></p>\n</blockquote>\n<p>在当代数学中，函子被用来描述各种范畴间的关系。对范畴论者来说，函子则是个特别类型的函数。</p>\n<p>设 C 和 D 为范畴，从 C 至 D 的函子为一映射 F:</p>\n<ul>\n<li>将每个对象 x∈C 映射至一对象 F(x)∈D 上。</li>\n<li>将每个态射 f: x-&gt;y∈C 映射至一态射 F(f): F(x)-&gt;F(y)∈D 上，</li>\n</ul>\n<p>使之满足：</p>\n<ul>\n<li>对任何对象 x∈C，恒有 F(id[x]) = id[F(x)]。</li>\n<li>对任何态射 f: x-&gt;y, g: y-&gt;z，恒有 F(f·g) = F(f)·F(g)。</li>\n</ul>\n<p>换言之，函子会保持单位态射与态射的复合。<br>一个由一范畴映射至其自身的函子称之为 <strong>自函子（Endofunctor）</strong>。</p>\n<h4 id=\"可以把范畴当作一组类型的集合\"><a href=\"#可以把范畴当作一组类型的集合\" class=\"headerlink\" title=\"可以把范畴当作一组类型的集合\"></a>可以把范畴当作一组类型的集合</h4><p>如范畴 C 有 <code>Int</code> 类型和 <code>String</code> 类型对象，以及 <code>Int -&gt; String</code> 的态射；范畴 D 有 <code>Array&lt;Int&gt;</code> 类型和 <code>Array&lt;String&gt;</code> 类型对象，以及 <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code> 的态射。两个范畴之间的映射 F：</p>\n<ul>\n<li><code>Int</code> 映射至 <code>Array&lt;Int&gt;</code> 上，<code>String</code> 映射至 <code>Array&lt;String&gt;</code> 上。</li>\n<li>态射 <code>Int -&gt; String</code> 映射至 <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code> 上。</li>\n</ul>\n<p>翻译成代码：C: <code>Int</code>, <code>String</code>, f: <code>Int -&gt; String</code>, D: <code>Array&lt;Int&gt;</code>, <code>Array&lt;String&gt;</code>, f: <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code>。</p>\n<ul>\n<li>x: <code>Int</code> -&gt; F(x): <code>Array&lt;Int&gt;</code>，<code>String</code> -&gt; F(x): <code>Array&lt;String&gt;</code></li>\n<li>f: <code>(Int -&gt; String)</code> -&gt; F(f): <code>(Array&lt;Int&gt; -&gt; Array&lt;String&gt;)</code></li>\n</ul>\n<p>范畴是不涉及具体类型的，所以用泛型表示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tmap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">x</span>: <span class=\"type\">T</span>)</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fmap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"params\">f</span>: <span class=\"type\">A</span> -&gt; <span class=\"type\">B</span>)</span> -&gt; (<span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt; -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>简化一下变成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Swift 中把 Int 映射到 Array&lt;Int&gt; 由 Array 的初始化方法提供，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以不写。</span></span><br><span class=\"line\"><span class=\"comment\">// 由于 fmap 实际上是 (F&lt;A&gt;, A -&gt; B) -&gt; F&lt;B&gt; 的 currying 版本，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以两者是等价的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"params\">x</span>: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"params\">f</span>: <span class=\"type\">A</span> -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再来看看 Swift 中的 <code>Array</code> 和 <code>Optional</code>。如果把 Swift 中所有的类型 <code>A, B</code> 当作对象，以及 Swift 中所有的函数当作态射 <code>A -&gt; B</code>，那么这些类型和函数就组成一个范畴 A。把 <code>Array</code> 类型当作对象 <code>Array&lt;A&gt;, Array&lt;B&gt;</code>，<code>Array</code> 上所有的函数当作态射 <code>Array&lt;A&gt; -&gt; Array&lt;B&gt;</code>，那么也组成一个范畴 B。而 A 到 B 之间的函子是 <code>Array</code>，因为函子 <code>Array</code> 能将任意类型 <code>T</code> 转换为 <code>Array&lt;T&gt;</code>。<code>Optional</code> 同理。</p>\n<p>很多库对 <code>Functor</code> 的支持直接在类型构造器（Type Constructor）的定义中实现 <code>map</code> 方法，比如 Swift 中的 <code>Array</code> 和 <code>Optional</code> 就是需要一个泛型作为参数来构建具体类型的类型构造器，它在定义中实现了 <code>map</code> 方法。这些类型构造器相当于同时具备了类型和函数的映射。在 Haskell 里把这个行为称为 <code>Lift</code>，相当于把类型和函数放到容器里面。所以一个带有 <code>map</code> 方法的类型构造器就是一个函子。</p>\n<p>范畴与高阶类型：如果忽略范畴中的态射，范畴其实就是对特定类型的抽象，即高阶类型（类型构造器）。对于范畴 D，它的所有类型都是 <code>Array&lt;T&gt;</code> 的特定类型。而对于范畴 C，可以看作是一个 Identity 类型的构造器（id[T] = T）。</p>\n<p>注意⚠️：函子不是容器，函子不是容器，函子不是容器。<br>如 <code>typealias Parser&lt;A&gt; = (String) -&gt; (A, String)?</code> 我们可以实现 <code>func map&lt;A, B&gt;(x: Parser&lt;A&gt;, f: (A) -&gt; B) -&gt; Parser&lt;B&gt;</code> 函数，所以我们可以说 <code>Parser&lt;A&gt;</code> 是一个函子，但它不是容器。</p>\n<h3 id=\"Endofunctor\"><a href=\"#Endofunctor\" class=\"headerlink\" title=\"Endofunctor\"></a>Endofunctor</h3><blockquote>\n<p>A functor that maps a category to itself。一个由一范畴映射至其自身的函子称之为 <strong>自函子（Endofunctor）</strong>。</p>\n</blockquote>\n<p>先看自函数的概念：将一个类型映射到自身类型，如 <code>Int -&gt; Int</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> x <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>单位函数（Identity Function）的概念：什么都不做，传入什么就返回什么。属于自函数的特例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">id</span>(<span class=\"params\">x</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> x &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自函子不是单位函子（Identity Functor）</strong>。还是上面的范畴 C，为了区分自函子和单位函子，多加一种态射 g: <code>String -&gt; Int</code>，那么：</p>\n<p>自函子：对于函子 F，对于 <code>F(Int)</code> 结果是 <code>String</code>，<code>F(String)</code> 结果是 <code>Int</code>，对于 <code>F(f: Int -&gt; String)</code> 结果是 g: <code>String -&gt; Int</code>。那么这个函子就是自函子。</p>\n<p>单位函子（Identity Functor）：对于函子 F，对于 <code>F(Int)</code> 结果还是 <code>Int</code>，对于 <code>F(String)</code> 结果还是 <code>String</code>，对于 <code>F(f: Int -&gt; String)</code> 结果还是 <code>f: Int -&gt; String</code>，对于 <code>F(g: String -&gt; Int)</code> 结果还是 g: <code>String -&gt; Int</code>。那么这个函子就是单位函子。 </p>\n<h2 id=\"Applicative\"><a href=\"#Applicative\" class=\"headerlink\" title=\"Applicative\"></a>Applicative</h2><blockquote>\n<p>An applicative is a monoid in the category of endofunctors, what’s the problem?</p>\n</blockquote>\n<p>虽然在 Haskell 中 Monad 是 Applicative 的一种，但是 Applicative 的出现却在 Monad 之后。</p>\n<p><a href=\"https://www.reddit.com/r/haskell/comments/2lompe/where_do_the_applicative_laws_come_from/\">Applicative</a></p>\n<h2 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h2><blockquote>\n<p>A monad is a monoid in the category of endofunctors – Philip Wadler</p>\n</blockquote>\n<p>自函子说穿了就是把一个范畴映射到自身的函子，自函子范畴说穿了就是从小范畴映射到自身的函子所构成的以自函子为对象以自然变换为态射的范畴，幺半群说穿了就是只有单个对象的范畴，给定了一个幺半群则可构造出一个仅有单个对象的小范畴使其态射由幺半群的元素给出而合成由幺半群的运算给出，而单子说穿了就是自函子范畴上的这样一个幺半群。（这都不理解么亲连这种最基本的概念都不理解还学什么编程！</p>\n<p>一系列 Endofunctor 组成的范畴，成为 <strong>自函子范畴</strong>。</p>\n<ul>\n<li>X 上的自函子：F：<code>X -&gt; X</code></li>\n<li>单位自函子 id[X] 到函子 F 的自然转换：<code>id[X] -&gt; F</code> (pure</li>\n<li>函子 F 的张量积 F⊗F 到函子 F 的自然转换：<code>F⊗F -&gt; F</code> (join</li>\n</ul>\n<p>代码表示：</p>\n<ul>\n<li><code>func unit&lt;T&gt;(x: T) -&gt; F&lt;T&gt; // x = id[x]</code> </li>\n<li><code>func join&lt;T&gt;(a: F&lt;F&lt;T&gt;&gt;) -&gt; F&lt;T&gt;</code></li>\n</ul>\n<p>此处函子的张量积 ⊗ 可以看作为组合（Composition）；<br>注意结合 Monoidal Category 理解，<code>unit</code> 和 <code>join</code> 满足 Monoid 的定律，所有形成了 Monoid。</p>\n<p>也就是说：单子（Monad）是自函子的 Monoidal 范畴上的一个幺半群，该 Monoidal 范畴的张量积（Tensor Product，⊗：F×F -&gt; F）是自函子的复合（Composition），单位元是 Id Functor。</p>\n<p><code>bind</code> 或者说 <code>flatMap</code> 或者 <code>&gt;&gt;=</code> 其实等于 <code>map + join</code>。（见 <a href=\"https://github.com/apple/swift\">apple/swift</a> 中的 <code>stdlib/public/core/FlatMap.swift</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&gt;&gt;=&lt;</span></span><span class=\"type\">A</span>, <span class=\"type\">B</span><span class=\"operator\">&gt;</span>(x: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;, f: <span class=\"type\">A</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;) -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// Currying 前的样子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&gt;&gt;=&lt;</span></span><span class=\"type\">A</span>, <span class=\"type\">B</span><span class=\"operator\">&gt;</span>(x: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;) -&gt; (f: <span class=\"type\">A</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;) -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p>Too much</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想理解函数式编程中的一些高大上的概念，比如 Functor, Monad 等，必须要先理解范畴论。</p>\n<h2 id=\"Group\"><a href=\"#Group\" class=\"headerlink\" title=\"Group\"></a>Group</h2><blockquote>\n<p>群，是一种代数结构，由一个集合（G）以及一个二元运算符（·）所组成。<a href=\"https://zh.wikipedia.org/wiki/%E7%BE%A4\">wikipedia</a></p>\n</blockquote>\n<p>一个群必须满足一些称为 <em>群公理</em> 的条件，也就是 <strong>封闭性</strong>、<strong>结合律</strong>、<strong>单位元</strong> 和 <strong>逆元</strong>。如整数配备上加法运算就形成一个群。</p>\n<ul>\n<li>封闭性（Closure）：对于任意 a,b∈G，a·b∈G。</li>\n<li>结合律（Associativity）：对于任意 a,b,c∈G，(a·b)·c = a·(b·c)。</li>\n<li>单位元（Identity）：G 中存在一个元素 e，使得任意 a∈G，a·e = e·a = a。</li>\n<li>逆元：对于任意 a∈G，存在 b∈G，使得 a·b = b·a = e。</li>\n</ul>\n<p>群并不要求这个二元运算符（·）具体做什么，它只要求这个二元运算符存在，所以很多数学结构都是群。比如我们可以把整数当作一个群，把 <code>+</code> 作为二元运算符。</p>\n<ul>\n<li>封闭性：对于任意两个整数 a,b，a+b 依然是一个整数。</li>\n<li>结合律：对于任意整数 a,b,c，(a+b)+c = a+(b+c)。</li>\n<li>单位元：存在元素 0，使得 a+0 = 0+a = a。</li>\n<li>逆元：对于任意整数 a，当 b=-a 时，a+b = b+a = e。</li>\n</ul>\n<p>所以我们可以说 <code>(整数, +)</code> 是一个群。如果把 <code>*</code> 当作二元运算符，把 <code>1</code> 作为单位元的时候，整数就形成了另一个群。</p>\n<p>除了整数，还有很多数学结构是群。</p>\n<h3 id=\"Semigroup\"><a href=\"#Semigroup\" class=\"headerlink\" title=\"Semigroup\"></a>Semigroup</h3><p>满足封闭性和结合律的群，称为半群（semigroup）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> <span class=\"title\">&lt;&gt;</span>: <span class=\"type\">AdditionPrecedence</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"keyword\">Self</span>, <span class=\"params\">rhs</span>: <span class=\"keyword\">Self</span>)</span> -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Int</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs <span class=\"operator\">+</span> rhs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&lt;&gt;</span>(<span class=\"params\">lhs</span>: <span class=\"type\">Array</span>, <span class=\"params\">rhs</span>: <span class=\"type\">Array</span>)</span> -&gt; <span class=\"type\">Array</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs <span class=\"operator\">+</span> rhs</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 折叠 fold</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concat</span>&lt;<span class=\"type\">S</span>: <span class=\"type\">Semigroup</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">S</span>], <span class=\"keyword\">_</span> <span class=\"params\">initial</span>: <span class=\"type\">S</span>)</span> -&gt; <span class=\"type\">S</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(initial, <span class=\"operator\">&lt;&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>半群的结合律特性使得我们可以进行并行运算，<code>1 &lt;&gt; 2 &lt;&gt; 3 &lt;&gt; 4</code>。</p>\n<h3 id=\"Monoid\"><a href=\"#Monoid\" class=\"headerlink\" title=\"Monoid\"></a>Monoid</h3><p>在抽象代数中，有一类简单的抽象结构被称为 Monoid（幺半群）。许多数学结构都是幺半群，因为成为幺半群的要求非常低。</p>\n<p>存在单位元的半群，称为含幺半群，或者幺半群，或者单群，或者独异点（monoid）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Monoid</span>: <span class=\"title\">Semigroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e: <span class=\"keyword\">Self</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Monoid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Array</span>: <span class=\"title\">Monoid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> e: <span class=\"type\">Array</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">concat</span>&lt;<span class=\"type\">M</span>: <span class=\"type\">Monoid</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">M</span>])</span> -&gt; <span class=\"type\">M</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(<span class=\"type\">M</span>.e, <span class=\"operator\">&lt;&gt;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>concat</code> 是对 Monoid 的一种应用，它可以利用 Monoid 的定义（ 二元操作 <code>&lt;&gt;</code> 和 单位元 <code>e</code> ）进行折叠操作。</p>\n<h2 id=\"Category-Theory\"><a href=\"#Category-Theory\" class=\"headerlink\" title=\"Category Theory\"></a>Category Theory</h2><blockquote>\n<p>范畴论是数学的一门学科，以抽象的方法来处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。<a href=\"https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA\">wikipedia</a></p>\n</blockquote>\n<h3 id=\"Category\"><a href=\"#Category\" class=\"headerlink\" title=\"Category\"></a>Category</h3><p>一个范畴 C 包括：</p>\n<ul>\n<li>一个由对象（object）组成的类 ob(C)。（注：这里把“物件”成为“对象“更有助于从计算机的角度理解</li>\n<li>对象间态射（morphism，-&gt;）组成的类 hom(C)：每个态射 f 都只有一个「源对象」a 以及一个「目标对象」b（其中 a,b 都在 ob(C) 内），称之为 <strong>从 a 到 b 的态射</strong>，记为 f: a-&gt;b。（注：identity 态射即自己映射到自己的特殊态射，f: a-&gt;a，简单记为 id[a]）</li>\n<li>一个二元运算符（·），用于态射组合，如 h=g·f。</li>\n</ul>\n<p>满足公理：</p>\n<ul>\n<li>结合律：f: a-&gt;b, g: b-&gt;c, h: c-&gt;d，h·(g·f) = (h·g)·f。</li>\n<li>单位元：id[a]·f = id[b]·f = f。</li>\n<li>封闭性：f: a-&gt;b, g: b-&gt;c, h: a-&gt;c, h = f·g。</li>\n</ul>\n<p>范畴举例：</p>\n<ul>\n<li>范畴 C 有 Int 类型和 String 类型对象。</li>\n<li>存在态射 f: Int-&gt;String。</li>\n</ul>\n<p>划重点：幺半群可以视为一类特殊的范畴。幺半群运算满足的公理同于范畴中 <strong>从一个对象到自身的态射</strong>。换言之：<br>幺半群实质上是只有单个对象的范畴。</p>\n<h3 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h3><blockquote>\n<p>在范畴论中，函子是范畴间的一类映射。函子也可以解释为小范畴为成员的范畴内的态射。 <a href=\"https://zh.wikipedia.org/wiki/%E5%87%BD%E5%AD%90\">wikipedia</a></p>\n</blockquote>\n<p>在当代数学中，函子被用来描述各种范畴间的关系。对范畴论者来说，函子则是个特别类型的函数。</p>\n<p>设 C 和 D 为范畴，从 C 至 D 的函子为一映射 F:</p>\n<ul>\n<li>将每个对象 x∈C 映射至一对象 F(x)∈D 上。</li>\n<li>将每个态射 f: x-&gt;y∈C 映射至一态射 F(f): F(x)-&gt;F(y)∈D 上，</li>\n</ul>\n<p>使之满足：</p>\n<ul>\n<li>对任何对象 x∈C，恒有 F(id[x]) = id[F(x)]。</li>\n<li>对任何态射 f: x-&gt;y, g: y-&gt;z，恒有 F(f·g) = F(f)·F(g)。</li>\n</ul>\n<p>换言之，函子会保持单位态射与态射的复合。<br>一个由一范畴映射至其自身的函子称之为 <strong>自函子（Endofunctor）</strong>。</p>\n<h4 id=\"可以把范畴当作一组类型的集合\"><a href=\"#可以把范畴当作一组类型的集合\" class=\"headerlink\" title=\"可以把范畴当作一组类型的集合\"></a>可以把范畴当作一组类型的集合</h4><p>如范畴 C 有 <code>Int</code> 类型和 <code>String</code> 类型对象，以及 <code>Int -&gt; String</code> 的态射；范畴 D 有 <code>Array&lt;Int&gt;</code> 类型和 <code>Array&lt;String&gt;</code> 类型对象，以及 <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code> 的态射。两个范畴之间的映射 F：</p>\n<ul>\n<li><code>Int</code> 映射至 <code>Array&lt;Int&gt;</code> 上，<code>String</code> 映射至 <code>Array&lt;String&gt;</code> 上。</li>\n<li>态射 <code>Int -&gt; String</code> 映射至 <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code> 上。</li>\n</ul>\n<p>翻译成代码：C: <code>Int</code>, <code>String</code>, f: <code>Int -&gt; String</code>, D: <code>Array&lt;Int&gt;</code>, <code>Array&lt;String&gt;</code>, f: <code>Array&lt;Int&gt; -&gt; Array&lt;String&gt;</code>。</p>\n<ul>\n<li>x: <code>Int</code> -&gt; F(x): <code>Array&lt;Int&gt;</code>，<code>String</code> -&gt; F(x): <code>Array&lt;String&gt;</code></li>\n<li>f: <code>(Int -&gt; String)</code> -&gt; F(f): <code>(Array&lt;Int&gt; -&gt; Array&lt;String&gt;)</code></li>\n</ul>\n<p>范畴是不涉及具体类型的，所以用泛型表示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tmap</span>&lt;<span class=\"type\">T</span>&gt;(<span class=\"params\">x</span>: <span class=\"type\">T</span>)</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">T</span>&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fmap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"params\">f</span>: <span class=\"type\">A</span> -&gt; <span class=\"type\">B</span>)</span> -&gt; (<span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt; -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>简化一下变成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Swift 中把 Int 映射到 Array&lt;Int&gt; 由 Array 的初始化方法提供，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以可以不写。</span></span><br><span class=\"line\"><span class=\"comment\">// 由于 fmap 实际上是 (F&lt;A&gt;, A -&gt; B) -&gt; F&lt;B&gt; 的 currying 版本，</span></span><br><span class=\"line\"><span class=\"comment\">// 所以两者是等价的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"params\">x</span>: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"params\">f</span>: <span class=\"type\">A</span> -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再来看看 Swift 中的 <code>Array</code> 和 <code>Optional</code>。如果把 Swift 中所有的类型 <code>A, B</code> 当作对象，以及 Swift 中所有的函数当作态射 <code>A -&gt; B</code>，那么这些类型和函数就组成一个范畴 A。把 <code>Array</code> 类型当作对象 <code>Array&lt;A&gt;, Array&lt;B&gt;</code>，<code>Array</code> 上所有的函数当作态射 <code>Array&lt;A&gt; -&gt; Array&lt;B&gt;</code>，那么也组成一个范畴 B。而 A 到 B 之间的函子是 <code>Array</code>，因为函子 <code>Array</code> 能将任意类型 <code>T</code> 转换为 <code>Array&lt;T&gt;</code>。<code>Optional</code> 同理。</p>\n<p>很多库对 <code>Functor</code> 的支持直接在类型构造器（Type Constructor）的定义中实现 <code>map</code> 方法，比如 Swift 中的 <code>Array</code> 和 <code>Optional</code> 就是需要一个泛型作为参数来构建具体类型的类型构造器，它在定义中实现了 <code>map</code> 方法。这些类型构造器相当于同时具备了类型和函数的映射。在 Haskell 里把这个行为称为 <code>Lift</code>，相当于把类型和函数放到容器里面。所以一个带有 <code>map</code> 方法的类型构造器就是一个函子。</p>\n<p>范畴与高阶类型：如果忽略范畴中的态射，范畴其实就是对特定类型的抽象，即高阶类型（类型构造器）。对于范畴 D，它的所有类型都是 <code>Array&lt;T&gt;</code> 的特定类型。而对于范畴 C，可以看作是一个 Identity 类型的构造器（id[T] = T）。</p>\n<p>注意⚠️：函子不是容器，函子不是容器，函子不是容器。<br>如 <code>typealias Parser&lt;A&gt; = (String) -&gt; (A, String)?</code> 我们可以实现 <code>func map&lt;A, B&gt;(x: Parser&lt;A&gt;, f: (A) -&gt; B) -&gt; Parser&lt;B&gt;</code> 函数，所以我们可以说 <code>Parser&lt;A&gt;</code> 是一个函子，但它不是容器。</p>\n<h3 id=\"Endofunctor\"><a href=\"#Endofunctor\" class=\"headerlink\" title=\"Endofunctor\"></a>Endofunctor</h3><blockquote>\n<p>A functor that maps a category to itself。一个由一范畴映射至其自身的函子称之为 <strong>自函子（Endofunctor）</strong>。</p>\n</blockquote>\n<p>先看自函数的概念：将一个类型映射到自身类型，如 <code>Int -&gt; Int</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> x <span class=\"operator\">+</span> <span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>单位函数（Identity Function）的概念：什么都不做，传入什么就返回什么。属于自函数的特例。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">id</span>(<span class=\"params\">x</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> x &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自函子不是单位函子（Identity Functor）</strong>。还是上面的范畴 C，为了区分自函子和单位函子，多加一种态射 g: <code>String -&gt; Int</code>，那么：</p>\n<p>自函子：对于函子 F，对于 <code>F(Int)</code> 结果是 <code>String</code>，<code>F(String)</code> 结果是 <code>Int</code>，对于 <code>F(f: Int -&gt; String)</code> 结果是 g: <code>String -&gt; Int</code>。那么这个函子就是自函子。</p>\n<p>单位函子（Identity Functor）：对于函子 F，对于 <code>F(Int)</code> 结果还是 <code>Int</code>，对于 <code>F(String)</code> 结果还是 <code>String</code>，对于 <code>F(f: Int -&gt; String)</code> 结果还是 <code>f: Int -&gt; String</code>，对于 <code>F(g: String -&gt; Int)</code> 结果还是 g: <code>String -&gt; Int</code>。那么这个函子就是单位函子。 </p>\n<h2 id=\"Applicative\"><a href=\"#Applicative\" class=\"headerlink\" title=\"Applicative\"></a>Applicative</h2><blockquote>\n<p>An applicative is a monoid in the category of endofunctors, what’s the problem?</p>\n</blockquote>\n<p>虽然在 Haskell 中 Monad 是 Applicative 的一种，但是 Applicative 的出现却在 Monad 之后。</p>\n<p><a href=\"https://www.reddit.com/r/haskell/comments/2lompe/where_do_the_applicative_laws_come_from/\">Applicative</a></p>\n<h2 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h2><blockquote>\n<p>A monad is a monoid in the category of endofunctors – Philip Wadler</p>\n</blockquote>\n<p>自函子说穿了就是把一个范畴映射到自身的函子，自函子范畴说穿了就是从小范畴映射到自身的函子所构成的以自函子为对象以自然变换为态射的范畴，幺半群说穿了就是只有单个对象的范畴，给定了一个幺半群则可构造出一个仅有单个对象的小范畴使其态射由幺半群的元素给出而合成由幺半群的运算给出，而单子说穿了就是自函子范畴上的这样一个幺半群。（这都不理解么亲连这种最基本的概念都不理解还学什么编程！</p>\n<p>一系列 Endofunctor 组成的范畴，成为 <strong>自函子范畴</strong>。</p>\n<ul>\n<li>X 上的自函子：F：<code>X -&gt; X</code></li>\n<li>单位自函子 id[X] 到函子 F 的自然转换：<code>id[X] -&gt; F</code> (pure</li>\n<li>函子 F 的张量积 F⊗F 到函子 F 的自然转换：<code>F⊗F -&gt; F</code> (join</li>\n</ul>\n<p>代码表示：</p>\n<ul>\n<li><code>func unit&lt;T&gt;(x: T) -&gt; F&lt;T&gt; // x = id[x]</code> </li>\n<li><code>func join&lt;T&gt;(a: F&lt;F&lt;T&gt;&gt;) -&gt; F&lt;T&gt;</code></li>\n</ul>\n<p>此处函子的张量积 ⊗ 可以看作为组合（Composition）；<br>注意结合 Monoidal Category 理解，<code>unit</code> 和 <code>join</code> 满足 Monoid 的定律，所有形成了 Monoid。</p>\n<p>也就是说：单子（Monad）是自函子的 Monoidal 范畴上的一个幺半群，该 Monoidal 范畴的张量积（Tensor Product，⊗：F×F -&gt; F）是自函子的复合（Composition），单位元是 Id Functor。</p>\n<p><code>bind</code> 或者说 <code>flatMap</code> 或者 <code>&gt;&gt;=</code> 其实等于 <code>map + join</code>。（见 <a href=\"https://github.com/apple/swift\">apple/swift</a> 中的 <code>stdlib/public/core/FlatMap.swift</code></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&gt;&gt;=&lt;</span></span><span class=\"type\">A</span>, <span class=\"type\">B</span><span class=\"operator\">&gt;</span>(x: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;, f: <span class=\"type\">A</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;) -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br><span class=\"line\"><span class=\"comment\">// Currying 前的样子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">&gt;&gt;=&lt;</span></span><span class=\"type\">A</span>, <span class=\"type\">B</span><span class=\"operator\">&gt;</span>(x: <span class=\"type\">F</span>&lt;<span class=\"type\">A</span>&gt;) -&gt; (f: <span class=\"type\">A</span> -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;) -&gt; <span class=\"type\">F</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p>Too much</p>\n"},{"title":"∃ Existential","date":"2019-06-05T12:00:00.000Z","_content":"最初看到 **existential** 这个词，是在 [Swift Associated Types, cont.](http://www.russbishop.net/swift-associated-types-cont) 这篇文章中（第一次知道 `typealias Any = protocol<>` 也是在这篇文章），但当时并没有对这个陌生名称留下什么深刻印象。\n\n后来陆陆续续应该也看到过一些，比如 [Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/)。\n\n真正的想要去了解它，是之前写 [PATs](http://blessingsoft.com/2018/08/26/pats/) 的时候，那时候 **existential** 这个词很高频的出现，甚至是和 PATs 息息相关，所以进行了一个初步的了解。\n\n但是呢，只是片面的了解，而没有建立起立体的认识，记忆很快就会开始模糊，直到最后忘记掉。所以才有了这次的 **existential** 认知之旅。\n\n> 注：这篇大多数概念、观点、片段都来自于官方文档或者参考文章，小部分自己的认知理解，并且不保证理解的正确。\n\n## Existential Type\n\n想理解 **existential**，必须要先了解 **existential values**, **existential containers** 和 **witness tables** 的概念。\n\n在类型论中， [existential type](https://en.wikipedia.org/wiki/Type_system#Existential_types) 描述了抽象类型的接口。当对象的类型是 `protocol` 时，就会用到 **existential type**，因为存储或传递一个 `protocol` 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。\n\n一个遵从了特定 `protocol` 的类型一定包含其约定的所有方法，但是这些方法的地址是无法在编译期确定的，因为我们只有在运行时，才能确定这个 `protocol` 对应的真实类型。这和 `non-final class` 引用是类似的（因为可能被 override），因此也使用了 [类似的技术手段](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#method-dispatch) 来解决。`Protocol` 中约定的每一个被实现的方法的地址，都被保存在 **witness table** 中。\n\n### Existential Value\n\n显然的，**existential type** 的值，就是 **existential value**。:P\n\n### Existential Container\n\n```swift\nprotocol Foo {}\nlet foos: [Foo] = ... // What's the memory storage looks like?\n```\n\n简单来说 **existential of a protocol** 就是一个编译器生成的盒子 box，用来存放遵从这个 `protocol` 的值，这个盒子，也叫做 **Existential Container**，盒子里面的东西，就叫做 **witness**。\n\n关于 **existential container** 的内存布局，这些值怎么存储，要分几种情况来说。因为值类型和引用类型的处理方式不一样，值比较小和比较大也可以为了性能用不同的策略。[Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/) 和 [ABIStabilityManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md) 中都有详细的描述。\n\n简单来说就是 5 个字节的大小，前三个连续的字节叫做 *value buffer*，用来存放对象的值或者指针。值类型如果放得下，就直接内联放在 *value buffer* 里面，如果放不下，就在存放在堆上，把指针地址存放在 *value buffer* 里；引用类型直接放指针。\n第四个字节存放 `vwt` (*value witness table*) 指针。\n第五个字节存放 `pwt` (*protocol witness table*) 指针。\n\n对于那些限定了只能是 `class` 实现的 `protocol`，`containers` 中则会忽略 `vwt` 指针（因为对象自身包含指向自己类型信息的指针）以及多余的内连 buffer。并且，这里还有一个特例 `Any`，由于它没有遵从任何 `protocol`，因此 `Any` 对象的 `containers` 中没有 *witness table* 指针。（没错，`Any` 也是一个 **existential** ！即使 Swift 3 之后把 `Any` 当作了 keyword，但估计和之前的 `protocol <>` 差不多的实现，所以依然是 **existential** 。）\n\n### VWT\n\n每一个具体类型（concrete type）都有一张 *value witness table*，用来存放这个类型的有关内存布局和操作它的值的信息。当一个值类型具有不透明布局的时候，因为值编译的时候没办法知道实际类型，所以只能通过查询这个表来知道这些有关信息（metadata）。\n\n### PWT\n\n*Protocol witness table* 是 `protocol` 接口的一张函数表。如果有 associated type，它还会存储 associated type 的 metadata。\n\n> 所以什么是 **existential** 是什么？就是一个 `protocol` 类型的值。\n\n## Protocol\n\n当一个 `protocol` 作为类型而不是具体的类型约束的时候，它就是一个 **existential**。\n\n```swift\nprotocol Foo {}\n\nfunc bar<T: Foo>(_ foo: T) {} // This requires a concrete T that conforms to Foo\nfunc baz(_ foo: Foo) {} // This requires a variable of type Foo (pedantically: \"a Foo existential\")\n\nlet foo: Foo = ... // existential of protocol `Foo`\nbar(foo) // 😢 Protocol type 'Foo' cannot conform to 'Foo' because only concrete types can conform to protocols\nbaz(foo) // 😊\n```\n\n所以当看到 \"a protocol doesn't conform to itself\" 的时候，它实际上是指 \"the existential of a protocol doesn't conform to that protocol\"。 \n\n## Generic\n\n**Existentials** 不是真正的泛型（`generic`），但由于它们相互依赖于 `protocol`，这两个系统紧密地交织在一起。\n\n> While protocols create existential (\"there exists\") types, generics create universal (\"for all\") types. \n\n先回顾一下泛型的一些常见概念：\n\n* 泛型函数 `func swap<T>(_ a: inout T, _ b: inout T)`\n* 类型参数 `<T>`\n* 泛型类型 `Queue<T>`\n* 类型约束 `<T: Protocol, U: Class>`\n* 关联类型 `associatedtype T`\n* 泛型从句 `func foo<T: P, U: P>(_ a: T, _ b: T) where T: Equatable, T.Item == U.Item`\n\n当使用泛型作为类型约束的时候，会涉及到 **existentials**。\n\n```swift\nfunc bar<T: Foo>(_ foo: T) {}\nlet foo: Foo = ...\nbar(foo) // Protocol type 'Foo' cannot conform to 'Foo' because only concrete types can conform to protocols\n```\n\n## PATs\n既然有 **existentials** 了，那为什么还需要 **type eraser** 呢？\n\n先回过头来看看之前在 [PATs](http://blessingsoft.com/2018/08/26/pats/) 中遇到的几个问题。\n\n> Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n\n它的意思是，`Caching`  这个 PATs 没有（无法自动生成）一个 **existential**.\n\n> Using 'Logging' as a concrete type conforming to protocol 'Hashable' is no supported\n\n它的意思是，这个 `Logging` 的 **existential** 没有实现 `Hashable` 这个协议。\n\n为什么无法为 PATs 生成一个 **existential** 呢？实际上是可以的，但它很复杂。它可以通过一种叫做 **generalized existentials** 的技术，生成一个 **implicit existential**。即使这样，它还有很多问题需要解决。\n\n对于 **existential** 的自动生成，首先 **existential** 是运行时的（泛型 `generic` 是编译时的），它是通过在运行时，把 `protocol` 的一些信息存放在 **existential container** 里面。当 `protocol` 里面存在有 *associated types* 或者有 `Self` 约束的时候，它没办法针对任意类型（Any）自动生成填充这个 **existential container**。（Swift 是静态语言，对于泛型需要在编译时就进行泛型特化，**generic specialization**，除非把泛型当作是 `Any` 来处理。还有一种方式就是对 PATs 进行约束，`let strings: Any<Sequence where .Iterator.Element == String> = [\"a\", \"b\", \"c\"]`，也就是 `AnySequence<String>` ）\n\n理解这一点非常重要，可能会有点晕，再来捋一下。首先编译器把存储或者传递的  `protocol` 类型，先替换成 `existential container`（生成代码），然后再编译成目标代码。当编译器发现这个 `protocol` 是 PATs 时，它如果不通过 *generic specialization* 的话，无法生成不带泛型的代码。那为什么说 **existential** 是运行时的呢？因为存储或传递一个 `protocol` 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。\n\n还有一些类型是不适合自动生成 **existential** 的，编译器没法满足有 `init` 和 `static` 的要求。比如 `Decodable` 这样的没有实例方法的协议，**existential** 没有任何意义。\n\n```swift\npublic protocol Decodable {\n    init(from decoder: Decoder) throws\n}\n\nstruct Model: Decodable {\n    let x: String\n}\n\nfunc decode(_ decodable: Decodable) {\n}\nlet decodable: Decodable = Model(x: \"x\")\ndecode(decodable)\n// 上面对代码编译起来没有任何问题，也就是能自动生成 *existential*\n// 但对于 decode(_:) 函数，根本无从下手，因为 Decoder 需要的是一个遵守 Decodable 协议的类型，而不是值。\n\nfunc decode(_ type: Decodable.Type) {\n    let decodable = JSONDecoder().decode(type, from: data)\n    // let decodable = JSONDecoder().decode(Decodable.self, from: data)\n    // Protocol type 'Decodable' cannot conform to 'Decodable' because only concrete types can conform to protocols\n}\n// 最终还是那个 `Protocol type 'Decodable' cannot conform to 'Decodable' because only concrete types can conform to protocols`\n```\n\n其实 **type eraser** 和 **existentials** 这两种是对偶的（ duals ），泛型（ generic ）的 `Any<T>` 等同于 协议（ protocol ）的一种 **explicit existential**。\n\n## Existential in Other Language\n\n### Existential type in Java\n\nJava 泛型中的 **Wildcards** 其实就是一种 existential type，比如 `java.util.List<?>`。\n\n在 Java 中由于有[类型擦除](h) 的存在，泛型的参数类型信息在运行时会丢失，在运行时无法根据已知的类型信息区分 `List[Int]` 和 `List[String]`。\n\n```java\nList foo = new ArrayList();\nfoo.add(\"foo\");\nfoo.get(0); // \"foo\"\n```\n\n当没有给出类型参数的时候，通过使用 existential 来解决。\n\n```java\nList<?>\nList<? extends Number>\nList<? super Integer>\n```\n\n### Existential type in Kotlin\n\nKotlin 中没有 **existential type**。它有一个概念叫着 **The Existential** 的概念。\n\n```kotlin\nabstract class Animal()\nclass Dog()\nclass Bar<T> {\n}\nvar dogBar: Bar<Dog> = Bar()\nvar animalBar: Bar<Animal> = dogBar // 😢\n```\n\n```kotlin\nclass Bar<out T> {\n}\nvar dogBar: Bar<Dog> = Bar()\nvar animalBar: Bar<Animal> = dogBar // 😊\n```\n\n### Existential type in Scala\n\n`ArrayList() == List[]`\n\n```scala\nobject Trait {\n  def foo(seq: Seq[String]): Seq[String]\n  def foo(seq: Seq[Int]): Seq[Int]\n}\n// Error, have the same type after erasure\n\nList[_] // List[T] forSome { type T }\ntrait List[+T]\n```\n\n### Existential type in Rust\n\n `fn foo() -> impl Trait`\n\n核心在于 `impl Trait`，和 Swift 5.1 [Opaque Result Types](https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md) 中的 `func foo() -> some P` 一样。\n\n## Conclusion\n\n**Existential** 是什么？**Existential** 就是 `protocol` 类型的值。这是编译层面相关的概念，平时写代码不需要知道它意味着什么或者是什么，只需要知道它会跟你想象中一样 work 就行了。\n\n## Ref\n\n[Swift Associated Types, cont. - Russ Bishop](http://www.russbishop.net/swift-associated-types-cont)\n[ABIStabilityManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md)\n[GenericsManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md)\n[Improving the UI of generics - Swift Forums](https://forums.swift.org/t/improving-the-ui-of-generics/22814)\n[Protocols III: Existential Spelling - Cocoaphony](http://robnapier.net/existential-spelling)\n[Existential types - Wikipedia](https://en.wikipedia.org/wiki/Type_system#Existential_types)\n[Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/)\n[0244-opaque-result-types - GitHub](https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md)","source":"_posts/existential.md","raw":"---\ntitle: ∃ Existential\ndate: 2019-06-05 20:00:00\ntags:\n    - swift\n    - existential\n    - protocol\n    - generic\n    - pats\ncategories: advanced swift\n---\n最初看到 **existential** 这个词，是在 [Swift Associated Types, cont.](http://www.russbishop.net/swift-associated-types-cont) 这篇文章中（第一次知道 `typealias Any = protocol<>` 也是在这篇文章），但当时并没有对这个陌生名称留下什么深刻印象。\n\n后来陆陆续续应该也看到过一些，比如 [Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/)。\n\n真正的想要去了解它，是之前写 [PATs](http://blessingsoft.com/2018/08/26/pats/) 的时候，那时候 **existential** 这个词很高频的出现，甚至是和 PATs 息息相关，所以进行了一个初步的了解。\n\n但是呢，只是片面的了解，而没有建立起立体的认识，记忆很快就会开始模糊，直到最后忘记掉。所以才有了这次的 **existential** 认知之旅。\n\n> 注：这篇大多数概念、观点、片段都来自于官方文档或者参考文章，小部分自己的认知理解，并且不保证理解的正确。\n\n## Existential Type\n\n想理解 **existential**，必须要先了解 **existential values**, **existential containers** 和 **witness tables** 的概念。\n\n在类型论中， [existential type](https://en.wikipedia.org/wiki/Type_system#Existential_types) 描述了抽象类型的接口。当对象的类型是 `protocol` 时，就会用到 **existential type**，因为存储或传递一个 `protocol` 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。\n\n一个遵从了特定 `protocol` 的类型一定包含其约定的所有方法，但是这些方法的地址是无法在编译期确定的，因为我们只有在运行时，才能确定这个 `protocol` 对应的真实类型。这和 `non-final class` 引用是类似的（因为可能被 override），因此也使用了 [类似的技术手段](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#method-dispatch) 来解决。`Protocol` 中约定的每一个被实现的方法的地址，都被保存在 **witness table** 中。\n\n### Existential Value\n\n显然的，**existential type** 的值，就是 **existential value**。:P\n\n### Existential Container\n\n```swift\nprotocol Foo {}\nlet foos: [Foo] = ... // What's the memory storage looks like?\n```\n\n简单来说 **existential of a protocol** 就是一个编译器生成的盒子 box，用来存放遵从这个 `protocol` 的值，这个盒子，也叫做 **Existential Container**，盒子里面的东西，就叫做 **witness**。\n\n关于 **existential container** 的内存布局，这些值怎么存储，要分几种情况来说。因为值类型和引用类型的处理方式不一样，值比较小和比较大也可以为了性能用不同的策略。[Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/) 和 [ABIStabilityManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md) 中都有详细的描述。\n\n简单来说就是 5 个字节的大小，前三个连续的字节叫做 *value buffer*，用来存放对象的值或者指针。值类型如果放得下，就直接内联放在 *value buffer* 里面，如果放不下，就在存放在堆上，把指针地址存放在 *value buffer* 里；引用类型直接放指针。\n第四个字节存放 `vwt` (*value witness table*) 指针。\n第五个字节存放 `pwt` (*protocol witness table*) 指针。\n\n对于那些限定了只能是 `class` 实现的 `protocol`，`containers` 中则会忽略 `vwt` 指针（因为对象自身包含指向自己类型信息的指针）以及多余的内连 buffer。并且，这里还有一个特例 `Any`，由于它没有遵从任何 `protocol`，因此 `Any` 对象的 `containers` 中没有 *witness table* 指针。（没错，`Any` 也是一个 **existential** ！即使 Swift 3 之后把 `Any` 当作了 keyword，但估计和之前的 `protocol <>` 差不多的实现，所以依然是 **existential** 。）\n\n### VWT\n\n每一个具体类型（concrete type）都有一张 *value witness table*，用来存放这个类型的有关内存布局和操作它的值的信息。当一个值类型具有不透明布局的时候，因为值编译的时候没办法知道实际类型，所以只能通过查询这个表来知道这些有关信息（metadata）。\n\n### PWT\n\n*Protocol witness table* 是 `protocol` 接口的一张函数表。如果有 associated type，它还会存储 associated type 的 metadata。\n\n> 所以什么是 **existential** 是什么？就是一个 `protocol` 类型的值。\n\n## Protocol\n\n当一个 `protocol` 作为类型而不是具体的类型约束的时候，它就是一个 **existential**。\n\n```swift\nprotocol Foo {}\n\nfunc bar<T: Foo>(_ foo: T) {} // This requires a concrete T that conforms to Foo\nfunc baz(_ foo: Foo) {} // This requires a variable of type Foo (pedantically: \"a Foo existential\")\n\nlet foo: Foo = ... // existential of protocol `Foo`\nbar(foo) // 😢 Protocol type 'Foo' cannot conform to 'Foo' because only concrete types can conform to protocols\nbaz(foo) // 😊\n```\n\n所以当看到 \"a protocol doesn't conform to itself\" 的时候，它实际上是指 \"the existential of a protocol doesn't conform to that protocol\"。 \n\n## Generic\n\n**Existentials** 不是真正的泛型（`generic`），但由于它们相互依赖于 `protocol`，这两个系统紧密地交织在一起。\n\n> While protocols create existential (\"there exists\") types, generics create universal (\"for all\") types. \n\n先回顾一下泛型的一些常见概念：\n\n* 泛型函数 `func swap<T>(_ a: inout T, _ b: inout T)`\n* 类型参数 `<T>`\n* 泛型类型 `Queue<T>`\n* 类型约束 `<T: Protocol, U: Class>`\n* 关联类型 `associatedtype T`\n* 泛型从句 `func foo<T: P, U: P>(_ a: T, _ b: T) where T: Equatable, T.Item == U.Item`\n\n当使用泛型作为类型约束的时候，会涉及到 **existentials**。\n\n```swift\nfunc bar<T: Foo>(_ foo: T) {}\nlet foo: Foo = ...\nbar(foo) // Protocol type 'Foo' cannot conform to 'Foo' because only concrete types can conform to protocols\n```\n\n## PATs\n既然有 **existentials** 了，那为什么还需要 **type eraser** 呢？\n\n先回过头来看看之前在 [PATs](http://blessingsoft.com/2018/08/26/pats/) 中遇到的几个问题。\n\n> Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n\n它的意思是，`Caching`  这个 PATs 没有（无法自动生成）一个 **existential**.\n\n> Using 'Logging' as a concrete type conforming to protocol 'Hashable' is no supported\n\n它的意思是，这个 `Logging` 的 **existential** 没有实现 `Hashable` 这个协议。\n\n为什么无法为 PATs 生成一个 **existential** 呢？实际上是可以的，但它很复杂。它可以通过一种叫做 **generalized existentials** 的技术，生成一个 **implicit existential**。即使这样，它还有很多问题需要解决。\n\n对于 **existential** 的自动生成，首先 **existential** 是运行时的（泛型 `generic` 是编译时的），它是通过在运行时，把 `protocol` 的一些信息存放在 **existential container** 里面。当 `protocol` 里面存在有 *associated types* 或者有 `Self` 约束的时候，它没办法针对任意类型（Any）自动生成填充这个 **existential container**。（Swift 是静态语言，对于泛型需要在编译时就进行泛型特化，**generic specialization**，除非把泛型当作是 `Any` 来处理。还有一种方式就是对 PATs 进行约束，`let strings: Any<Sequence where .Iterator.Element == String> = [\"a\", \"b\", \"c\"]`，也就是 `AnySequence<String>` ）\n\n理解这一点非常重要，可能会有点晕，再来捋一下。首先编译器把存储或者传递的  `protocol` 类型，先替换成 `existential container`（生成代码），然后再编译成目标代码。当编译器发现这个 `protocol` 是 PATs 时，它如果不通过 *generic specialization* 的话，无法生成不带泛型的代码。那为什么说 **existential** 是运行时的呢？因为存储或传递一个 `protocol` 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。\n\n还有一些类型是不适合自动生成 **existential** 的，编译器没法满足有 `init` 和 `static` 的要求。比如 `Decodable` 这样的没有实例方法的协议，**existential** 没有任何意义。\n\n```swift\npublic protocol Decodable {\n    init(from decoder: Decoder) throws\n}\n\nstruct Model: Decodable {\n    let x: String\n}\n\nfunc decode(_ decodable: Decodable) {\n}\nlet decodable: Decodable = Model(x: \"x\")\ndecode(decodable)\n// 上面对代码编译起来没有任何问题，也就是能自动生成 *existential*\n// 但对于 decode(_:) 函数，根本无从下手，因为 Decoder 需要的是一个遵守 Decodable 协议的类型，而不是值。\n\nfunc decode(_ type: Decodable.Type) {\n    let decodable = JSONDecoder().decode(type, from: data)\n    // let decodable = JSONDecoder().decode(Decodable.self, from: data)\n    // Protocol type 'Decodable' cannot conform to 'Decodable' because only concrete types can conform to protocols\n}\n// 最终还是那个 `Protocol type 'Decodable' cannot conform to 'Decodable' because only concrete types can conform to protocols`\n```\n\n其实 **type eraser** 和 **existentials** 这两种是对偶的（ duals ），泛型（ generic ）的 `Any<T>` 等同于 协议（ protocol ）的一种 **explicit existential**。\n\n## Existential in Other Language\n\n### Existential type in Java\n\nJava 泛型中的 **Wildcards** 其实就是一种 existential type，比如 `java.util.List<?>`。\n\n在 Java 中由于有[类型擦除](h) 的存在，泛型的参数类型信息在运行时会丢失，在运行时无法根据已知的类型信息区分 `List[Int]` 和 `List[String]`。\n\n```java\nList foo = new ArrayList();\nfoo.add(\"foo\");\nfoo.get(0); // \"foo\"\n```\n\n当没有给出类型参数的时候，通过使用 existential 来解决。\n\n```java\nList<?>\nList<? extends Number>\nList<? super Integer>\n```\n\n### Existential type in Kotlin\n\nKotlin 中没有 **existential type**。它有一个概念叫着 **The Existential** 的概念。\n\n```kotlin\nabstract class Animal()\nclass Dog()\nclass Bar<T> {\n}\nvar dogBar: Bar<Dog> = Bar()\nvar animalBar: Bar<Animal> = dogBar // 😢\n```\n\n```kotlin\nclass Bar<out T> {\n}\nvar dogBar: Bar<Dog> = Bar()\nvar animalBar: Bar<Animal> = dogBar // 😊\n```\n\n### Existential type in Scala\n\n`ArrayList() == List[]`\n\n```scala\nobject Trait {\n  def foo(seq: Seq[String]): Seq[String]\n  def foo(seq: Seq[Int]): Seq[Int]\n}\n// Error, have the same type after erasure\n\nList[_] // List[T] forSome { type T }\ntrait List[+T]\n```\n\n### Existential type in Rust\n\n `fn foo() -> impl Trait`\n\n核心在于 `impl Trait`，和 Swift 5.1 [Opaque Result Types](https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md) 中的 `func foo() -> some P` 一样。\n\n## Conclusion\n\n**Existential** 是什么？**Existential** 就是 `protocol` 类型的值。这是编译层面相关的概念，平时写代码不需要知道它意味着什么或者是什么，只需要知道它会跟你想象中一样 work 就行了。\n\n## Ref\n\n[Swift Associated Types, cont. - Russ Bishop](http://www.russbishop.net/swift-associated-types-cont)\n[ABIStabilityManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md)\n[GenericsManifesto · GitHub](https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md)\n[Improving the UI of generics - Swift Forums](https://forums.swift.org/t/improving-the-ui-of-generics/22814)\n[Protocols III: Existential Spelling - Cocoaphony](http://robnapier.net/existential-spelling)\n[Existential types - Wikipedia](https://en.wikipedia.org/wiki/Type_system#Existential_types)\n[Understanding Swift Performance - WWDC 2016](https://developer.apple.com/videos/play/wwdc2016/416/)\n[0244-opaque-result-types - GitHub](https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md)","slug":"existential","published":1,"updated":"2022-01-02T11:28:34.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810x800069ithgptq97vn","content":"<p>最初看到 <strong>existential</strong> 这个词，是在 <a href=\"http://www.russbishop.net/swift-associated-types-cont\">Swift Associated Types, cont.</a> 这篇文章中（第一次知道 <code>typealias Any = protocol&lt;&gt;</code> 也是在这篇文章），但当时并没有对这个陌生名称留下什么深刻印象。</p>\n<p>后来陆陆续续应该也看到过一些，比如 <a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a>。</p>\n<p>真正的想要去了解它，是之前写 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a> 的时候，那时候 <strong>existential</strong> 这个词很高频的出现，甚至是和 PATs 息息相关，所以进行了一个初步的了解。</p>\n<p>但是呢，只是片面的了解，而没有建立起立体的认识，记忆很快就会开始模糊，直到最后忘记掉。所以才有了这次的 <strong>existential</strong> 认知之旅。</p>\n<blockquote>\n<p>注：这篇大多数概念、观点、片段都来自于官方文档或者参考文章，小部分自己的认知理解，并且不保证理解的正确。</p>\n</blockquote>\n<h2 id=\"Existential-Type\"><a href=\"#Existential-Type\" class=\"headerlink\" title=\"Existential Type\"></a>Existential Type</h2><p>想理解 <strong>existential</strong>，必须要先了解 <strong>existential values</strong>, <strong>existential containers</strong> 和 <strong>witness tables</strong> 的概念。</p>\n<p>在类型论中， <a href=\"https://en.wikipedia.org/wiki/Type_system#Existential_types\">existential type</a> 描述了抽象类型的接口。当对象的类型是 <code>protocol</code> 时，就会用到 <strong>existential type</strong>，因为存储或传递一个 <code>protocol</code> 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。</p>\n<p>一个遵从了特定 <code>protocol</code> 的类型一定包含其约定的所有方法，但是这些方法的地址是无法在编译期确定的，因为我们只有在运行时，才能确定这个 <code>protocol</code> 对应的真实类型。这和 <code>non-final class</code> 引用是类似的（因为可能被 override），因此也使用了 <a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#method-dispatch\">类似的技术手段</a> 来解决。<code>Protocol</code> 中约定的每一个被实现的方法的地址，都被保存在 <strong>witness table</strong> 中。</p>\n<h3 id=\"Existential-Value\"><a href=\"#Existential-Value\" class=\"headerlink\" title=\"Existential Value\"></a>Existential Value</h3><p>显然的，<strong>existential type</strong> 的值，就是 <strong>existential value</strong>。:P</p>\n<h3 id=\"Existential-Container\"><a href=\"#Existential-Container\" class=\"headerlink\" title=\"Existential Container\"></a>Existential Container</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foos: [<span class=\"type\">Foo</span>] <span class=\"operator\">=</span> <span class=\"operator\">...</span> <span class=\"comment\">// What&#x27;s the memory storage looks like?</span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说 <strong>existential of a protocol</strong> 就是一个编译器生成的盒子 box，用来存放遵从这个 <code>protocol</code> 的值，这个盒子，也叫做 <strong>Existential Container</strong>，盒子里面的东西，就叫做 <strong>witness</strong>。</p>\n<p>关于 <strong>existential container</strong> 的内存布局，这些值怎么存储，要分几种情况来说。因为值类型和引用类型的处理方式不一样，值比较小和比较大也可以为了性能用不同的策略。<a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a> 和 <a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md\">ABIStabilityManifesto · GitHub</a> 中都有详细的描述。</p>\n<p>简单来说就是 5 个字节的大小，前三个连续的字节叫做 <em>value buffer</em>，用来存放对象的值或者指针。值类型如果放得下，就直接内联放在 <em>value buffer</em> 里面，如果放不下，就在存放在堆上，把指针地址存放在 <em>value buffer</em> 里；引用类型直接放指针。<br>第四个字节存放 <code>vwt</code> (<em>value witness table</em>) 指针。<br>第五个字节存放 <code>pwt</code> (<em>protocol witness table</em>) 指针。</p>\n<p>对于那些限定了只能是 <code>class</code> 实现的 <code>protocol</code>，<code>containers</code> 中则会忽略 <code>vwt</code> 指针（因为对象自身包含指向自己类型信息的指针）以及多余的内连 buffer。并且，这里还有一个特例 <code>Any</code>，由于它没有遵从任何 <code>protocol</code>，因此 <code>Any</code> 对象的 <code>containers</code> 中没有 <em>witness table</em> 指针。（没错，<code>Any</code> 也是一个 <strong>existential</strong> ！即使 Swift 3 之后把 <code>Any</code> 当作了 keyword，但估计和之前的 <code>protocol &lt;&gt;</code> 差不多的实现，所以依然是 <strong>existential</strong> 。）</p>\n<h3 id=\"VWT\"><a href=\"#VWT\" class=\"headerlink\" title=\"VWT\"></a>VWT</h3><p>每一个具体类型（concrete type）都有一张 <em>value witness table</em>，用来存放这个类型的有关内存布局和操作它的值的信息。当一个值类型具有不透明布局的时候，因为值编译的时候没办法知道实际类型，所以只能通过查询这个表来知道这些有关信息（metadata）。</p>\n<h3 id=\"PWT\"><a href=\"#PWT\" class=\"headerlink\" title=\"PWT\"></a>PWT</h3><p><em>Protocol witness table</em> 是 <code>protocol</code> 接口的一张函数表。如果有 associated type，它还会存储 associated type 的 metadata。</p>\n<blockquote>\n<p>所以什么是 <strong>existential</strong> 是什么？就是一个 <code>protocol</code> 类型的值。</p>\n</blockquote>\n<h2 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h2><p>当一个 <code>protocol</code> 作为类型而不是具体的类型约束的时候，它就是一个 <strong>existential</strong>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bar</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">Foo</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">T</span>)</span> &#123;&#125; <span class=\"comment\">// This requires a concrete T that conforms to Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">baz</span>(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">Foo</span>)</span> &#123;&#125; <span class=\"comment\">// This requires a variable of type Foo (pedantically: &quot;a Foo existential&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: <span class=\"type\">Foo</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span> <span class=\"comment\">// existential of protocol `Foo`</span></span><br><span class=\"line\">bar(foo) <span class=\"comment\">// 😢 Protocol type &#x27;Foo&#x27; cannot conform to &#x27;Foo&#x27; because only concrete types can conform to protocols</span></span><br><span class=\"line\">baz(foo) <span class=\"comment\">// 😊</span></span><br></pre></td></tr></table></figure>\n\n<p>所以当看到 “a protocol doesn’t conform to itself” 的时候，它实际上是指 “the existential of a protocol doesn’t conform to that protocol”。 </p>\n<h2 id=\"Generic\"><a href=\"#Generic\" class=\"headerlink\" title=\"Generic\"></a>Generic</h2><p><strong>Existentials</strong> 不是真正的泛型（<code>generic</code>），但由于它们相互依赖于 <code>protocol</code>，这两个系统紧密地交织在一起。</p>\n<blockquote>\n<p>While protocols create existential (“there exists”) types, generics create universal (“for all”) types. </p>\n</blockquote>\n<p>先回顾一下泛型的一些常见概念：</p>\n<ul>\n<li>泛型函数 <code>func swap&lt;T&gt;(_ a: inout T, _ b: inout T)</code></li>\n<li>类型参数 <code>&lt;T&gt;</code></li>\n<li>泛型类型 <code>Queue&lt;T&gt;</code></li>\n<li>类型约束 <code>&lt;T: Protocol, U: Class&gt;</code></li>\n<li>关联类型 <code>associatedtype T</code></li>\n<li>泛型从句 <code>func foo&lt;T: P, U: P&gt;(_ a: T, _ b: T) where T: Equatable, T.Item == U.Item</code></li>\n</ul>\n<p>当使用泛型作为类型约束的时候，会涉及到 <strong>existentials</strong>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bar</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">Foo</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">T</span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: <span class=\"type\">Foo</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\">bar(foo) <span class=\"comment\">// Protocol type &#x27;Foo&#x27; cannot conform to &#x27;Foo&#x27; because only concrete types can conform to protocols</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PATs\"><a href=\"#PATs\" class=\"headerlink\" title=\"PATs\"></a>PATs</h2><p>既然有 <strong>existentials</strong> 了，那为什么还需要 <strong>type eraser</strong> 呢？</p>\n<p>先回过头来看看之前在 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a> 中遇到的几个问题。</p>\n<blockquote>\n<p>Protocol ‘Caching’ can only be used as generic constraint because it has Self or associated type requirements</p>\n</blockquote>\n<p>它的意思是，<code>Caching</code>  这个 PATs 没有（无法自动生成）一个 <strong>existential</strong>.</p>\n<blockquote>\n<p>Using ‘Logging’ as a concrete type conforming to protocol ‘Hashable’ is no supported</p>\n</blockquote>\n<p>它的意思是，这个 <code>Logging</code> 的 <strong>existential</strong> 没有实现 <code>Hashable</code> 这个协议。</p>\n<p>为什么无法为 PATs 生成一个 <strong>existential</strong> 呢？实际上是可以的，但它很复杂。它可以通过一种叫做 <strong>generalized existentials</strong> 的技术，生成一个 <strong>implicit existential</strong>。即使这样，它还有很多问题需要解决。</p>\n<p>对于 <strong>existential</strong> 的自动生成，首先 <strong>existential</strong> 是运行时的（泛型 <code>generic</code> 是编译时的），它是通过在运行时，把 <code>protocol</code> 的一些信息存放在 <strong>existential container</strong> 里面。当 <code>protocol</code> 里面存在有 <em>associated types</em> 或者有 <code>Self</code> 约束的时候，它没办法针对任意类型（Any）自动生成填充这个 <strong>existential container</strong>。（Swift 是静态语言，对于泛型需要在编译时就进行泛型特化，<strong>generic specialization</strong>，除非把泛型当作是 <code>Any</code> 来处理。还有一种方式就是对 PATs 进行约束，<code>let strings: Any&lt;Sequence where .Iterator.Element == String&gt; = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>，也就是 <code>AnySequence&lt;String&gt;</code> ）</p>\n<p>理解这一点非常重要，可能会有点晕，再来捋一下。首先编译器把存储或者传递的  <code>protocol</code> 类型，先替换成 <code>existential container</code>（生成代码），然后再编译成目标代码。当编译器发现这个 <code>protocol</code> 是 PATs 时，它如果不通过 <em>generic specialization</em> 的话，无法生成不带泛型的代码。那为什么说 <strong>existential</strong> 是运行时的呢？因为存储或传递一个 <code>protocol</code> 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。</p>\n<p>还有一些类型是不适合自动生成 <strong>existential</strong> 的，编译器没法满足有 <code>init</code> 和 <code>static</code> 的要求。比如 <code>Decodable</code> 这样的没有实例方法的协议，<strong>existential</strong> 没有任何意义。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Model</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decode</span>(<span class=\"keyword\">_</span> <span class=\"params\">decodable</span>: <span class=\"type\">Decodable</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> decodable: <span class=\"type\">Decodable</span> <span class=\"operator\">=</span> <span class=\"type\">Model</span>(x: <span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">decode(decodable)</span><br><span class=\"line\"><span class=\"comment\">// 上面对代码编译起来没有任何问题，也就是能自动生成 *existential*</span></span><br><span class=\"line\"><span class=\"comment\">// 但对于 decode(_:) 函数，根本无从下手，因为 Decoder 需要的是一个遵守 Decodable 协议的类型，而不是值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decode</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>: <span class=\"type\">Decodable</span>.<span class=\"keyword\">Type</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> decodable <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>().decode(type, from: data)</span><br><span class=\"line\">    <span class=\"comment\">// let decodable = JSONDecoder().decode(Decodable.self, from: data)</span></span><br><span class=\"line\">    <span class=\"comment\">// Protocol type &#x27;Decodable&#x27; cannot conform to &#x27;Decodable&#x27; because only concrete types can conform to protocols</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最终还是那个 `Protocol type &#x27;Decodable&#x27; cannot conform to &#x27;Decodable&#x27; because only concrete types can conform to protocols`</span></span><br></pre></td></tr></table></figure>\n\n<p>其实 <strong>type eraser</strong> 和 <strong>existentials</strong> 这两种是对偶的（ duals ），泛型（ generic ）的 <code>Any&lt;T&gt;</code> 等同于 协议（ protocol ）的一种 <strong>explicit existential</strong>。</p>\n<h2 id=\"Existential-in-Other-Language\"><a href=\"#Existential-in-Other-Language\" class=\"headerlink\" title=\"Existential in Other Language\"></a>Existential in Other Language</h2><h3 id=\"Existential-type-in-Java\"><a href=\"#Existential-type-in-Java\" class=\"headerlink\" title=\"Existential type in Java\"></a>Existential type in Java</h3><p>Java 泛型中的 <strong>Wildcards</strong> 其实就是一种 existential type，比如 <code>java.util.List&lt;?&gt;</code>。</p>\n<p>在 Java 中由于有<a href=\"h\">类型擦除</a> 的存在，泛型的参数类型信息在运行时会丢失，在运行时无法根据已知的类型信息区分 <code>List[Int]</code> 和 <code>List[String]</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List foo = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">foo.add(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">foo.get(<span class=\"number\">0</span>); <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当没有给出类型参数的时候，通过使用 existential 来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt;</span><br><span class=\"line\">List&lt;? extends Number&gt;</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">super</span> Integer&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Kotlin\"><a href=\"#Existential-type-in-Kotlin\" class=\"headerlink\" title=\"Existential type in Kotlin\"></a>Existential type in Kotlin</h3><p>Kotlin 中没有 <strong>existential type</strong>。它有一个概念叫着 <strong>The Existential</strong> 的概念。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogBar: Bar&lt;Dog&gt; = Bar()</span><br><span class=\"line\"><span class=\"keyword\">var</span> animalBar: Bar&lt;Animal&gt; = dogBar <span class=\"comment\">// 😢</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogBar: Bar&lt;Dog&gt; = Bar()</span><br><span class=\"line\"><span class=\"keyword\">var</span> animalBar: Bar&lt;Animal&gt; = dogBar <span class=\"comment\">// 😊</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Scala\"><a href=\"#Existential-type-in-Scala\" class=\"headerlink\" title=\"Existential type in Scala\"></a>Existential type in Scala</h3><p><code>ArrayList() == List[]</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Trait</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span>(seq: <span class=\"type\">Seq</span>[<span class=\"type\">String</span>]): <span class=\"type\">Seq</span>[<span class=\"type\">String</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span>(seq: <span class=\"type\">Seq</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Seq</span>[<span class=\"type\">Int</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Error, have the same type after erasure</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">List</span>[_] <span class=\"comment\">// List[T] forSome &#123; type T &#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[+<span class=\"type\">T</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Rust\"><a href=\"#Existential-type-in-Rust\" class=\"headerlink\" title=\"Existential type in Rust\"></a>Existential type in Rust</h3><p> <code>fn foo() -&gt; impl Trait</code></p>\n<p>核心在于 <code>impl Trait</code>，和 Swift 5.1 <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md\">Opaque Result Types</a> 中的 <code>func foo() -&gt; some P</code> 一样。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p><strong>Existential</strong> 是什么？<strong>Existential</strong> 就是 <code>protocol</code> 类型的值。这是编译层面相关的概念，平时写代码不需要知道它意味着什么或者是什么，只需要知道它会跟你想象中一样 work 就行了。</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"http://www.russbishop.net/swift-associated-types-cont\">Swift Associated Types, cont. - Russ Bishop</a><br><a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md\">ABIStabilityManifesto · GitHub</a><br><a href=\"https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md\">GenericsManifesto · GitHub</a><br><a href=\"https://forums.swift.org/t/improving-the-ui-of-generics/22814\">Improving the UI of generics - Swift Forums</a><br><a href=\"http://robnapier.net/existential-spelling\">Protocols III: Existential Spelling - Cocoaphony</a><br><a href=\"https://en.wikipedia.org/wiki/Type_system#Existential_types\">Existential types - Wikipedia</a><br><a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a><br><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md\">0244-opaque-result-types - GitHub</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最初看到 <strong>existential</strong> 这个词，是在 <a href=\"http://www.russbishop.net/swift-associated-types-cont\">Swift Associated Types, cont.</a> 这篇文章中（第一次知道 <code>typealias Any = protocol&lt;&gt;</code> 也是在这篇文章），但当时并没有对这个陌生名称留下什么深刻印象。</p>\n<p>后来陆陆续续应该也看到过一些，比如 <a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a>。</p>\n<p>真正的想要去了解它，是之前写 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a> 的时候，那时候 <strong>existential</strong> 这个词很高频的出现，甚至是和 PATs 息息相关，所以进行了一个初步的了解。</p>\n<p>但是呢，只是片面的了解，而没有建立起立体的认识，记忆很快就会开始模糊，直到最后忘记掉。所以才有了这次的 <strong>existential</strong> 认知之旅。</p>\n<blockquote>\n<p>注：这篇大多数概念、观点、片段都来自于官方文档或者参考文章，小部分自己的认知理解，并且不保证理解的正确。</p>\n</blockquote>\n<h2 id=\"Existential-Type\"><a href=\"#Existential-Type\" class=\"headerlink\" title=\"Existential Type\"></a>Existential Type</h2><p>想理解 <strong>existential</strong>，必须要先了解 <strong>existential values</strong>, <strong>existential containers</strong> 和 <strong>witness tables</strong> 的概念。</p>\n<p>在类型论中， <a href=\"https://en.wikipedia.org/wiki/Type_system#Existential_types\">existential type</a> 描述了抽象类型的接口。当对象的类型是 <code>protocol</code> 时，就会用到 <strong>existential type</strong>，因为存储或传递一个 <code>protocol</code> 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。</p>\n<p>一个遵从了特定 <code>protocol</code> 的类型一定包含其约定的所有方法，但是这些方法的地址是无法在编译期确定的，因为我们只有在运行时，才能确定这个 <code>protocol</code> 对应的真实类型。这和 <code>non-final class</code> 引用是类似的（因为可能被 override），因此也使用了 <a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#method-dispatch\">类似的技术手段</a> 来解决。<code>Protocol</code> 中约定的每一个被实现的方法的地址，都被保存在 <strong>witness table</strong> 中。</p>\n<h3 id=\"Existential-Value\"><a href=\"#Existential-Value\" class=\"headerlink\" title=\"Existential Value\"></a>Existential Value</h3><p>显然的，<strong>existential type</strong> 的值，就是 <strong>existential value</strong>。:P</p>\n<h3 id=\"Existential-Container\"><a href=\"#Existential-Container\" class=\"headerlink\" title=\"Existential Container\"></a>Existential Container</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foos: [<span class=\"type\">Foo</span>] <span class=\"operator\">=</span> <span class=\"operator\">...</span> <span class=\"comment\">// What&#x27;s the memory storage looks like?</span></span><br></pre></td></tr></table></figure>\n\n<p>简单来说 <strong>existential of a protocol</strong> 就是一个编译器生成的盒子 box，用来存放遵从这个 <code>protocol</code> 的值，这个盒子，也叫做 <strong>Existential Container</strong>，盒子里面的东西，就叫做 <strong>witness</strong>。</p>\n<p>关于 <strong>existential container</strong> 的内存布局，这些值怎么存储，要分几种情况来说。因为值类型和引用类型的处理方式不一样，值比较小和比较大也可以为了性能用不同的策略。<a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a> 和 <a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md\">ABIStabilityManifesto · GitHub</a> 中都有详细的描述。</p>\n<p>简单来说就是 5 个字节的大小，前三个连续的字节叫做 <em>value buffer</em>，用来存放对象的值或者指针。值类型如果放得下，就直接内联放在 <em>value buffer</em> 里面，如果放不下，就在存放在堆上，把指针地址存放在 <em>value buffer</em> 里；引用类型直接放指针。<br>第四个字节存放 <code>vwt</code> (<em>value witness table</em>) 指针。<br>第五个字节存放 <code>pwt</code> (<em>protocol witness table</em>) 指针。</p>\n<p>对于那些限定了只能是 <code>class</code> 实现的 <code>protocol</code>，<code>containers</code> 中则会忽略 <code>vwt</code> 指针（因为对象自身包含指向自己类型信息的指针）以及多余的内连 buffer。并且，这里还有一个特例 <code>Any</code>，由于它没有遵从任何 <code>protocol</code>，因此 <code>Any</code> 对象的 <code>containers</code> 中没有 <em>witness table</em> 指针。（没错，<code>Any</code> 也是一个 <strong>existential</strong> ！即使 Swift 3 之后把 <code>Any</code> 当作了 keyword，但估计和之前的 <code>protocol &lt;&gt;</code> 差不多的实现，所以依然是 <strong>existential</strong> 。）</p>\n<h3 id=\"VWT\"><a href=\"#VWT\" class=\"headerlink\" title=\"VWT\"></a>VWT</h3><p>每一个具体类型（concrete type）都有一张 <em>value witness table</em>，用来存放这个类型的有关内存布局和操作它的值的信息。当一个值类型具有不透明布局的时候，因为值编译的时候没办法知道实际类型，所以只能通过查询这个表来知道这些有关信息（metadata）。</p>\n<h3 id=\"PWT\"><a href=\"#PWT\" class=\"headerlink\" title=\"PWT\"></a>PWT</h3><p><em>Protocol witness table</em> 是 <code>protocol</code> 接口的一张函数表。如果有 associated type，它还会存储 associated type 的 metadata。</p>\n<blockquote>\n<p>所以什么是 <strong>existential</strong> 是什么？就是一个 <code>protocol</code> 类型的值。</p>\n</blockquote>\n<h2 id=\"Protocol\"><a href=\"#Protocol\" class=\"headerlink\" title=\"Protocol\"></a>Protocol</h2><p>当一个 <code>protocol</code> 作为类型而不是具体的类型约束的时候，它就是一个 <strong>existential</strong>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Foo</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bar</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">Foo</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">T</span>)</span> &#123;&#125; <span class=\"comment\">// This requires a concrete T that conforms to Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">baz</span>(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">Foo</span>)</span> &#123;&#125; <span class=\"comment\">// This requires a variable of type Foo (pedantically: &quot;a Foo existential&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: <span class=\"type\">Foo</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span> <span class=\"comment\">// existential of protocol `Foo`</span></span><br><span class=\"line\">bar(foo) <span class=\"comment\">// 😢 Protocol type &#x27;Foo&#x27; cannot conform to &#x27;Foo&#x27; because only concrete types can conform to protocols</span></span><br><span class=\"line\">baz(foo) <span class=\"comment\">// 😊</span></span><br></pre></td></tr></table></figure>\n\n<p>所以当看到 “a protocol doesn’t conform to itself” 的时候，它实际上是指 “the existential of a protocol doesn’t conform to that protocol”。 </p>\n<h2 id=\"Generic\"><a href=\"#Generic\" class=\"headerlink\" title=\"Generic\"></a>Generic</h2><p><strong>Existentials</strong> 不是真正的泛型（<code>generic</code>），但由于它们相互依赖于 <code>protocol</code>，这两个系统紧密地交织在一起。</p>\n<blockquote>\n<p>While protocols create existential (“there exists”) types, generics create universal (“for all”) types. </p>\n</blockquote>\n<p>先回顾一下泛型的一些常见概念：</p>\n<ul>\n<li>泛型函数 <code>func swap&lt;T&gt;(_ a: inout T, _ b: inout T)</code></li>\n<li>类型参数 <code>&lt;T&gt;</code></li>\n<li>泛型类型 <code>Queue&lt;T&gt;</code></li>\n<li>类型约束 <code>&lt;T: Protocol, U: Class&gt;</code></li>\n<li>关联类型 <code>associatedtype T</code></li>\n<li>泛型从句 <code>func foo&lt;T: P, U: P&gt;(_ a: T, _ b: T) where T: Equatable, T.Item == U.Item</code></li>\n</ul>\n<p>当使用泛型作为类型约束的时候，会涉及到 <strong>existentials</strong>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bar</span>&lt;<span class=\"type\">T</span>: <span class=\"type\">Foo</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">foo</span>: <span class=\"type\">T</span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo: <span class=\"type\">Foo</span> <span class=\"operator\">=</span> <span class=\"operator\">...</span></span><br><span class=\"line\">bar(foo) <span class=\"comment\">// Protocol type &#x27;Foo&#x27; cannot conform to &#x27;Foo&#x27; because only concrete types can conform to protocols</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PATs\"><a href=\"#PATs\" class=\"headerlink\" title=\"PATs\"></a>PATs</h2><p>既然有 <strong>existentials</strong> 了，那为什么还需要 <strong>type eraser</strong> 呢？</p>\n<p>先回过头来看看之前在 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a> 中遇到的几个问题。</p>\n<blockquote>\n<p>Protocol ‘Caching’ can only be used as generic constraint because it has Self or associated type requirements</p>\n</blockquote>\n<p>它的意思是，<code>Caching</code>  这个 PATs 没有（无法自动生成）一个 <strong>existential</strong>.</p>\n<blockquote>\n<p>Using ‘Logging’ as a concrete type conforming to protocol ‘Hashable’ is no supported</p>\n</blockquote>\n<p>它的意思是，这个 <code>Logging</code> 的 <strong>existential</strong> 没有实现 <code>Hashable</code> 这个协议。</p>\n<p>为什么无法为 PATs 生成一个 <strong>existential</strong> 呢？实际上是可以的，但它很复杂。它可以通过一种叫做 <strong>generalized existentials</strong> 的技术，生成一个 <strong>implicit existential</strong>。即使这样，它还有很多问题需要解决。</p>\n<p>对于 <strong>existential</strong> 的自动生成，首先 <strong>existential</strong> 是运行时的（泛型 <code>generic</code> 是编译时的），它是通过在运行时，把 <code>protocol</code> 的一些信息存放在 <strong>existential container</strong> 里面。当 <code>protocol</code> 里面存在有 <em>associated types</em> 或者有 <code>Self</code> 约束的时候，它没办法针对任意类型（Any）自动生成填充这个 <strong>existential container</strong>。（Swift 是静态语言，对于泛型需要在编译时就进行泛型特化，<strong>generic specialization</strong>，除非把泛型当作是 <code>Any</code> 来处理。还有一种方式就是对 PATs 进行约束，<code>let strings: Any&lt;Sequence where .Iterator.Element == String&gt; = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>，也就是 <code>AnySequence&lt;String&gt;</code> ）</p>\n<p>理解这一点非常重要，可能会有点晕，再来捋一下。首先编译器把存储或者传递的  <code>protocol</code> 类型，先替换成 <code>existential container</code>（生成代码），然后再编译成目标代码。当编译器发现这个 <code>protocol</code> 是 PATs 时，它如果不通过 <em>generic specialization</em> 的话，无法生成不带泛型的代码。那为什么说 <strong>existential</strong> 是运行时的呢？因为存储或传递一个 <code>protocol</code> 类型的对象意味着对象在运行时的真实类型是不透明的（也就是编译期不可知的，因此我们也无法确定这类对象的布局）。</p>\n<p>还有一些类型是不适合自动生成 <strong>existential</strong> 的，编译器没法满足有 <code>init</code> 和 <code>static</code> 的要求。比如 <code>Decodable</code> 这样的没有实例方法的协议，<strong>existential</strong> 没有任何意义。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Model</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decode</span>(<span class=\"keyword\">_</span> <span class=\"params\">decodable</span>: <span class=\"type\">Decodable</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> decodable: <span class=\"type\">Decodable</span> <span class=\"operator\">=</span> <span class=\"type\">Model</span>(x: <span class=\"string\">&quot;x&quot;</span>)</span><br><span class=\"line\">decode(decodable)</span><br><span class=\"line\"><span class=\"comment\">// 上面对代码编译起来没有任何问题，也就是能自动生成 *existential*</span></span><br><span class=\"line\"><span class=\"comment\">// 但对于 decode(_:) 函数，根本无从下手，因为 Decoder 需要的是一个遵守 Decodable 协议的类型，而不是值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decode</span>(<span class=\"keyword\">_</span> <span class=\"params\">type</span>: <span class=\"type\">Decodable</span>.<span class=\"keyword\">Type</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> decodable <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>().decode(type, from: data)</span><br><span class=\"line\">    <span class=\"comment\">// let decodable = JSONDecoder().decode(Decodable.self, from: data)</span></span><br><span class=\"line\">    <span class=\"comment\">// Protocol type &#x27;Decodable&#x27; cannot conform to &#x27;Decodable&#x27; because only concrete types can conform to protocols</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最终还是那个 `Protocol type &#x27;Decodable&#x27; cannot conform to &#x27;Decodable&#x27; because only concrete types can conform to protocols`</span></span><br></pre></td></tr></table></figure>\n\n<p>其实 <strong>type eraser</strong> 和 <strong>existentials</strong> 这两种是对偶的（ duals ），泛型（ generic ）的 <code>Any&lt;T&gt;</code> 等同于 协议（ protocol ）的一种 <strong>explicit existential</strong>。</p>\n<h2 id=\"Existential-in-Other-Language\"><a href=\"#Existential-in-Other-Language\" class=\"headerlink\" title=\"Existential in Other Language\"></a>Existential in Other Language</h2><h3 id=\"Existential-type-in-Java\"><a href=\"#Existential-type-in-Java\" class=\"headerlink\" title=\"Existential type in Java\"></a>Existential type in Java</h3><p>Java 泛型中的 <strong>Wildcards</strong> 其实就是一种 existential type，比如 <code>java.util.List&lt;?&gt;</code>。</p>\n<p>在 Java 中由于有<a href=\"h\">类型擦除</a> 的存在，泛型的参数类型信息在运行时会丢失，在运行时无法根据已知的类型信息区分 <code>List[Int]</code> 和 <code>List[String]</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List foo = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">foo.add(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">foo.get(<span class=\"number\">0</span>); <span class=\"comment\">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当没有给出类型参数的时候，通过使用 existential 来解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;?&gt;</span><br><span class=\"line\">List&lt;? extends Number&gt;</span><br><span class=\"line\">List&lt;? <span class=\"keyword\">super</span> Integer&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Kotlin\"><a href=\"#Existential-type-in-Kotlin\" class=\"headerlink\" title=\"Existential type in Kotlin\"></a>Existential type in Kotlin</h3><p>Kotlin 中没有 <strong>existential type</strong>。它有一个概念叫着 <strong>The Existential</strong> 的概念。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>&lt;<span class=\"type\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogBar: Bar&lt;Dog&gt; = Bar()</span><br><span class=\"line\"><span class=\"keyword\">var</span> animalBar: Bar&lt;Animal&gt; = dogBar <span class=\"comment\">// 😢</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>&lt;<span class=\"type\">out T</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dogBar: Bar&lt;Dog&gt; = Bar()</span><br><span class=\"line\"><span class=\"keyword\">var</span> animalBar: Bar&lt;Animal&gt; = dogBar <span class=\"comment\">// 😊</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Scala\"><a href=\"#Existential-type-in-Scala\" class=\"headerlink\" title=\"Existential type in Scala\"></a>Existential type in Scala</h3><p><code>ArrayList() == List[]</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Trait</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span>(seq: <span class=\"type\">Seq</span>[<span class=\"type\">String</span>]): <span class=\"type\">Seq</span>[<span class=\"type\">String</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span></span>(seq: <span class=\"type\">Seq</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Seq</span>[<span class=\"type\">Int</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Error, have the same type after erasure</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">List</span>[_] <span class=\"comment\">// List[T] forSome &#123; type T &#125;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">List</span>[+<span class=\"type\">T</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Existential-type-in-Rust\"><a href=\"#Existential-type-in-Rust\" class=\"headerlink\" title=\"Existential type in Rust\"></a>Existential type in Rust</h3><p> <code>fn foo() -&gt; impl Trait</code></p>\n<p>核心在于 <code>impl Trait</code>，和 Swift 5.1 <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md\">Opaque Result Types</a> 中的 <code>func foo() -&gt; some P</code> 一样。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p><strong>Existential</strong> 是什么？<strong>Existential</strong> 就是 <code>protocol</code> 类型的值。这是编译层面相关的概念，平时写代码不需要知道它意味着什么或者是什么，只需要知道它会跟你想象中一样 work 就行了。</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"http://www.russbishop.net/swift-associated-types-cont\">Swift Associated Types, cont. - Russ Bishop</a><br><a href=\"https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md\">ABIStabilityManifesto · GitHub</a><br><a href=\"https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md\">GenericsManifesto · GitHub</a><br><a href=\"https://forums.swift.org/t/improving-the-ui-of-generics/22814\">Improving the UI of generics - Swift Forums</a><br><a href=\"http://robnapier.net/existential-spelling\">Protocols III: Existential Spelling - Cocoaphony</a><br><a href=\"https://en.wikipedia.org/wiki/Type_system#Existential_types\">Existential types - Wikipedia</a><br><a href=\"https://developer.apple.com/videos/play/wwdc2016/416/\">Understanding Swift Performance - WWDC 2016</a><br><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md\">0244-opaque-result-types - GitHub</a></p>\n"},{"title":"Cherry Blessing","date":"2017-05-20T12:00:00.000Z","_content":"Welcome to Cherry Blessing.\n\n\n","source":"_posts/cherry-blessing.md","raw":"---\ntitle: Cherry Blessing\ndate: 2017-05-20 20:00:00\n---\nWelcome to Cherry Blessing.\n\n\n","slug":"cherry-blessing","published":1,"updated":"2022-01-02T11:26:09.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810x900079ith425v0gmn","content":"<p>Welcome to Cherry Blessing.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to Cherry Blessing.</p>\n"},{"title":"How to design a lightweight Logging System","date":"2018-08-26T12:00:00.000Z","_content":"> 之前项目一直都是使用 [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) 来定制 Log 系统，这次整个工程使用 Pure-Swift 来开发，而且作为一个初创项目，对于 Log 系统的需求并没有那么高，虽然 [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) 在 Swift 项目中直接使用也比较友好，但是感觉还是 ~~太重了~~ 。所以为何不直接设计一个比较轻量级的日志系统呢？\n\n## Logging System\n\n在 iOS 中，可以用 Swift 中的 `print()` 和 `debugPrint()` 函数来向 Xcode Console 来打印信息，也可以使用 Foundation 中的 `NSLog()` 来打印，更新的就是 [os_log](https://developer.apple.com/documentation/os/logging) 了。这三种不同的方式有不同的特点。\n\n* **print**/**debugPrint**: Swift 语言层面提供的实现，可以输出到 Xcode Console，但不能输出到 Apple System Logs（Mac Console.app）。\n* **NSLog**: Foundation 中的实现，除了能在 Xcode Console 中输出外，还会往 Console.app 发，并且有较大的性能损害。\n* **os_log**: 待补充 [Unified Logging and Activity Tracing - WWDC 2016 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2016/721/) [Measuring Performance Using Logging - WWDC 2018 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2018/405/)\n\nXcode Console 和 Apple System Logs 都是需要物理接触设备才能看到 log。但是在项目中，如果想要看到线上用户的 log 信息，必须要把这些 log 写到本地文件中，或者实时/定时发到远端服务器上。这时候直接使用内置的 API 是无法满足需求的。\n\n对于一个相对比较合理的日志系统，一般有几点要求：\n\n* 在 release 下禁止输出日志到 Xcode Console\n* ~~在 release 下~~ 禁止输出日志到 Apple System Logs\n* 提供输出日志到本地文件中的能力\n* 能够方便的扩展，如直接输出到 Web\n* 对于日志根据重要性划分为不同的等级\n* 可以根据日志等级，过滤日志\n\n## Design\n\n### Level\n\nLevel 有两个作用：\n\n* 定义一条日志的重要性\n* 对日志进行过滤，比如过滤掉某个等级以下的日志（实际是有包含的关系\n\n这里通过两个类型来实现 level 的作用。\n\n```swift\npublic enum Level: Int {\n    case off = 0\n    case error = 1 // Flag.error | Level.off\n    case warning = 3 // Flag.warning | Level.error\n    case info = 7 // Flag.info | Level.warning\n    case debug = 15 // Flag.debug | Level.info\n}\n\npublic struct Flag: OptionSet {\n    public let rawValue: Int\n\n    public static let error = Flag(rawValue: 1 << 0) // 1\n    public static let warning = Flag(rawValue: 1 << 1) // 2\n    public static let info = Flag(rawValue: 1 << 2) // 4\n    public static let debug = Flag(rawValue: 1 << 3) // 8\n\n    public init(rawValue: Int) {\n        self.rawValue = rawValue\n    }\n}\n```\n\n### Message & Formatter\n\n一条日志如果只有正文部分，很难帮助定位具体的位置和发生的时间点，所以一条更加有意义的日志，会带上所在的文件、函数、行数以及时间戳等信息。\n\n首先定义一个 `Message` 的数据结构来定义一条日志，这些信息最终具体如何 format 成一条字符串，需要提供一个 `Formatter` 来实现。\n\n既然是 Pure-Swift，所以这里 `Message` 使用 `struct` （Value Type），而不是 `class` （Reference Type）。（`Codable`, `CustomStringConvertible`, `Equatable` 什么的暂时不需要考虑。\n\n对于 `Formatter`，可能不同的 logger 需要不同的 format，比如输出到本地文件的 logger 需要更详细的信息，比如时间戳，才好帮助日后还原 app 当时运行的情况，而输出到 Xcode Console 的日志一般是在开发的时候看的，所以时间戳可能就没那么重要。（为什么 `Formatter` 使用 `protocol`？可以先想想，后面再解释。\n\n```swift\npublic struct Message {\n\n    public let message: String\n\n    public let level: Level\n\n    public let flag: Flag\n\n    public let context: Int\n\n    public let file: String\n\n    public let function: StaticString\n\n    public let line: UInt\n\n    public let timestamp: Date\n}\n\npublic protocol Formatter {\n    func format(message: Message) -> String\n}\n```\n\n### Logging\n\n根据日志输出的目标不同，可以划分为不同类型的 logger，比如 `ConsoleLogger`、`FileLogger` 以及 `WebLogger` 等。每一种不同的 logger 都有一些同样的接口，所以第一反应有两种不同的方式来实现类型的划分以及相同接口（行为）的约束。\n\n使用面向对象的思想，通过继承来实现。\n\n```swift\nopen class Logging {\n    public enum Type {\n        case console\n        case file\n        case web\n    }\n\n    open var type: Type {\n        return .console\n    }\n    \n    open func log(_ message: String) {\n        fatalError(\"must override this method in subclass.\")\n    }\n}\n\nopen class ConsoleLogger: Logging {\n    override open var type: Type {\n        return .console\n    }\n    override open func log(_ message: String) {\n        //\n    }\n}\nopen class FileLogger: Logging {\n    override open var type: Type {\n        return .file\n    }\n    override open func log(_ message: String) {\n        //\n    }\n}\n```\n\n使用面向协议的思想，通过协议来约束行为。\n\n```swift\nprotocol Logging {\n    var type: Type { get }\n\n    func log(_ message: String)\n}\n\nstruct ConsoleLogger: Logging {\n    var type: Type {\n        return .console\n    }\n\n    func log(_ message: String) {\n        //\n    }\n}\n\nstruct FileLogger: Logging {\n    var type: Type {\n        return .file\n    }\n\n    func log(_ message: String) {\n        //\n    }\n}\n```\n\n两种不同的实现，体现的是两种不同的思想：\n* 一种是使用面向对象的思想，通过一个基类来提供相同的接口，然后子类重写这些接口来提供不同的能力；\n* 另一种是使用面向协议的思想，通过一个协议来对接口进行约束，每一个具体的实现都必须实现这些接口来提供不同都能力。\n\n而对于不同类型的 logger 都共有的行为，前一种方式可以直接在基类中实现，后一种方式可以通过 `protocol extension` 来提供默认实现。\n\n两种方式各有优缺点，如果你也不喜欢前一种 **需要运行时才能知道子类必须重写父类的某个方法**，完全不能体现出 Swift 作为一门有着强大类型安全的静态语言的优势，那么这里毫不犹豫的选择后一种方式。（不解释\n\n对于这里的 `Type`，虽然使用 `enum` 有着很好的强类型信息，但这样写有着很大的约束，就是一开始就必须定义好所有的 Type，对于扩展性来说，非常不友好。\n\n所以综合可扩展性和 `Type` 的作用考虑，这里通过添加一个 `String` 类型的属性 `name` 来简单的区分。（很方便于 debug\n\n### Interface\n\n最终得到一整个 Logging 相关的接口定义：\n\n```swift\npublic protocol Logging {\n\n    var formatter: Formatter { get }\n\n    var name: String { get }\n\n    var level: Level { get }\n\n    func log(message: Message)\n\n    func flush()\n\n    func start()\n\n    func teardown()\n}\n\npublic extension Logging {\n\n    var name: String {\n        return \"Unified\"\n    }\n\n    func flush() {}\n\n    func start() {}\n\n    func teardown() {}\n}\n```\n\n### Logger\n\n前面定义了每个不同 `logger` 的接口（行为），但是使用的时候，如果需要手动调用每个 `logger` 的 `log(message:)` 方法，那就太没有意义了。所以需要一个数据结构，来管理所有的 `logger`，并且将消息转发到每一个 `logger`。\n\n```swift\npublic class Logger {\n    public static let shared = Logger()\n\n    private var queue = DispatchQueue(label: \"com.xspyhack.logger.queue\")\n\n    public private(set) var loggers: Set<AnyLogger> = []\n\n    deinit {\n        loggers.forEach {\n            $0.teardown()\n        }\n\n        loggers = []\n    }\n}\n\npublic extension Logger {\n   public func add(_ logger: Logging) {\n        loggers.update(with: logger)\n    }\n}\n\npublic extension Logger {\n    public func log(message: Message, asynchronous: Bool) {\n        let work = DispatchWorkItem {\n            self.loggers.forEach { logger in\n                guard message.flag.rawValue & logger.level.rawValue != 0 else {\n                    return\n                }\n                logger.log(message: message)\n            }\n        }\n\n        if asynchronous {\n            queue.async(execute: work)\n        } else {\n            queue.sync(execute: work)\n        }\n    }\n\n    public func start() {\n        loggers.forEach {\n            $0.start()\n        }\n    }\n\n    public func flush() {\n        let work = DispatchWorkItem {\n            self.loggers.forEach { logger in\n                logger.flush()\n            }\n        }\n\n        queue.sync(execute: work)\n    }\n}\n```\n\n这里只是比较粗糙的实现，很多细节还没有处理，比如 `loggers` 的线程安全问题、以及 `logger` 的删除等等。\n\n### Log\n\n有了 `Logging` 来定义每一种不同作用的 `logger`，以及一个管理所有 `logger` 的管理器 `Logger`（至于这个让人懵逼的命名，实际是因为懒，取一个别的名字比较适合，比如 ~~Charmander~~），还需要考虑最终如何简单的使用这个 Logging System。\n\n现在如果要使用这个系统，首先需要实现自己的多种 `loggers` 和对应的 `Formatter`，然后添加到 `Logger` 里面，然后在需要打 log 的地方，初始化 一个 `Message`，调用 `Logger.shared.log(message:)` 方法。\n\n这里每次初始化一个 `Message` 太麻烦了。如何简化？默认参数啊。\n\n```swift\npublic static func log(_ message: @autoclosure () -> String, level: Level, flag: Flag, context: Int = 0, file: String = #file, function: StaticString = #function, line: UInt = #line, asynchronous: Bool = false) {\n\n    let message = Message(message: message(), level: level, flag: flag, context: context, file: file, function: function, line: line, timestamp: Date())\n\n    Logger.shared.log(message: message, asynchronous: asynchronous)\n}\n```\n\n对于 `level` 和 `flag` 如果能提供默认参数，那么在调用的时候，就可以像 `print` 一样，直接只关注要 log 的内容就好了。一个比较简单直接的方法，就是针对这几种 `level` 暴露多个方法。\n\n```swift\nLog.d(\"This is a debug level log\")\nLog.i(\"This is an info level log\")\nLog.w(\"This is a warning level log\")\nLog.e(\"This is an error level log\")\n```\n\n> 一个思考，上面的 `log` 函数中参数 message 的类型为什么使用 `@autoclosure`？\n\n> 第二个思考，`Swift.print` 函数的定义你知道吗？\n\n## Implementation\n\n[GitHub - xspyhack/Keldeo: A lightweight logging library written in Swift.](https://github.com/xspyhack/Keldeo)\n\n### Why AnyLogger\n\n对于引入 `AnyLogger`，是因为我希望能够提供移除一个 `logger` 的能力，用处就是当我在脱离 Xcode 的时候，可以通过一种可以输出到浏览器的 `logger` 来实时看到日志输出。而这个名为 `WebLogger` 的 `logger` 平时并不会用到，所以它是需要的时候才添加进去，用完之后便移除，所以就涉及到 `logger` 必须实现 `Equatable`，实现从 `loggers` 里面移除它。\n\n> Why `protocol Logging: Equatable {}` needs `AnyLogger`？见另一篇 [PATs](http://blessingsoft.com/2018/08/26/pats/)\n\n## Ref\n\n* [GitHub - CocoaLumberjack/CocoaLumberjack: A fast & simple, yet powerful & flexible logging framework for Mac and iOS](https://github.com/CocoaLumberjack/CocoaLumberjack)\n* [Kingfisher/ImageCache.swift at master · onevcat/Kingfisher · GitHub](https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift)\n* [swift/AnyHashable.swift at swift-3.0-branch · apple/swift · GitHub](https://github.com/apple/swift/blob/swift-3.0-branch/stdlib/public/core/AnyHashable.swift)\n\n\n\n","source":"_posts/logging-system.md","raw":"---\ntitle: How to design a lightweight Logging System\ndate: 2018-08-26 20:00:00\ntags:\n    - swift\n    - logger\n    - logging\ncategories: advanced swift\n---\n> 之前项目一直都是使用 [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) 来定制 Log 系统，这次整个工程使用 Pure-Swift 来开发，而且作为一个初创项目，对于 Log 系统的需求并没有那么高，虽然 [CocoaLumberjack](https://github.com/CocoaLumberjack/CocoaLumberjack) 在 Swift 项目中直接使用也比较友好，但是感觉还是 ~~太重了~~ 。所以为何不直接设计一个比较轻量级的日志系统呢？\n\n## Logging System\n\n在 iOS 中，可以用 Swift 中的 `print()` 和 `debugPrint()` 函数来向 Xcode Console 来打印信息，也可以使用 Foundation 中的 `NSLog()` 来打印，更新的就是 [os_log](https://developer.apple.com/documentation/os/logging) 了。这三种不同的方式有不同的特点。\n\n* **print**/**debugPrint**: Swift 语言层面提供的实现，可以输出到 Xcode Console，但不能输出到 Apple System Logs（Mac Console.app）。\n* **NSLog**: Foundation 中的实现，除了能在 Xcode Console 中输出外，还会往 Console.app 发，并且有较大的性能损害。\n* **os_log**: 待补充 [Unified Logging and Activity Tracing - WWDC 2016 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2016/721/) [Measuring Performance Using Logging - WWDC 2018 - Videos - Apple Developer](https://developer.apple.com/videos/play/wwdc2018/405/)\n\nXcode Console 和 Apple System Logs 都是需要物理接触设备才能看到 log。但是在项目中，如果想要看到线上用户的 log 信息，必须要把这些 log 写到本地文件中，或者实时/定时发到远端服务器上。这时候直接使用内置的 API 是无法满足需求的。\n\n对于一个相对比较合理的日志系统，一般有几点要求：\n\n* 在 release 下禁止输出日志到 Xcode Console\n* ~~在 release 下~~ 禁止输出日志到 Apple System Logs\n* 提供输出日志到本地文件中的能力\n* 能够方便的扩展，如直接输出到 Web\n* 对于日志根据重要性划分为不同的等级\n* 可以根据日志等级，过滤日志\n\n## Design\n\n### Level\n\nLevel 有两个作用：\n\n* 定义一条日志的重要性\n* 对日志进行过滤，比如过滤掉某个等级以下的日志（实际是有包含的关系\n\n这里通过两个类型来实现 level 的作用。\n\n```swift\npublic enum Level: Int {\n    case off = 0\n    case error = 1 // Flag.error | Level.off\n    case warning = 3 // Flag.warning | Level.error\n    case info = 7 // Flag.info | Level.warning\n    case debug = 15 // Flag.debug | Level.info\n}\n\npublic struct Flag: OptionSet {\n    public let rawValue: Int\n\n    public static let error = Flag(rawValue: 1 << 0) // 1\n    public static let warning = Flag(rawValue: 1 << 1) // 2\n    public static let info = Flag(rawValue: 1 << 2) // 4\n    public static let debug = Flag(rawValue: 1 << 3) // 8\n\n    public init(rawValue: Int) {\n        self.rawValue = rawValue\n    }\n}\n```\n\n### Message & Formatter\n\n一条日志如果只有正文部分，很难帮助定位具体的位置和发生的时间点，所以一条更加有意义的日志，会带上所在的文件、函数、行数以及时间戳等信息。\n\n首先定义一个 `Message` 的数据结构来定义一条日志，这些信息最终具体如何 format 成一条字符串，需要提供一个 `Formatter` 来实现。\n\n既然是 Pure-Swift，所以这里 `Message` 使用 `struct` （Value Type），而不是 `class` （Reference Type）。（`Codable`, `CustomStringConvertible`, `Equatable` 什么的暂时不需要考虑。\n\n对于 `Formatter`，可能不同的 logger 需要不同的 format，比如输出到本地文件的 logger 需要更详细的信息，比如时间戳，才好帮助日后还原 app 当时运行的情况，而输出到 Xcode Console 的日志一般是在开发的时候看的，所以时间戳可能就没那么重要。（为什么 `Formatter` 使用 `protocol`？可以先想想，后面再解释。\n\n```swift\npublic struct Message {\n\n    public let message: String\n\n    public let level: Level\n\n    public let flag: Flag\n\n    public let context: Int\n\n    public let file: String\n\n    public let function: StaticString\n\n    public let line: UInt\n\n    public let timestamp: Date\n}\n\npublic protocol Formatter {\n    func format(message: Message) -> String\n}\n```\n\n### Logging\n\n根据日志输出的目标不同，可以划分为不同类型的 logger，比如 `ConsoleLogger`、`FileLogger` 以及 `WebLogger` 等。每一种不同的 logger 都有一些同样的接口，所以第一反应有两种不同的方式来实现类型的划分以及相同接口（行为）的约束。\n\n使用面向对象的思想，通过继承来实现。\n\n```swift\nopen class Logging {\n    public enum Type {\n        case console\n        case file\n        case web\n    }\n\n    open var type: Type {\n        return .console\n    }\n    \n    open func log(_ message: String) {\n        fatalError(\"must override this method in subclass.\")\n    }\n}\n\nopen class ConsoleLogger: Logging {\n    override open var type: Type {\n        return .console\n    }\n    override open func log(_ message: String) {\n        //\n    }\n}\nopen class FileLogger: Logging {\n    override open var type: Type {\n        return .file\n    }\n    override open func log(_ message: String) {\n        //\n    }\n}\n```\n\n使用面向协议的思想，通过协议来约束行为。\n\n```swift\nprotocol Logging {\n    var type: Type { get }\n\n    func log(_ message: String)\n}\n\nstruct ConsoleLogger: Logging {\n    var type: Type {\n        return .console\n    }\n\n    func log(_ message: String) {\n        //\n    }\n}\n\nstruct FileLogger: Logging {\n    var type: Type {\n        return .file\n    }\n\n    func log(_ message: String) {\n        //\n    }\n}\n```\n\n两种不同的实现，体现的是两种不同的思想：\n* 一种是使用面向对象的思想，通过一个基类来提供相同的接口，然后子类重写这些接口来提供不同的能力；\n* 另一种是使用面向协议的思想，通过一个协议来对接口进行约束，每一个具体的实现都必须实现这些接口来提供不同都能力。\n\n而对于不同类型的 logger 都共有的行为，前一种方式可以直接在基类中实现，后一种方式可以通过 `protocol extension` 来提供默认实现。\n\n两种方式各有优缺点，如果你也不喜欢前一种 **需要运行时才能知道子类必须重写父类的某个方法**，完全不能体现出 Swift 作为一门有着强大类型安全的静态语言的优势，那么这里毫不犹豫的选择后一种方式。（不解释\n\n对于这里的 `Type`，虽然使用 `enum` 有着很好的强类型信息，但这样写有着很大的约束，就是一开始就必须定义好所有的 Type，对于扩展性来说，非常不友好。\n\n所以综合可扩展性和 `Type` 的作用考虑，这里通过添加一个 `String` 类型的属性 `name` 来简单的区分。（很方便于 debug\n\n### Interface\n\n最终得到一整个 Logging 相关的接口定义：\n\n```swift\npublic protocol Logging {\n\n    var formatter: Formatter { get }\n\n    var name: String { get }\n\n    var level: Level { get }\n\n    func log(message: Message)\n\n    func flush()\n\n    func start()\n\n    func teardown()\n}\n\npublic extension Logging {\n\n    var name: String {\n        return \"Unified\"\n    }\n\n    func flush() {}\n\n    func start() {}\n\n    func teardown() {}\n}\n```\n\n### Logger\n\n前面定义了每个不同 `logger` 的接口（行为），但是使用的时候，如果需要手动调用每个 `logger` 的 `log(message:)` 方法，那就太没有意义了。所以需要一个数据结构，来管理所有的 `logger`，并且将消息转发到每一个 `logger`。\n\n```swift\npublic class Logger {\n    public static let shared = Logger()\n\n    private var queue = DispatchQueue(label: \"com.xspyhack.logger.queue\")\n\n    public private(set) var loggers: Set<AnyLogger> = []\n\n    deinit {\n        loggers.forEach {\n            $0.teardown()\n        }\n\n        loggers = []\n    }\n}\n\npublic extension Logger {\n   public func add(_ logger: Logging) {\n        loggers.update(with: logger)\n    }\n}\n\npublic extension Logger {\n    public func log(message: Message, asynchronous: Bool) {\n        let work = DispatchWorkItem {\n            self.loggers.forEach { logger in\n                guard message.flag.rawValue & logger.level.rawValue != 0 else {\n                    return\n                }\n                logger.log(message: message)\n            }\n        }\n\n        if asynchronous {\n            queue.async(execute: work)\n        } else {\n            queue.sync(execute: work)\n        }\n    }\n\n    public func start() {\n        loggers.forEach {\n            $0.start()\n        }\n    }\n\n    public func flush() {\n        let work = DispatchWorkItem {\n            self.loggers.forEach { logger in\n                logger.flush()\n            }\n        }\n\n        queue.sync(execute: work)\n    }\n}\n```\n\n这里只是比较粗糙的实现，很多细节还没有处理，比如 `loggers` 的线程安全问题、以及 `logger` 的删除等等。\n\n### Log\n\n有了 `Logging` 来定义每一种不同作用的 `logger`，以及一个管理所有 `logger` 的管理器 `Logger`（至于这个让人懵逼的命名，实际是因为懒，取一个别的名字比较适合，比如 ~~Charmander~~），还需要考虑最终如何简单的使用这个 Logging System。\n\n现在如果要使用这个系统，首先需要实现自己的多种 `loggers` 和对应的 `Formatter`，然后添加到 `Logger` 里面，然后在需要打 log 的地方，初始化 一个 `Message`，调用 `Logger.shared.log(message:)` 方法。\n\n这里每次初始化一个 `Message` 太麻烦了。如何简化？默认参数啊。\n\n```swift\npublic static func log(_ message: @autoclosure () -> String, level: Level, flag: Flag, context: Int = 0, file: String = #file, function: StaticString = #function, line: UInt = #line, asynchronous: Bool = false) {\n\n    let message = Message(message: message(), level: level, flag: flag, context: context, file: file, function: function, line: line, timestamp: Date())\n\n    Logger.shared.log(message: message, asynchronous: asynchronous)\n}\n```\n\n对于 `level` 和 `flag` 如果能提供默认参数，那么在调用的时候，就可以像 `print` 一样，直接只关注要 log 的内容就好了。一个比较简单直接的方法，就是针对这几种 `level` 暴露多个方法。\n\n```swift\nLog.d(\"This is a debug level log\")\nLog.i(\"This is an info level log\")\nLog.w(\"This is a warning level log\")\nLog.e(\"This is an error level log\")\n```\n\n> 一个思考，上面的 `log` 函数中参数 message 的类型为什么使用 `@autoclosure`？\n\n> 第二个思考，`Swift.print` 函数的定义你知道吗？\n\n## Implementation\n\n[GitHub - xspyhack/Keldeo: A lightweight logging library written in Swift.](https://github.com/xspyhack/Keldeo)\n\n### Why AnyLogger\n\n对于引入 `AnyLogger`，是因为我希望能够提供移除一个 `logger` 的能力，用处就是当我在脱离 Xcode 的时候，可以通过一种可以输出到浏览器的 `logger` 来实时看到日志输出。而这个名为 `WebLogger` 的 `logger` 平时并不会用到，所以它是需要的时候才添加进去，用完之后便移除，所以就涉及到 `logger` 必须实现 `Equatable`，实现从 `loggers` 里面移除它。\n\n> Why `protocol Logging: Equatable {}` needs `AnyLogger`？见另一篇 [PATs](http://blessingsoft.com/2018/08/26/pats/)\n\n## Ref\n\n* [GitHub - CocoaLumberjack/CocoaLumberjack: A fast & simple, yet powerful & flexible logging framework for Mac and iOS](https://github.com/CocoaLumberjack/CocoaLumberjack)\n* [Kingfisher/ImageCache.swift at master · onevcat/Kingfisher · GitHub](https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift)\n* [swift/AnyHashable.swift at swift-3.0-branch · apple/swift · GitHub](https://github.com/apple/swift/blob/swift-3.0-branch/stdlib/public/core/AnyHashable.swift)\n\n\n\n","slug":"logging-system","published":1,"updated":"2022-01-02T11:27:36.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xa00089ithdlbsbdbf","content":"<blockquote>\n<p>之前项目一直都是使用 <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a> 来定制 Log 系统，这次整个工程使用 Pure-Swift 来开发，而且作为一个初创项目，对于 Log 系统的需求并没有那么高，虽然 <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a> 在 Swift 项目中直接使用也比较友好，但是感觉还是 <del>太重了</del> 。所以为何不直接设计一个比较轻量级的日志系统呢？</p>\n</blockquote>\n<h2 id=\"Logging-System\"><a href=\"#Logging-System\" class=\"headerlink\" title=\"Logging System\"></a>Logging System</h2><p>在 iOS 中，可以用 Swift 中的 <code>print()</code> 和 <code>debugPrint()</code> 函数来向 Xcode Console 来打印信息，也可以使用 Foundation 中的 <code>NSLog()</code> 来打印，更新的就是 <a href=\"https://developer.apple.com/documentation/os/logging\">os_log</a> 了。这三种不同的方式有不同的特点。</p>\n<ul>\n<li><strong>print</strong>/<strong>debugPrint</strong>: Swift 语言层面提供的实现，可以输出到 Xcode Console，但不能输出到 Apple System Logs（Mac Console.app）。</li>\n<li><strong>NSLog</strong>: Foundation 中的实现，除了能在 Xcode Console 中输出外，还会往 Console.app 发，并且有较大的性能损害。</li>\n<li><strong>os_log</strong>: 待补充 <a href=\"https://developer.apple.com/videos/play/wwdc2016/721/\">Unified Logging and Activity Tracing - WWDC 2016 - Videos - Apple Developer</a> <a href=\"https://developer.apple.com/videos/play/wwdc2018/405/\">Measuring Performance Using Logging - WWDC 2018 - Videos - Apple Developer</a></li>\n</ul>\n<p>Xcode Console 和 Apple System Logs 都是需要物理接触设备才能看到 log。但是在项目中，如果想要看到线上用户的 log 信息，必须要把这些 log 写到本地文件中，或者实时/定时发到远端服务器上。这时候直接使用内置的 API 是无法满足需求的。</p>\n<p>对于一个相对比较合理的日志系统，一般有几点要求：</p>\n<ul>\n<li>在 release 下禁止输出日志到 Xcode Console</li>\n<li><del>在 release 下</del> 禁止输出日志到 Apple System Logs</li>\n<li>提供输出日志到本地文件中的能力</li>\n<li>能够方便的扩展，如直接输出到 Web</li>\n<li>对于日志根据重要性划分为不同的等级</li>\n<li>可以根据日志等级，过滤日志</li>\n</ul>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><h3 id=\"Level\"><a href=\"#Level\" class=\"headerlink\" title=\"Level\"></a>Level</h3><p>Level 有两个作用：</p>\n<ul>\n<li>定义一条日志的重要性</li>\n<li>对日志进行过滤，比如过滤掉某个等级以下的日志（实际是有包含的关系</li>\n</ul>\n<p>这里通过两个类型来实现 level 的作用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Level</span>: <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> off <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> error <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"comment\">// Flag.error | Level.off</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> warning <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"comment\">// Flag.warning | Level.error</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> info <span class=\"operator\">=</span> <span class=\"number\">7</span> <span class=\"comment\">// Flag.info | Level.warning</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> debug <span class=\"operator\">=</span> <span class=\"number\">15</span> <span class=\"comment\">// Flag.debug | Level.info</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Flag</span>: <span class=\"title\">OptionSet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> rawValue: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> warning <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> info <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> debug <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">3</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">rawValue</span>: <span class=\"type\">Int</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.rawValue <span class=\"operator\">=</span> rawValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Message-amp-Formatter\"><a href=\"#Message-amp-Formatter\" class=\"headerlink\" title=\"Message &amp; Formatter\"></a>Message &amp; Formatter</h3><p>一条日志如果只有正文部分，很难帮助定位具体的位置和发生的时间点，所以一条更加有意义的日志，会带上所在的文件、函数、行数以及时间戳等信息。</p>\n<p>首先定义一个 <code>Message</code> 的数据结构来定义一条日志，这些信息最终具体如何 format 成一条字符串，需要提供一个 <code>Formatter</code> 来实现。</p>\n<p>既然是 Pure-Swift，所以这里 <code>Message</code> 使用 <code>struct</code> （Value Type），而不是 <code>class</code> （Reference Type）。（<code>Codable</code>, <code>CustomStringConvertible</code>, <code>Equatable</code> 什么的暂时不需要考虑。</p>\n<p>对于 <code>Formatter</code>，可能不同的 logger 需要不同的 format，比如输出到本地文件的 logger 需要更详细的信息，比如时间戳，才好帮助日后还原 app 当时运行的情况，而输出到 Xcode Console 的日志一般是在开发的时候看的，所以时间戳可能就没那么重要。（为什么 <code>Formatter</code> 使用 <code>protocol</code>？可以先想想，后面再解释。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> message: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> level: <span class=\"type\">Level</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> flag: <span class=\"type\">Flag</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> context: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> file: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> function: <span class=\"type\">StaticString</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> line: <span class=\"type\">UInt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> timestamp: <span class=\"type\">Date</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>)</span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>根据日志输出的目标不同，可以划分为不同类型的 logger，比如 <code>ConsoleLogger</code>、<code>FileLogger</code> 以及 <code>WebLogger</code> 等。每一种不同的 logger 都有一些同样的接口，所以第一反应有两种不同的方式来实现类型的划分以及相同接口（行为）的约束。</p>\n<p>使用面向对象的思想，通过继承来实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Type</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> console</span><br><span class=\"line\">        <span class=\"keyword\">case</span> file</span><br><span class=\"line\">        <span class=\"keyword\">case</span> web</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;must override this method in subclass.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .file</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用面向协议的思想，通过协议来约束行为。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ConsoleLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FileLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .file</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两种不同的实现，体现的是两种不同的思想：</p>\n<ul>\n<li>一种是使用面向对象的思想，通过一个基类来提供相同的接口，然后子类重写这些接口来提供不同的能力；</li>\n<li>另一种是使用面向协议的思想，通过一个协议来对接口进行约束，每一个具体的实现都必须实现这些接口来提供不同都能力。</li>\n</ul>\n<p>而对于不同类型的 logger 都共有的行为，前一种方式可以直接在基类中实现，后一种方式可以通过 <code>protocol extension</code> 来提供默认实现。</p>\n<p>两种方式各有优缺点，如果你也不喜欢前一种 <strong>需要运行时才能知道子类必须重写父类的某个方法</strong>，完全不能体现出 Swift 作为一门有着强大类型安全的静态语言的优势，那么这里毫不犹豫的选择后一种方式。（不解释</p>\n<p>对于这里的 <code>Type</code>，虽然使用 <code>enum</code> 有着很好的强类型信息，但这样写有着很大的约束，就是一开始就必须定义好所有的 Type，对于扩展性来说，非常不友好。</p>\n<p>所以综合可扩展性和 <code>Type</code> 的作用考虑，这里通过添加一个 <code>String</code> 类型的属性 <code>name</code> 来简单的区分。（很方便于 debug</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>最终得到一整个 Logging 相关的接口定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> formatter: <span class=\"type\">Formatter</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> level: <span class=\"type\">Level</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">teardown</span>()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unified&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">teardown</span>()</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Logger\"><a href=\"#Logger\" class=\"headerlink\" title=\"Logger\"></a>Logger</h3><p>前面定义了每个不同 <code>logger</code> 的接口（行为），但是使用的时候，如果需要手动调用每个 <code>logger</code> 的 <code>log(message:)</code> 方法，那就太没有意义了。所以需要一个数据结构，来管理所有的 <code>logger</code>，并且将消息转发到每一个 <code>logger</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">Logger</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.xspyhack.logger.queue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> loggers: <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyLogger</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        loggers.forEach &#123;</span><br><span class=\"line\">            <span class=\"variable\">$0</span>.teardown()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        loggers <span class=\"operator\">=</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span>(<span class=\"keyword\">_</span> <span class=\"params\">logger</span>: <span class=\"type\">Logging</span>)</span> &#123;</span><br><span class=\"line\">        loggers.update(with: logger)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>, <span class=\"params\">asynchronous</span>: <span class=\"type\">Bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> work <span class=\"operator\">=</span> <span class=\"type\">DispatchWorkItem</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loggers.forEach &#123; logger <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> message.flag.rawValue <span class=\"operator\">&amp;</span> logger.level.rawValue <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                logger.log(message: message)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> asynchronous &#123;</span><br><span class=\"line\">            queue.async(execute: work)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            queue.sync(execute: work)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span> &#123;</span><br><span class=\"line\">        loggers.forEach &#123;</span><br><span class=\"line\">            <span class=\"variable\">$0</span>.start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> work <span class=\"operator\">=</span> <span class=\"type\">DispatchWorkItem</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loggers.forEach &#123; logger <span class=\"keyword\">in</span></span><br><span class=\"line\">                logger.flush()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.sync(execute: work)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只是比较粗糙的实现，很多细节还没有处理，比如 <code>loggers</code> 的线程安全问题、以及 <code>logger</code> 的删除等等。</p>\n<h3 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h3><p>有了 <code>Logging</code> 来定义每一种不同作用的 <code>logger</code>，以及一个管理所有 <code>logger</code> 的管理器 <code>Logger</code>（至于这个让人懵逼的命名，实际是因为懒，取一个别的名字比较适合，比如 <del>Charmander</del>），还需要考虑最终如何简单的使用这个 Logging System。</p>\n<p>现在如果要使用这个系统，首先需要实现自己的多种 <code>loggers</code> 和对应的 <code>Formatter</code>，然后添加到 <code>Logger</code> 里面，然后在需要打 log 的地方，初始化 一个 <code>Message</code>，调用 <code>Logger.shared.log(message:)</code> 方法。</p>\n<p>这里每次初始化一个 <code>Message</code> 太麻烦了。如何简化？默认参数啊。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"keyword\">@autoclosure</span> () -&gt; <span class=\"type\">String</span>, <span class=\"params\">level</span>: <span class=\"type\">Level</span>, <span class=\"params\">flag</span>: <span class=\"type\">Flag</span>, <span class=\"params\">context</span>: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, <span class=\"params\">file</span>: <span class=\"type\">String</span> <span class=\"operator\">=</span> #file, <span class=\"params\">function</span>: <span class=\"type\">StaticString</span> <span class=\"operator\">=</span> #function, <span class=\"params\">line</span>: <span class=\"type\">UInt</span> <span class=\"operator\">=</span> #line, <span class=\"params\">asynchronous</span>: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message <span class=\"operator\">=</span> <span class=\"type\">Message</span>(message: message(), level: level, flag: flag, context: context, file: file, function: function, line: line, timestamp: <span class=\"type\">Date</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Logger</span>.shared.log(message: message, asynchronous: asynchronous)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于 <code>level</code> 和 <code>flag</code> 如果能提供默认参数，那么在调用的时候，就可以像 <code>print</code> 一样，直接只关注要 log 的内容就好了。一个比较简单直接的方法，就是针对这几种 <code>level</code> 暴露多个方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Log</span>.d(<span class=\"string\">&quot;This is a debug level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.i(<span class=\"string\">&quot;This is an info level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.w(<span class=\"string\">&quot;This is a warning level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.e(<span class=\"string\">&quot;This is an error level log&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一个思考，上面的 <code>log</code> 函数中参数 message 的类型为什么使用 <code>@autoclosure</code>？</p>\n</blockquote>\n<blockquote>\n<p>第二个思考，<code>Swift.print</code> 函数的定义你知道吗？</p>\n</blockquote>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p><a href=\"https://github.com/xspyhack/Keldeo\">GitHub - xspyhack/Keldeo: A lightweight logging library written in Swift.</a></p>\n<h3 id=\"Why-AnyLogger\"><a href=\"#Why-AnyLogger\" class=\"headerlink\" title=\"Why AnyLogger\"></a>Why AnyLogger</h3><p>对于引入 <code>AnyLogger</code>，是因为我希望能够提供移除一个 <code>logger</code> 的能力，用处就是当我在脱离 Xcode 的时候，可以通过一种可以输出到浏览器的 <code>logger</code> 来实时看到日志输出。而这个名为 <code>WebLogger</code> 的 <code>logger</code> 平时并不会用到，所以它是需要的时候才添加进去，用完之后便移除，所以就涉及到 <code>logger</code> 必须实现 <code>Equatable</code>，实现从 <code>loggers</code> 里面移除它。</p>\n<blockquote>\n<p>Why <code>protocol Logging: Equatable &#123;&#125;</code> needs <code>AnyLogger</code>？见另一篇 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a></p>\n</blockquote>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><ul>\n<li><a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">GitHub - CocoaLumberjack/CocoaLumberjack: A fast &amp; simple, yet powerful &amp; flexible logging framework for Mac and iOS</a></li>\n<li><a href=\"https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift\">Kingfisher/ImageCache.swift at master · onevcat/Kingfisher · GitHub</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/swift-3.0-branch/stdlib/public/core/AnyHashable.swift\">swift/AnyHashable.swift at swift-3.0-branch · apple/swift · GitHub</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>之前项目一直都是使用 <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a> 来定制 Log 系统，这次整个工程使用 Pure-Swift 来开发，而且作为一个初创项目，对于 Log 系统的需求并没有那么高，虽然 <a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">CocoaLumberjack</a> 在 Swift 项目中直接使用也比较友好，但是感觉还是 <del>太重了</del> 。所以为何不直接设计一个比较轻量级的日志系统呢？</p>\n</blockquote>\n<h2 id=\"Logging-System\"><a href=\"#Logging-System\" class=\"headerlink\" title=\"Logging System\"></a>Logging System</h2><p>在 iOS 中，可以用 Swift 中的 <code>print()</code> 和 <code>debugPrint()</code> 函数来向 Xcode Console 来打印信息，也可以使用 Foundation 中的 <code>NSLog()</code> 来打印，更新的就是 <a href=\"https://developer.apple.com/documentation/os/logging\">os_log</a> 了。这三种不同的方式有不同的特点。</p>\n<ul>\n<li><strong>print</strong>/<strong>debugPrint</strong>: Swift 语言层面提供的实现，可以输出到 Xcode Console，但不能输出到 Apple System Logs（Mac Console.app）。</li>\n<li><strong>NSLog</strong>: Foundation 中的实现，除了能在 Xcode Console 中输出外，还会往 Console.app 发，并且有较大的性能损害。</li>\n<li><strong>os_log</strong>: 待补充 <a href=\"https://developer.apple.com/videos/play/wwdc2016/721/\">Unified Logging and Activity Tracing - WWDC 2016 - Videos - Apple Developer</a> <a href=\"https://developer.apple.com/videos/play/wwdc2018/405/\">Measuring Performance Using Logging - WWDC 2018 - Videos - Apple Developer</a></li>\n</ul>\n<p>Xcode Console 和 Apple System Logs 都是需要物理接触设备才能看到 log。但是在项目中，如果想要看到线上用户的 log 信息，必须要把这些 log 写到本地文件中，或者实时/定时发到远端服务器上。这时候直接使用内置的 API 是无法满足需求的。</p>\n<p>对于一个相对比较合理的日志系统，一般有几点要求：</p>\n<ul>\n<li>在 release 下禁止输出日志到 Xcode Console</li>\n<li><del>在 release 下</del> 禁止输出日志到 Apple System Logs</li>\n<li>提供输出日志到本地文件中的能力</li>\n<li>能够方便的扩展，如直接输出到 Web</li>\n<li>对于日志根据重要性划分为不同的等级</li>\n<li>可以根据日志等级，过滤日志</li>\n</ul>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><h3 id=\"Level\"><a href=\"#Level\" class=\"headerlink\" title=\"Level\"></a>Level</h3><p>Level 有两个作用：</p>\n<ul>\n<li>定义一条日志的重要性</li>\n<li>对日志进行过滤，比如过滤掉某个等级以下的日志（实际是有包含的关系</li>\n</ul>\n<p>这里通过两个类型来实现 level 的作用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Level</span>: <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> off <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> error <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"comment\">// Flag.error | Level.off</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> warning <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"comment\">// Flag.warning | Level.error</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> info <span class=\"operator\">=</span> <span class=\"number\">7</span> <span class=\"comment\">// Flag.info | Level.warning</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> debug <span class=\"operator\">=</span> <span class=\"number\">15</span> <span class=\"comment\">// Flag.debug | Level.info</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Flag</span>: <span class=\"title\">OptionSet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> rawValue: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> error <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">0</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> warning <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> info <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">2</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> debug <span class=\"operator\">=</span> <span class=\"type\">Flag</span>(rawValue: <span class=\"number\">1</span> <span class=\"operator\">&lt;&lt;</span> <span class=\"number\">3</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">rawValue</span>: <span class=\"type\">Int</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.rawValue <span class=\"operator\">=</span> rawValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Message-amp-Formatter\"><a href=\"#Message-amp-Formatter\" class=\"headerlink\" title=\"Message &amp; Formatter\"></a>Message &amp; Formatter</h3><p>一条日志如果只有正文部分，很难帮助定位具体的位置和发生的时间点，所以一条更加有意义的日志，会带上所在的文件、函数、行数以及时间戳等信息。</p>\n<p>首先定义一个 <code>Message</code> 的数据结构来定义一条日志，这些信息最终具体如何 format 成一条字符串，需要提供一个 <code>Formatter</code> 来实现。</p>\n<p>既然是 Pure-Swift，所以这里 <code>Message</code> 使用 <code>struct</code> （Value Type），而不是 <code>class</code> （Reference Type）。（<code>Codable</code>, <code>CustomStringConvertible</code>, <code>Equatable</code> 什么的暂时不需要考虑。</p>\n<p>对于 <code>Formatter</code>，可能不同的 logger 需要不同的 format，比如输出到本地文件的 logger 需要更详细的信息，比如时间戳，才好帮助日后还原 app 当时运行的情况，而输出到 Xcode Console 的日志一般是在开发的时候看的，所以时间戳可能就没那么重要。（为什么 <code>Formatter</code> 使用 <code>protocol</code>？可以先想想，后面再解释。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> message: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> level: <span class=\"type\">Level</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> flag: <span class=\"type\">Flag</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> context: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> file: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> function: <span class=\"type\">StaticString</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> line: <span class=\"type\">UInt</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">let</span> timestamp: <span class=\"type\">Date</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Formatter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">format</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>)</span> -&gt; <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Logging\"><a href=\"#Logging\" class=\"headerlink\" title=\"Logging\"></a>Logging</h3><p>根据日志输出的目标不同，可以划分为不同类型的 logger，比如 <code>ConsoleLogger</code>、<code>FileLogger</code> 以及 <code>WebLogger</code> 等。每一种不同的 logger 都有一些同样的接口，所以第一反应有两种不同的方式来实现类型的划分以及相同接口（行为）的约束。</p>\n<p>使用面向对象的思想，通过继承来实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Type</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> console</span><br><span class=\"line\">        <span class=\"keyword\">case</span> file</span><br><span class=\"line\">        <span class=\"keyword\">case</span> web</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;must override this method in subclass.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .file</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用面向协议的思想，通过协议来约束行为。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ConsoleLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .console</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FileLogger</span>: <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type: <span class=\"type\">Type</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> .file</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两种不同的实现，体现的是两种不同的思想：</p>\n<ul>\n<li>一种是使用面向对象的思想，通过一个基类来提供相同的接口，然后子类重写这些接口来提供不同的能力；</li>\n<li>另一种是使用面向协议的思想，通过一个协议来对接口进行约束，每一个具体的实现都必须实现这些接口来提供不同都能力。</li>\n</ul>\n<p>而对于不同类型的 logger 都共有的行为，前一种方式可以直接在基类中实现，后一种方式可以通过 <code>protocol extension</code> 来提供默认实现。</p>\n<p>两种方式各有优缺点，如果你也不喜欢前一种 <strong>需要运行时才能知道子类必须重写父类的某个方法</strong>，完全不能体现出 Swift 作为一门有着强大类型安全的静态语言的优势，那么这里毫不犹豫的选择后一种方式。（不解释</p>\n<p>对于这里的 <code>Type</code>，虽然使用 <code>enum</code> 有着很好的强类型信息，但这样写有着很大的约束，就是一开始就必须定义好所有的 Type，对于扩展性来说，非常不友好。</p>\n<p>所以综合可扩展性和 <code>Type</code> 的作用考虑，这里通过添加一个 <code>String</code> 类型的属性 <code>name</code> 来简单的区分。（很方便于 debug</p>\n<h3 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h3><p>最终得到一整个 Logging 相关的接口定义：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> formatter: <span class=\"type\">Formatter</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> level: <span class=\"type\">Level</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">teardown</span>()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Unified&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">teardown</span>()</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Logger\"><a href=\"#Logger\" class=\"headerlink\" title=\"Logger\"></a>Logger</h3><p>前面定义了每个不同 <code>logger</code> 的接口（行为），但是使用的时候，如果需要手动调用每个 <code>logger</code> 的 <code>log(message:)</code> 方法，那就太没有意义了。所以需要一个数据结构，来管理所有的 <code>logger</code>，并且将消息转发到每一个 <code>logger</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">Logger</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> queue <span class=\"operator\">=</span> <span class=\"type\">DispatchQueue</span>(label: <span class=\"string\">&quot;com.xspyhack.logger.queue&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> loggers: <span class=\"type\">Set</span>&lt;<span class=\"type\">AnyLogger</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        loggers.forEach &#123;</span><br><span class=\"line\">            <span class=\"variable\">$0</span>.teardown()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        loggers <span class=\"operator\">=</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span>(<span class=\"keyword\">_</span> <span class=\"params\">logger</span>: <span class=\"type\">Logging</span>)</span> &#123;</span><br><span class=\"line\">        loggers.update(with: logger)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"params\">message</span>: <span class=\"type\">Message</span>, <span class=\"params\">asynchronous</span>: <span class=\"type\">Bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> work <span class=\"operator\">=</span> <span class=\"type\">DispatchWorkItem</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loggers.forEach &#123; logger <span class=\"keyword\">in</span></span><br><span class=\"line\">                <span class=\"keyword\">guard</span> message.flag.rawValue <span class=\"operator\">&amp;</span> logger.level.rawValue <span class=\"operator\">!=</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                logger.log(message: message)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> asynchronous &#123;</span><br><span class=\"line\">            queue.async(execute: work)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            queue.sync(execute: work)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">start</span>()</span> &#123;</span><br><span class=\"line\">        loggers.forEach &#123;</span><br><span class=\"line\">            <span class=\"variable\">$0</span>.start()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flush</span>()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> work <span class=\"operator\">=</span> <span class=\"type\">DispatchWorkItem</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.loggers.forEach &#123; logger <span class=\"keyword\">in</span></span><br><span class=\"line\">                logger.flush()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.sync(execute: work)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只是比较粗糙的实现，很多细节还没有处理，比如 <code>loggers</code> 的线程安全问题、以及 <code>logger</code> 的删除等等。</p>\n<h3 id=\"Log\"><a href=\"#Log\" class=\"headerlink\" title=\"Log\"></a>Log</h3><p>有了 <code>Logging</code> 来定义每一种不同作用的 <code>logger</code>，以及一个管理所有 <code>logger</code> 的管理器 <code>Logger</code>（至于这个让人懵逼的命名，实际是因为懒，取一个别的名字比较适合，比如 <del>Charmander</del>），还需要考虑最终如何简单的使用这个 Logging System。</p>\n<p>现在如果要使用这个系统，首先需要实现自己的多种 <code>loggers</code> 和对应的 <code>Formatter</code>，然后添加到 <code>Logger</code> 里面，然后在需要打 log 的地方，初始化 一个 <code>Message</code>，调用 <code>Logger.shared.log(message:)</code> 方法。</p>\n<p>这里每次初始化一个 <code>Message</code> 太麻烦了。如何简化？默认参数啊。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">log</span>(<span class=\"keyword\">_</span> <span class=\"params\">message</span>: <span class=\"keyword\">@autoclosure</span> () -&gt; <span class=\"type\">String</span>, <span class=\"params\">level</span>: <span class=\"type\">Level</span>, <span class=\"params\">flag</span>: <span class=\"type\">Flag</span>, <span class=\"params\">context</span>: <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, <span class=\"params\">file</span>: <span class=\"type\">String</span> <span class=\"operator\">=</span> #file, <span class=\"params\">function</span>: <span class=\"type\">StaticString</span> <span class=\"operator\">=</span> #function, <span class=\"params\">line</span>: <span class=\"type\">UInt</span> <span class=\"operator\">=</span> #line, <span class=\"params\">asynchronous</span>: <span class=\"type\">Bool</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message <span class=\"operator\">=</span> <span class=\"type\">Message</span>(message: message(), level: level, flag: flag, context: context, file: file, function: function, line: line, timestamp: <span class=\"type\">Date</span>())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Logger</span>.shared.log(message: message, asynchronous: asynchronous)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于 <code>level</code> 和 <code>flag</code> 如果能提供默认参数，那么在调用的时候，就可以像 <code>print</code> 一样，直接只关注要 log 的内容就好了。一个比较简单直接的方法，就是针对这几种 <code>level</code> 暴露多个方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Log</span>.d(<span class=\"string\">&quot;This is a debug level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.i(<span class=\"string\">&quot;This is an info level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.w(<span class=\"string\">&quot;This is a warning level log&quot;</span>)</span><br><span class=\"line\"><span class=\"type\">Log</span>.e(<span class=\"string\">&quot;This is an error level log&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>一个思考，上面的 <code>log</code> 函数中参数 message 的类型为什么使用 <code>@autoclosure</code>？</p>\n</blockquote>\n<blockquote>\n<p>第二个思考，<code>Swift.print</code> 函数的定义你知道吗？</p>\n</blockquote>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p><a href=\"https://github.com/xspyhack/Keldeo\">GitHub - xspyhack/Keldeo: A lightweight logging library written in Swift.</a></p>\n<h3 id=\"Why-AnyLogger\"><a href=\"#Why-AnyLogger\" class=\"headerlink\" title=\"Why AnyLogger\"></a>Why AnyLogger</h3><p>对于引入 <code>AnyLogger</code>，是因为我希望能够提供移除一个 <code>logger</code> 的能力，用处就是当我在脱离 Xcode 的时候，可以通过一种可以输出到浏览器的 <code>logger</code> 来实时看到日志输出。而这个名为 <code>WebLogger</code> 的 <code>logger</code> 平时并不会用到，所以它是需要的时候才添加进去，用完之后便移除，所以就涉及到 <code>logger</code> 必须实现 <code>Equatable</code>，实现从 <code>loggers</code> 里面移除它。</p>\n<blockquote>\n<p>Why <code>protocol Logging: Equatable &#123;&#125;</code> needs <code>AnyLogger</code>？见另一篇 <a href=\"http://blessingsoft.com/2018/08/26/pats/\">PATs</a></p>\n</blockquote>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><ul>\n<li><a href=\"https://github.com/CocoaLumberjack/CocoaLumberjack\">GitHub - CocoaLumberjack/CocoaLumberjack: A fast &amp; simple, yet powerful &amp; flexible logging framework for Mac and iOS</a></li>\n<li><a href=\"https://github.com/onevcat/Kingfisher/blob/master/Sources/ImageCache.swift\">Kingfisher/ImageCache.swift at master · onevcat/Kingfisher · GitHub</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/swift-3.0-branch/stdlib/public/core/AnyHashable.swift\">swift/AnyHashable.swift at swift-3.0-branch · apple/swift · GitHub</a></li>\n</ul>\n"},{"title":"HTTP Streaming/Chunked 2","date":"2020-04-25T12:00:00.000Z","_content":"## TL;DR\n\n一个非常悲伤的消息是，`Azure` 和 `Cocoa` 的配合还是出了问题，原因出在 `chunk` 的实现上。这个锅应该由 `Cocoa` 来背，`HTTP/1.1` 给出的 `chunk` 的格式中，每一个 `chunk` 的结尾应该是 `CRLF`，而 `Cocoa` 的实现（可能是为了实现上的方便）把这个 `CRLF` 放在了下一个 `chunk` 的开头。对于连续的 `chunk` 来说看起好像没有什么区别，但是在我们的场景中，使用第一个 `chunk` 来建立连接，建立完成之后才会发信令的 `chunk`，也就是第一个 `chunk` 和后续的 `chunk` 不会连续。然而 `Azure` 在收到第一个 `chunk` 后，发现结尾还没有收到 `CRLF`（虽然此时已经收到了正确长度的数据），然后进入继续等待状态，不会把数据包转发给后台数据服务器，这样后台数据服务器就没法和 `downlink` 匹配并且建立连接。\n\n## Chunked Transfer Encoding\n\n首先根据 `HTTP/1.1` 的 [RFC](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html) 对于 `Chunked Transfer Encoding` 规定。\n\n```yaml\nChunked-Body   = *chunk\n                last-chunk\n                trailer\n                CRLF\nchunk          = chunk-size [ chunk-extension ] CRLF\n                chunk-data CRLF\nchunk-size     = 1*HEX\nlast-chunk     = 1*(\"0\") [ chunk-extension ] CRLF\nchunk-extension= *( \";\" chunk-ext-name [ \"=\" chunk-ext-val ] )\nchunk-ext-name = token\nchunk-ext-val  = token | quoted-string\nchunk-data     = chunk-size(OCTET)\ntrailer        = *(entity-header CRLF)\n```\n\n重点部分为 `chunk` 的格式，可以看到每一个 `chunk` 应该由一个 16 进制的 `chunk-size` 开始，然后接着一个 `CRLF`，然后是 `chunk-data`，末尾是一个 `CRLF`。\n\n```yaml\nchunk          = chunk-size [ chunk-extension ] CRLF\n                chunk-data CRLF\n```\n\n再看 `Cocoa` 的实现 [CFHTTPFilter.c](https://opensource.apple.com/source/CFNetwork/CFNetwork-128.2/HTTP/CFHTTPFilter.c.auto.html)，虽然它在源码里面也贴了上边 `RFC` 中的结构，可是它的实现中并不那么回事。看第一行注释就暴露了它的每个 `chunk header` 中除了 `first chunk` 之外，其他的都会出现两个 `CRLF`，其中一个叫做 `leading CRLF`，也就是开头说的，它是在下一个 `chunk` 的头部，插入一个 `CRLF`。\n\n```objc\n// CFIndex <= uint64 so no more than 16 characters to encode + 2 for CRLF + 2 for leading CRLF\n#define MAX_CHUNK_HEADER_SIZE (20)\nstatic void sendChunkHeader(CFWriteStreamRef stream, CFIndex chunkLength, Boolean firstChunk, CFStreamError *error) {\n    // hex representation of chunkLength, followed by CRLF\n    UInt8 writeBuffer[MAX_CHUNK_HEADER_SIZE];\n    UInt8 *writeBase;\n    CFIndex bytesWritten;\n    error->error = 0;\n    writeBuffer[MAX_CHUNK_HEADER_SIZE - 1] = '\\n';\n    writeBuffer[MAX_CHUNK_HEADER_SIZE - 2] = '\\r';\n    writeBase = &(writeBuffer[MAX_CHUNK_HEADER_SIZE-3]); \n    while (chunkLength > 0) {\n        int nextDigit = chunkLength & 0xF;\n        *writeBase = nextDigit < 10 ? '0' + nextDigit : 'A' + nextDigit - 10;\n        writeBase --;\n        chunkLength = chunkLength >> 4;\n    }\n    if (firstChunk) {\n        writeBase ++;\n    } else {\n        *writeBase = '\\n';\n        writeBase --;\n        *writeBase = '\\r';\n    }\n    while (writeBase < writeBuffer + MAX_CHUNK_HEADER_SIZE) {\n        bytesWritten = CFWriteStreamWrite(stream, writeBase, writeBuffer + MAX_CHUNK_HEADER_SIZE - writeBase);\n        if (bytesWritten < 0) {\n            *error = CFWriteStreamGetError(stream);\n            break;\n        } else if (bytesWritten == 0) {\n            // Premature EOF; can we come up with a better error code?\n            error->domain = kCFStreamErrorDomainHTTP;\n            error->error = kCFStreamErrorHTTPParseFailure;\n            break;\n        } else {\n            writeBase += bytesWritten;\n        }\n    }\n}\n```\n\n合理的样子是\n\n```yaml\n7\\r\\n\nChunk_1\\r\\n\n7\\r\\n\nChunk_2\\r\\n\n```\n\n而 `Cocoa` 是这样子的\n\n```yaml\n7\\r\\n\nChunk_1\n\\r\\n\n7\\r\\n\nChunk_2\n```\n\n## 解决方案\n\n既然 `Cocoa` 的实现不符合 `Azure` 的要求，那么有没有办法来 **绕过** 一下呢？既能让 `Azure` 转发第一个 `chunk`，也能让后端数据服务器正确识别。\n\n### 自己添加一个 CRLF\n\n既然 `Azure` 会等待 `CRLF`，那么在第一个 `chunk` 结尾多加一个 `CRLF` 行不行？肯定不行，因为 `CRLF` 是不算在 `chunk-size` 里面的。并且会导致下一个 `chunk` 到来的时候，出现连续的 `CRLFCRLF`，虽然按要求最后一个 `chunk` 是 `0CRLFCRLF`，但有些服务器会兼容只有 `CRLFCRLF` 的情况。\n\n### 多发一个 chunk\n\n不能多加一个 `CRLF`，那么我们在建立 `name_channel` 的时候，多发一个 `chunk`，那么 `Azure` 收到的数据将会是这样的。\n\n```yaml\nC\\r\\n\nname_channel\n\n\\r\\n\n2\\r\\n\nOK\n```\n\n上面的格式是为了方便区分两个 `chunk`，其实真正的数据是没有换行的，因为已经把 `\\r\\n` 写出来了。换一个写法。\n\n```yaml\nC\\r\\nname_channel\\r\\n2\\r\\nOK\n```\n\n那么 `Azure` 收到这样的数据包之后，就会认为第一个 `chunk` （`C\\r\\nname_channel\\r\\n`）已经完整收到了，但第二个 `chunk` 还需要等待最后的 `CRLF`。这时 `Azure` 就会将 `name_channel` 这个 `chunk` 转发给后台服务器，然后就能正常的建立起连接了。当然后天服务器需要处理多发的那个包。\n\n后续信令的 `chunk` 还需不需要每次都多发一个 `chunk`？在我们的场景中不需要也没有什么影响，因为后续的信令，是源源不断的发送出去的，所以不会出现等待下一个包的情况。即使是用户没有操作了，那么也会有心跳包，和 `ack` 的包，唯一影响的是后台服务器收到最后一个 `ack` 包的时间间隔会长一点。\n\n### libcurl\n\n这个方案很简单，因为 `libcurl` 的实现，是跟我们预想中的那样的，每个 `chunk` 结尾都是一个 `CRLF`。\n\n## Conclusion\n\nA 和 B 在一起没问题，B 和 C 在一起没问题，C 和 A 在一起也没问题，但当 A 和 C 在一起的时候，出现了问题，并不能说明这是 A 的问题或者说是 C 的问题。\n\n在测试环境中，上面多发一个 `chunk` 的方式是没有任何问题的。但是当部署到线上环境时，问题依然存在，后台服务器依然收不到请求包。除了一个是 `http` 一个是 `https` 之外，各种配置完全一样，`Azure CDN` 没法调试也没有日志可以打，这个问题暂时没有办法解决。\n\n绝望之余，我看到了一种叫做 [HTTP request smuggling - Wikipedia](https://en.wikipedia.org/wiki/HTTP_request_smuggling) 的攻击手段，能给绕过 `Azure` 不能转发的问题。","source":"_posts/http-chunked-2.md","raw":"---\ntitle: HTTP Streaming/Chunked 2\ndate: 2020-04-25 20:00:00\ntags:\n    - swift\n    - chunked\n    - streaming\n    - http\ncategories: networking\n---\n## TL;DR\n\n一个非常悲伤的消息是，`Azure` 和 `Cocoa` 的配合还是出了问题，原因出在 `chunk` 的实现上。这个锅应该由 `Cocoa` 来背，`HTTP/1.1` 给出的 `chunk` 的格式中，每一个 `chunk` 的结尾应该是 `CRLF`，而 `Cocoa` 的实现（可能是为了实现上的方便）把这个 `CRLF` 放在了下一个 `chunk` 的开头。对于连续的 `chunk` 来说看起好像没有什么区别，但是在我们的场景中，使用第一个 `chunk` 来建立连接，建立完成之后才会发信令的 `chunk`，也就是第一个 `chunk` 和后续的 `chunk` 不会连续。然而 `Azure` 在收到第一个 `chunk` 后，发现结尾还没有收到 `CRLF`（虽然此时已经收到了正确长度的数据），然后进入继续等待状态，不会把数据包转发给后台数据服务器，这样后台数据服务器就没法和 `downlink` 匹配并且建立连接。\n\n## Chunked Transfer Encoding\n\n首先根据 `HTTP/1.1` 的 [RFC](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html) 对于 `Chunked Transfer Encoding` 规定。\n\n```yaml\nChunked-Body   = *chunk\n                last-chunk\n                trailer\n                CRLF\nchunk          = chunk-size [ chunk-extension ] CRLF\n                chunk-data CRLF\nchunk-size     = 1*HEX\nlast-chunk     = 1*(\"0\") [ chunk-extension ] CRLF\nchunk-extension= *( \";\" chunk-ext-name [ \"=\" chunk-ext-val ] )\nchunk-ext-name = token\nchunk-ext-val  = token | quoted-string\nchunk-data     = chunk-size(OCTET)\ntrailer        = *(entity-header CRLF)\n```\n\n重点部分为 `chunk` 的格式，可以看到每一个 `chunk` 应该由一个 16 进制的 `chunk-size` 开始，然后接着一个 `CRLF`，然后是 `chunk-data`，末尾是一个 `CRLF`。\n\n```yaml\nchunk          = chunk-size [ chunk-extension ] CRLF\n                chunk-data CRLF\n```\n\n再看 `Cocoa` 的实现 [CFHTTPFilter.c](https://opensource.apple.com/source/CFNetwork/CFNetwork-128.2/HTTP/CFHTTPFilter.c.auto.html)，虽然它在源码里面也贴了上边 `RFC` 中的结构，可是它的实现中并不那么回事。看第一行注释就暴露了它的每个 `chunk header` 中除了 `first chunk` 之外，其他的都会出现两个 `CRLF`，其中一个叫做 `leading CRLF`，也就是开头说的，它是在下一个 `chunk` 的头部，插入一个 `CRLF`。\n\n```objc\n// CFIndex <= uint64 so no more than 16 characters to encode + 2 for CRLF + 2 for leading CRLF\n#define MAX_CHUNK_HEADER_SIZE (20)\nstatic void sendChunkHeader(CFWriteStreamRef stream, CFIndex chunkLength, Boolean firstChunk, CFStreamError *error) {\n    // hex representation of chunkLength, followed by CRLF\n    UInt8 writeBuffer[MAX_CHUNK_HEADER_SIZE];\n    UInt8 *writeBase;\n    CFIndex bytesWritten;\n    error->error = 0;\n    writeBuffer[MAX_CHUNK_HEADER_SIZE - 1] = '\\n';\n    writeBuffer[MAX_CHUNK_HEADER_SIZE - 2] = '\\r';\n    writeBase = &(writeBuffer[MAX_CHUNK_HEADER_SIZE-3]); \n    while (chunkLength > 0) {\n        int nextDigit = chunkLength & 0xF;\n        *writeBase = nextDigit < 10 ? '0' + nextDigit : 'A' + nextDigit - 10;\n        writeBase --;\n        chunkLength = chunkLength >> 4;\n    }\n    if (firstChunk) {\n        writeBase ++;\n    } else {\n        *writeBase = '\\n';\n        writeBase --;\n        *writeBase = '\\r';\n    }\n    while (writeBase < writeBuffer + MAX_CHUNK_HEADER_SIZE) {\n        bytesWritten = CFWriteStreamWrite(stream, writeBase, writeBuffer + MAX_CHUNK_HEADER_SIZE - writeBase);\n        if (bytesWritten < 0) {\n            *error = CFWriteStreamGetError(stream);\n            break;\n        } else if (bytesWritten == 0) {\n            // Premature EOF; can we come up with a better error code?\n            error->domain = kCFStreamErrorDomainHTTP;\n            error->error = kCFStreamErrorHTTPParseFailure;\n            break;\n        } else {\n            writeBase += bytesWritten;\n        }\n    }\n}\n```\n\n合理的样子是\n\n```yaml\n7\\r\\n\nChunk_1\\r\\n\n7\\r\\n\nChunk_2\\r\\n\n```\n\n而 `Cocoa` 是这样子的\n\n```yaml\n7\\r\\n\nChunk_1\n\\r\\n\n7\\r\\n\nChunk_2\n```\n\n## 解决方案\n\n既然 `Cocoa` 的实现不符合 `Azure` 的要求，那么有没有办法来 **绕过** 一下呢？既能让 `Azure` 转发第一个 `chunk`，也能让后端数据服务器正确识别。\n\n### 自己添加一个 CRLF\n\n既然 `Azure` 会等待 `CRLF`，那么在第一个 `chunk` 结尾多加一个 `CRLF` 行不行？肯定不行，因为 `CRLF` 是不算在 `chunk-size` 里面的。并且会导致下一个 `chunk` 到来的时候，出现连续的 `CRLFCRLF`，虽然按要求最后一个 `chunk` 是 `0CRLFCRLF`，但有些服务器会兼容只有 `CRLFCRLF` 的情况。\n\n### 多发一个 chunk\n\n不能多加一个 `CRLF`，那么我们在建立 `name_channel` 的时候，多发一个 `chunk`，那么 `Azure` 收到的数据将会是这样的。\n\n```yaml\nC\\r\\n\nname_channel\n\n\\r\\n\n2\\r\\n\nOK\n```\n\n上面的格式是为了方便区分两个 `chunk`，其实真正的数据是没有换行的，因为已经把 `\\r\\n` 写出来了。换一个写法。\n\n```yaml\nC\\r\\nname_channel\\r\\n2\\r\\nOK\n```\n\n那么 `Azure` 收到这样的数据包之后，就会认为第一个 `chunk` （`C\\r\\nname_channel\\r\\n`）已经完整收到了，但第二个 `chunk` 还需要等待最后的 `CRLF`。这时 `Azure` 就会将 `name_channel` 这个 `chunk` 转发给后台服务器，然后就能正常的建立起连接了。当然后天服务器需要处理多发的那个包。\n\n后续信令的 `chunk` 还需不需要每次都多发一个 `chunk`？在我们的场景中不需要也没有什么影响，因为后续的信令，是源源不断的发送出去的，所以不会出现等待下一个包的情况。即使是用户没有操作了，那么也会有心跳包，和 `ack` 的包，唯一影响的是后台服务器收到最后一个 `ack` 包的时间间隔会长一点。\n\n### libcurl\n\n这个方案很简单，因为 `libcurl` 的实现，是跟我们预想中的那样的，每个 `chunk` 结尾都是一个 `CRLF`。\n\n## Conclusion\n\nA 和 B 在一起没问题，B 和 C 在一起没问题，C 和 A 在一起也没问题，但当 A 和 C 在一起的时候，出现了问题，并不能说明这是 A 的问题或者说是 C 的问题。\n\n在测试环境中，上面多发一个 `chunk` 的方式是没有任何问题的。但是当部署到线上环境时，问题依然存在，后台服务器依然收不到请求包。除了一个是 `http` 一个是 `https` 之外，各种配置完全一样，`Azure CDN` 没法调试也没有日志可以打，这个问题暂时没有办法解决。\n\n绝望之余，我看到了一种叫做 [HTTP request smuggling - Wikipedia](https://en.wikipedia.org/wiki/HTTP_request_smuggling) 的攻击手段，能给绕过 `Azure` 不能转发的问题。","slug":"http-chunked-2","published":1,"updated":"2022-01-02T11:41:18.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xb000b9ith7wjda3v3","content":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><p>一个非常悲伤的消息是，<code>Azure</code> 和 <code>Cocoa</code> 的配合还是出了问题，原因出在 <code>chunk</code> 的实现上。这个锅应该由 <code>Cocoa</code> 来背，<code>HTTP/1.1</code> 给出的 <code>chunk</code> 的格式中，每一个 <code>chunk</code> 的结尾应该是 <code>CRLF</code>，而 <code>Cocoa</code> 的实现（可能是为了实现上的方便）把这个 <code>CRLF</code> 放在了下一个 <code>chunk</code> 的开头。对于连续的 <code>chunk</code> 来说看起好像没有什么区别，但是在我们的场景中，使用第一个 <code>chunk</code> 来建立连接，建立完成之后才会发信令的 <code>chunk</code>，也就是第一个 <code>chunk</code> 和后续的 <code>chunk</code> 不会连续。然而 <code>Azure</code> 在收到第一个 <code>chunk</code> 后，发现结尾还没有收到 <code>CRLF</code>（虽然此时已经收到了正确长度的数据），然后进入继续等待状态，不会把数据包转发给后台数据服务器，这样后台数据服务器就没法和 <code>downlink</code> 匹配并且建立连接。</p>\n<h2 id=\"Chunked-Transfer-Encoding\"><a href=\"#Chunked-Transfer-Encoding\" class=\"headerlink\" title=\"Chunked Transfer Encoding\"></a>Chunked Transfer Encoding</h2><p>首先根据 <code>HTTP/1.1</code> 的 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html\">RFC</a> 对于 <code>Chunked Transfer Encoding</code> 规定。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Chunked-Body</span>   <span class=\"string\">=</span> <span class=\"meta\">*chunk</span></span><br><span class=\"line\">                <span class=\"string\">last-chunk</span></span><br><span class=\"line\">                <span class=\"string\">trailer</span></span><br><span class=\"line\">                <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk</span>          <span class=\"string\">=</span> <span class=\"string\">chunk-size</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\">                <span class=\"string\">chunk-data</span> <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk-size</span>     <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"meta\">*HEX</span></span><br><span class=\"line\"><span class=\"string\">last-chunk</span>     <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">*(&quot;0&quot;)</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk-extension=</span> <span class=\"string\">*(</span> <span class=\"string\">&quot;;&quot;</span> <span class=\"string\">chunk-ext-name</span> [ <span class=\"string\">&quot;=&quot;</span> <span class=\"string\">chunk-ext-val</span> ] <span class=\"string\">)</span></span><br><span class=\"line\"><span class=\"string\">chunk-ext-name</span> <span class=\"string\">=</span> <span class=\"string\">token</span></span><br><span class=\"line\"><span class=\"string\">chunk-ext-val</span>  <span class=\"string\">=</span> <span class=\"string\">token</span> <span class=\"string\">|</span> <span class=\"string\">quoted-string</span></span><br><span class=\"line\"><span class=\"string\">chunk-data</span>     <span class=\"string\">=</span> <span class=\"string\">chunk-size(OCTET)</span></span><br><span class=\"line\"><span class=\"string\">trailer</span>        <span class=\"string\">=</span> <span class=\"string\">*(entity-header</span> <span class=\"string\">CRLF)</span></span><br></pre></td></tr></table></figure>\n\n<p>重点部分为 <code>chunk</code> 的格式，可以看到每一个 <code>chunk</code> 应该由一个 16 进制的 <code>chunk-size</code> 开始，然后接着一个 <code>CRLF</code>，然后是 <code>chunk-data</code>，末尾是一个 <code>CRLF</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">chunk</span>          <span class=\"string\">=</span> <span class=\"string\">chunk-size</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\">                <span class=\"string\">chunk-data</span> <span class=\"string\">CRLF</span></span><br></pre></td></tr></table></figure>\n\n<p>再看 <code>Cocoa</code> 的实现 <a href=\"https://opensource.apple.com/source/CFNetwork/CFNetwork-128.2/HTTP/CFHTTPFilter.c.auto.html\">CFHTTPFilter.c</a>，虽然它在源码里面也贴了上边 <code>RFC</code> 中的结构，可是它的实现中并不那么回事。看第一行注释就暴露了它的每个 <code>chunk header</code> 中除了 <code>first chunk</code> 之外，其他的都会出现两个 <code>CRLF</code>，其中一个叫做 <code>leading CRLF</code>，也就是开头说的，它是在下一个 <code>chunk</code> 的头部，插入一个 <code>CRLF</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CFIndex &lt;= uint64 so no more than 16 characters to encode + 2 for CRLF + 2 for leading CRLF</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_CHUNK_HEADER_SIZE (20)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> sendChunkHeader(<span class=\"built_in\">CFWriteStreamRef</span> stream, <span class=\"built_in\">CFIndex</span> chunkLength, Boolean firstChunk, <span class=\"built_in\">CFStreamError</span> *error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hex representation of chunkLength, followed by CRLF</span></span><br><span class=\"line\">    <span class=\"built_in\">UInt8</span> writeBuffer[MAX_CHUNK_HEADER_SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">UInt8</span> *writeBase;</span><br><span class=\"line\">    <span class=\"built_in\">CFIndex</span> bytesWritten;</span><br><span class=\"line\">    error-&gt;error = <span class=\"number\">0</span>;</span><br><span class=\"line\">    writeBuffer[MAX_CHUNK_HEADER_SIZE - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    writeBuffer[MAX_CHUNK_HEADER_SIZE - <span class=\"number\">2</span>] = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">    writeBase = &amp;(writeBuffer[MAX_CHUNK_HEADER_SIZE<span class=\"number\">-3</span>]); </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (chunkLength &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextDigit = chunkLength &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">        *writeBase = nextDigit &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + nextDigit : <span class=\"string\">&#x27;A&#x27;</span> + nextDigit - <span class=\"number\">10</span>;</span><br><span class=\"line\">        writeBase --;</span><br><span class=\"line\">        chunkLength = chunkLength &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstChunk) &#123;</span><br><span class=\"line\">        writeBase ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        *writeBase = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        writeBase --;</span><br><span class=\"line\">        *writeBase = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (writeBase &lt; writeBuffer + MAX_CHUNK_HEADER_SIZE) &#123;</span><br><span class=\"line\">        bytesWritten = <span class=\"built_in\">CFWriteStreamWrite</span>(stream, writeBase, writeBuffer + MAX_CHUNK_HEADER_SIZE - writeBase);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytesWritten &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            *error = <span class=\"built_in\">CFWriteStreamGetError</span>(stream);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bytesWritten == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Premature EOF; can we come up with a better error code?</span></span><br><span class=\"line\">            error-&gt;domain = kCFStreamErrorDomainHTTP;</span><br><span class=\"line\">            error-&gt;error = kCFStreamErrorHTTPParseFailure;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writeBase += bytesWritten;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>合理的样子是</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_1\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_2\\r\\n</span></span><br></pre></td></tr></table></figure>\n\n<p>而 <code>Cocoa</code> 是这样子的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_1</span></span><br><span class=\"line\"><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>既然 <code>Cocoa</code> 的实现不符合 <code>Azure</code> 的要求，那么有没有办法来 <strong>绕过</strong> 一下呢？既能让 <code>Azure</code> 转发第一个 <code>chunk</code>，也能让后端数据服务器正确识别。</p>\n<h3 id=\"自己添加一个-CRLF\"><a href=\"#自己添加一个-CRLF\" class=\"headerlink\" title=\"自己添加一个 CRLF\"></a>自己添加一个 CRLF</h3><p>既然 <code>Azure</code> 会等待 <code>CRLF</code>，那么在第一个 <code>chunk</code> 结尾多加一个 <code>CRLF</code> 行不行？肯定不行，因为 <code>CRLF</code> 是不算在 <code>chunk-size</code> 里面的。并且会导致下一个 <code>chunk</code> 到来的时候，出现连续的 <code>CRLFCRLF</code>，虽然按要求最后一个 <code>chunk</code> 是 <code>0CRLFCRLF</code>，但有些服务器会兼容只有 <code>CRLFCRLF</code> 的情况。</p>\n<h3 id=\"多发一个-chunk\"><a href=\"#多发一个-chunk\" class=\"headerlink\" title=\"多发一个 chunk\"></a>多发一个 chunk</h3><p>不能多加一个 <code>CRLF</code>，那么我们在建立 <code>name_channel</code> 的时候，多发一个 <code>chunk</code>，那么 <code>Azure</code> 收到的数据将会是这样的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">C\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">name_channel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">OK</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的格式是为了方便区分两个 <code>chunk</code>，其实真正的数据是没有换行的，因为已经把 <code>\\r\\n</code> 写出来了。换一个写法。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">C\\r\\nname_channel\\r\\n2\\r\\nOK</span></span><br></pre></td></tr></table></figure>\n\n<p>那么 <code>Azure</code> 收到这样的数据包之后，就会认为第一个 <code>chunk</code> （<code>C\\r\\nname_channel\\r\\n</code>）已经完整收到了，但第二个 <code>chunk</code> 还需要等待最后的 <code>CRLF</code>。这时 <code>Azure</code> 就会将 <code>name_channel</code> 这个 <code>chunk</code> 转发给后台服务器，然后就能正常的建立起连接了。当然后天服务器需要处理多发的那个包。</p>\n<p>后续信令的 <code>chunk</code> 还需不需要每次都多发一个 <code>chunk</code>？在我们的场景中不需要也没有什么影响，因为后续的信令，是源源不断的发送出去的，所以不会出现等待下一个包的情况。即使是用户没有操作了，那么也会有心跳包，和 <code>ack</code> 的包，唯一影响的是后台服务器收到最后一个 <code>ack</code> 包的时间间隔会长一点。</p>\n<h3 id=\"libcurl\"><a href=\"#libcurl\" class=\"headerlink\" title=\"libcurl\"></a>libcurl</h3><p>这个方案很简单，因为 <code>libcurl</code> 的实现，是跟我们预想中的那样的，每个 <code>chunk</code> 结尾都是一个 <code>CRLF</code>。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>A 和 B 在一起没问题，B 和 C 在一起没问题，C 和 A 在一起也没问题，但当 A 和 C 在一起的时候，出现了问题，并不能说明这是 A 的问题或者说是 C 的问题。</p>\n<p>在测试环境中，上面多发一个 <code>chunk</code> 的方式是没有任何问题的。但是当部署到线上环境时，问题依然存在，后台服务器依然收不到请求包。除了一个是 <code>http</code> 一个是 <code>https</code> 之外，各种配置完全一样，<code>Azure CDN</code> 没法调试也没有日志可以打，这个问题暂时没有办法解决。</p>\n<p>绝望之余，我看到了一种叫做 <a href=\"https://en.wikipedia.org/wiki/HTTP_request_smuggling\">HTTP request smuggling - Wikipedia</a> 的攻击手段，能给绕过 <code>Azure</code> 不能转发的问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><p>一个非常悲伤的消息是，<code>Azure</code> 和 <code>Cocoa</code> 的配合还是出了问题，原因出在 <code>chunk</code> 的实现上。这个锅应该由 <code>Cocoa</code> 来背，<code>HTTP/1.1</code> 给出的 <code>chunk</code> 的格式中，每一个 <code>chunk</code> 的结尾应该是 <code>CRLF</code>，而 <code>Cocoa</code> 的实现（可能是为了实现上的方便）把这个 <code>CRLF</code> 放在了下一个 <code>chunk</code> 的开头。对于连续的 <code>chunk</code> 来说看起好像没有什么区别，但是在我们的场景中，使用第一个 <code>chunk</code> 来建立连接，建立完成之后才会发信令的 <code>chunk</code>，也就是第一个 <code>chunk</code> 和后续的 <code>chunk</code> 不会连续。然而 <code>Azure</code> 在收到第一个 <code>chunk</code> 后，发现结尾还没有收到 <code>CRLF</code>（虽然此时已经收到了正确长度的数据），然后进入继续等待状态，不会把数据包转发给后台数据服务器，这样后台数据服务器就没法和 <code>downlink</code> 匹配并且建立连接。</p>\n<h2 id=\"Chunked-Transfer-Encoding\"><a href=\"#Chunked-Transfer-Encoding\" class=\"headerlink\" title=\"Chunked Transfer Encoding\"></a>Chunked Transfer Encoding</h2><p>首先根据 <code>HTTP/1.1</code> 的 <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html\">RFC</a> 对于 <code>Chunked Transfer Encoding</code> 规定。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Chunked-Body</span>   <span class=\"string\">=</span> <span class=\"meta\">*chunk</span></span><br><span class=\"line\">                <span class=\"string\">last-chunk</span></span><br><span class=\"line\">                <span class=\"string\">trailer</span></span><br><span class=\"line\">                <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk</span>          <span class=\"string\">=</span> <span class=\"string\">chunk-size</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\">                <span class=\"string\">chunk-data</span> <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk-size</span>     <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"meta\">*HEX</span></span><br><span class=\"line\"><span class=\"string\">last-chunk</span>     <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">*(&quot;0&quot;)</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\"><span class=\"string\">chunk-extension=</span> <span class=\"string\">*(</span> <span class=\"string\">&quot;;&quot;</span> <span class=\"string\">chunk-ext-name</span> [ <span class=\"string\">&quot;=&quot;</span> <span class=\"string\">chunk-ext-val</span> ] <span class=\"string\">)</span></span><br><span class=\"line\"><span class=\"string\">chunk-ext-name</span> <span class=\"string\">=</span> <span class=\"string\">token</span></span><br><span class=\"line\"><span class=\"string\">chunk-ext-val</span>  <span class=\"string\">=</span> <span class=\"string\">token</span> <span class=\"string\">|</span> <span class=\"string\">quoted-string</span></span><br><span class=\"line\"><span class=\"string\">chunk-data</span>     <span class=\"string\">=</span> <span class=\"string\">chunk-size(OCTET)</span></span><br><span class=\"line\"><span class=\"string\">trailer</span>        <span class=\"string\">=</span> <span class=\"string\">*(entity-header</span> <span class=\"string\">CRLF)</span></span><br></pre></td></tr></table></figure>\n\n<p>重点部分为 <code>chunk</code> 的格式，可以看到每一个 <code>chunk</code> 应该由一个 16 进制的 <code>chunk-size</code> 开始，然后接着一个 <code>CRLF</code>，然后是 <code>chunk-data</code>，末尾是一个 <code>CRLF</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">chunk</span>          <span class=\"string\">=</span> <span class=\"string\">chunk-size</span> [ <span class=\"string\">chunk-extension</span> ] <span class=\"string\">CRLF</span></span><br><span class=\"line\">                <span class=\"string\">chunk-data</span> <span class=\"string\">CRLF</span></span><br></pre></td></tr></table></figure>\n\n<p>再看 <code>Cocoa</code> 的实现 <a href=\"https://opensource.apple.com/source/CFNetwork/CFNetwork-128.2/HTTP/CFHTTPFilter.c.auto.html\">CFHTTPFilter.c</a>，虽然它在源码里面也贴了上边 <code>RFC</code> 中的结构，可是它的实现中并不那么回事。看第一行注释就暴露了它的每个 <code>chunk header</code> 中除了 <code>first chunk</code> 之外，其他的都会出现两个 <code>CRLF</code>，其中一个叫做 <code>leading CRLF</code>，也就是开头说的，它是在下一个 <code>chunk</code> 的头部，插入一个 <code>CRLF</code>。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CFIndex &lt;= uint64 so no more than 16 characters to encode + 2 for CRLF + 2 for leading CRLF</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_CHUNK_HEADER_SIZE (20)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> sendChunkHeader(<span class=\"built_in\">CFWriteStreamRef</span> stream, <span class=\"built_in\">CFIndex</span> chunkLength, Boolean firstChunk, <span class=\"built_in\">CFStreamError</span> *error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// hex representation of chunkLength, followed by CRLF</span></span><br><span class=\"line\">    <span class=\"built_in\">UInt8</span> writeBuffer[MAX_CHUNK_HEADER_SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">UInt8</span> *writeBase;</span><br><span class=\"line\">    <span class=\"built_in\">CFIndex</span> bytesWritten;</span><br><span class=\"line\">    error-&gt;error = <span class=\"number\">0</span>;</span><br><span class=\"line\">    writeBuffer[MAX_CHUNK_HEADER_SIZE - <span class=\"number\">1</span>] = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    writeBuffer[MAX_CHUNK_HEADER_SIZE - <span class=\"number\">2</span>] = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">    writeBase = &amp;(writeBuffer[MAX_CHUNK_HEADER_SIZE<span class=\"number\">-3</span>]); </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (chunkLength &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextDigit = chunkLength &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">        *writeBase = nextDigit &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + nextDigit : <span class=\"string\">&#x27;A&#x27;</span> + nextDigit - <span class=\"number\">10</span>;</span><br><span class=\"line\">        writeBase --;</span><br><span class=\"line\">        chunkLength = chunkLength &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstChunk) &#123;</span><br><span class=\"line\">        writeBase ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        *writeBase = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">        writeBase --;</span><br><span class=\"line\">        *writeBase = <span class=\"string\">&#x27;\\r&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (writeBase &lt; writeBuffer + MAX_CHUNK_HEADER_SIZE) &#123;</span><br><span class=\"line\">        bytesWritten = <span class=\"built_in\">CFWriteStreamWrite</span>(stream, writeBase, writeBuffer + MAX_CHUNK_HEADER_SIZE - writeBase);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytesWritten &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            *error = <span class=\"built_in\">CFWriteStreamGetError</span>(stream);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bytesWritten == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Premature EOF; can we come up with a better error code?</span></span><br><span class=\"line\">            error-&gt;domain = kCFStreamErrorDomainHTTP;</span><br><span class=\"line\">            error-&gt;error = kCFStreamErrorHTTPParseFailure;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            writeBase += bytesWritten;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>合理的样子是</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_1\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_2\\r\\n</span></span><br></pre></td></tr></table></figure>\n\n<p>而 <code>Cocoa</code> 是这样子的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_1</span></span><br><span class=\"line\"><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">7</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Chunk_2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>既然 <code>Cocoa</code> 的实现不符合 <code>Azure</code> 的要求，那么有没有办法来 <strong>绕过</strong> 一下呢？既能让 <code>Azure</code> 转发第一个 <code>chunk</code>，也能让后端数据服务器正确识别。</p>\n<h3 id=\"自己添加一个-CRLF\"><a href=\"#自己添加一个-CRLF\" class=\"headerlink\" title=\"自己添加一个 CRLF\"></a>自己添加一个 CRLF</h3><p>既然 <code>Azure</code> 会等待 <code>CRLF</code>，那么在第一个 <code>chunk</code> 结尾多加一个 <code>CRLF</code> 行不行？肯定不行，因为 <code>CRLF</code> 是不算在 <code>chunk-size</code> 里面的。并且会导致下一个 <code>chunk</code> 到来的时候，出现连续的 <code>CRLFCRLF</code>，虽然按要求最后一个 <code>chunk</code> 是 <code>0CRLFCRLF</code>，但有些服务器会兼容只有 <code>CRLFCRLF</code> 的情况。</p>\n<h3 id=\"多发一个-chunk\"><a href=\"#多发一个-chunk\" class=\"headerlink\" title=\"多发一个 chunk\"></a>多发一个 chunk</h3><p>不能多加一个 <code>CRLF</code>，那么我们在建立 <code>name_channel</code> 的时候，多发一个 <code>chunk</code>，那么 <code>Azure</code> 收到的数据将会是这样的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">C\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">name_channel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">OK</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的格式是为了方便区分两个 <code>chunk</code>，其实真正的数据是没有换行的，因为已经把 <code>\\r\\n</code> 写出来了。换一个写法。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">C\\r\\nname_channel\\r\\n2\\r\\nOK</span></span><br></pre></td></tr></table></figure>\n\n<p>那么 <code>Azure</code> 收到这样的数据包之后，就会认为第一个 <code>chunk</code> （<code>C\\r\\nname_channel\\r\\n</code>）已经完整收到了，但第二个 <code>chunk</code> 还需要等待最后的 <code>CRLF</code>。这时 <code>Azure</code> 就会将 <code>name_channel</code> 这个 <code>chunk</code> 转发给后台服务器，然后就能正常的建立起连接了。当然后天服务器需要处理多发的那个包。</p>\n<p>后续信令的 <code>chunk</code> 还需不需要每次都多发一个 <code>chunk</code>？在我们的场景中不需要也没有什么影响，因为后续的信令，是源源不断的发送出去的，所以不会出现等待下一个包的情况。即使是用户没有操作了，那么也会有心跳包，和 <code>ack</code> 的包，唯一影响的是后台服务器收到最后一个 <code>ack</code> 包的时间间隔会长一点。</p>\n<h3 id=\"libcurl\"><a href=\"#libcurl\" class=\"headerlink\" title=\"libcurl\"></a>libcurl</h3><p>这个方案很简单，因为 <code>libcurl</code> 的实现，是跟我们预想中的那样的，每个 <code>chunk</code> 结尾都是一个 <code>CRLF</code>。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>A 和 B 在一起没问题，B 和 C 在一起没问题，C 和 A 在一起也没问题，但当 A 和 C 在一起的时候，出现了问题，并不能说明这是 A 的问题或者说是 C 的问题。</p>\n<p>在测试环境中，上面多发一个 <code>chunk</code> 的方式是没有任何问题的。但是当部署到线上环境时，问题依然存在，后台服务器依然收不到请求包。除了一个是 <code>http</code> 一个是 <code>https</code> 之外，各种配置完全一样，<code>Azure CDN</code> 没法调试也没有日志可以打，这个问题暂时没有办法解决。</p>\n<p>绝望之余，我看到了一种叫做 <a href=\"https://en.wikipedia.org/wiki/HTTP_request_smuggling\">HTTP request smuggling - Wikipedia</a> 的攻击手段，能给绕过 <code>Azure</code> 不能转发的问题。</p>\n"},{"title":"Parser Combinator","date":"2017-05-28T12:00:00.000Z","_content":"解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。\n\n## Parser\n\n将一个数据流解析成结构化的数据的工具，我们称为解析器。比如我们需要将用户输入的表达式字符串解析成 AST，我们就可以使用解析器来达到我们的目的。\n\n`( 4 + 3  )` 就是一个表达式语句，它由字符 `(`  `4` `空格` `+` `3` 和 `)` 组成。我们可以将这个表达式解析成一种 *表达式树* (AST 的一种)。\n\n所以我们的解析器简单的用一个函数来描述就是：\n`func parser(_ string: String) -> AST`\n\n我们不是用正则表达式来解析输入的表达式字符串，为了得到表达式树里面的节点，我们需要一步步的解析，每次解析得到不同的节点。所以我们需要将解析器的定义变成解析成功的话，会返回结果值和剩下的字符串。\n\n`func parser(_ string: String) -> (AST, String)`\n\n表达式树的节点都是一些 `4` `+` 这种不同类型的数据，所以为了表示解析 `4` 成功和解析 `+` 成功，我们的返回值可以定义为泛型。并且表达出解析失败的情况，我们可以使用可选值。最终解析器函数就变成了：\n\n`func parser<T>(_ string: String) -> (T, String)?`\n\n所以解析第一个数字 4 的解析器函数为：\n\n```swift\nfunc parser(_ string: String) -> (Int, String)? {\n    guard let head = string.characters.first, head == \"4\" else {\n        return nil\n    }\n    return Optional.some((4, String(string.characters.dropFirst())))\n}\n```\n\n## Combinator\n\n> One of the distinguishing features of functional programming is the widespread use of combinators to construct programs. *A combinator is a function which builds program fragments from program fragments*; in a sense the programmer using combinators constructs much of the desired program automatically, rather that writing every detail by hand. -- John Hughes\n\n其实 Combinator 很容易理解，就像字面意思那样 —— 组合子。首先定义一系列原子操作，然后定义组合的规则，然后根据组合的规则把这些原子操作组合起来。\n\n## Parser Combinator\n\n回到开头的话：*解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。* 所以我们需要重新定义一下我们的解析器，把它变成一个解析组合子。\n\n```swift\nstruct Parser<A> {\n    let parse: (String) -> (A, String)?\n    // (input) -> (result, remaining)\n}\n```\n\n这是一个解析字符串的解析器，我们把这个函数放到一个结构体 `Parser` 中，作为一个 `parse` 变量。当然我们也可以用类型别名 `typealias Parser<Result> = (String) -> (Result, String)?`。\n\n当然解析组合子不仅仅能解析字符串，所以可以用泛型来把它变得更通用。\n\n```swift\nstruct Parser<I, O> {\n    let parse: (I) -> (O, I)?\n    // (input) -> (output, remaining input)\n}\n```\n\n所以解析数字字符 `4` 的解析器就变成了：\n\n```swift\nfunc character4() -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, head == \"4\" else {\n            return nil\n        }\n        return (\"4\", String(input.characters.dropFirst()))\n    }\n}\n```\n\n所以根据 `func character4() -> Parser<Character>` 很容易得到一个能够解析任何字符的解析器：\n\n```swift\nfunc character(_ character: Character) -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, head == character else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n根据 `character` 和 `digit` 的区别，很容易又得到能够解析任何数字的解析器：\n\n```swift\nfunc digit() -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, \"0\"...\"9\" ~= head else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n根据 `character` 和 `digit` 相同和不同，我们可以进一步抽象，把相同部分进行封装，把不同部分作为参数，得到新的解析器：\n\n```swift\nfunc satisfy(_ condition: @escaping (Character) -> Bool) -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, condition(head) else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n所以解析数字：\n\n`(satisfy { \"0\"...\"9\" ~= $0 }).parse(\"1abc\")`\n\n解析空格：\n\n```swift\nfunc isSpace(_ character: Character) -> Bool {\n    return String(character).trimmingCharacters(in: .whitespacesAndNewlines).isEmpty\n}\n(satisfy(isSpace)).parse(\" abc\")\n```\n\n所以我们只需要给 `satisfy` 函数传入一个是否属于 X 的函数，就可以得到一个能够解析 x 的解析器。\n\n## Next\n\n最基本的 `character` 有了，`digit` 有了，当我们需要解析一个字符串 `alex` 的时候，我们只需要把 `alex` 看成 `a` `l` `e` `x` 4 个字符，然后不断的用 `character` 进行解析，最后把每一步返回的结果合并起来就行了。考虑到解析一个字符串是一个基本功能，为了不用每次写重复的代码，把它封装成用来解析 `string` 的解析器。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    let parsers = str.characters.map { character($0) }\n    return Parser { input in\n        var results: [Character] = []\n        var stream = input\n        for parser in parsers {\n            guard let (result, remainder) = parser.parse(stream) {\n                return nil\n            }\n            results.append(result)\n            stream = remainder\n        }\n        return (String(results), stream)\n    }\n}\n```\n\n观察 parse 函数类型 `(String) -> (A, String)`，解析成功的返回值是解析结果和 **剩余** 的字符串，所以解析 `alex` 的时候：\n\n1. \"alex\": 'a' -> ('a', \"lex\")\n2. \"lex\": 'l' -> ('l', \"ex\")\n3. \"ex\": 'e' -> ('e', \"x\")\n4. \"x\": 'x' -> ('x', \"\")\n5. Parser<\"alex\">\n\n可以看到这几步做的事情除了参数不一样，内部逻辑是一样的，而且很容易看出是一个递归的过程，**每次解析成功就 `吃掉` 第一个字符**（留意这句话），然后解析剩下的字符串。\n\n所以我们写一个递归的版本：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    return Parser { input in\n        guard let (head, tail) = uncons(str.characters) else {\n            // 0. 把空字符解析器去解析任何字符串，都认为是解析成功\n            return (\"\", input)\n        }\n        // 1. 先解析第一个字符\n        guard let (_, remainder1) = character(head).parse(input) else {\n            return nil\n        }\n        // 2. 然后解析剩下的所有\n        guard let (_, remainder2) = string1(String(tail)).parse(remainder1) else {\n            return nil\n        }\n        // 3. 返回(\"结果\", \"剩余的字符串\")\n        return (str, remainder2)\n    }\n}\n\nfunc uncons<C: Collection>(_ xs: C) -> (C.Iterator.Element, C.SubSequence)? {\n    guard let head = xs.first else {\n        return nil\n    }\n    return (head, xs.suffix(from: xs.index(after: xs.startIndex)))\n}\n```\n\n观察 1 和 2，在这两步中，我们都没有使用解析的 **结果**，这两步实现的仅仅是 **每次解析成功就 `吃掉` 结果**！最后在第 3 步一次将结果返回。也就是说我们 1 和 2 这两本并不关心结果，只关心这些要解析道字符存在就行了。\n\n我们把解析成功吃掉结果这一步封装一下：\n\n```swift\nfunc discarding<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (_, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留右边的解析器的结果 result2，没有 result1\n        return (result2, remainder2)\n    }\n}\n```\n\n`discarding` 函数会 **吃掉** 左边第一个参数 `x` 的解析结果，返回值中只保留右边 `y` 的解析结果。用 `discarding` 函数重写一下上面的 `string` 函数：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    return Parser { input in\n        guard let (head, tail) = uncons(str.characters) else {\n            // 把空字符解析器去解析任何字符串，都认为是解析成功\n            return (\"\", input)\n        }\n        // 1 吃掉 character(head) 的结果\n        guard let (_, remainder) = discarding(character(head), string2(String(tail))).parse(input) else {\n            return nil\n        }\n        // 2 返回 (\"结果\", \"剩余的字符串\")\n        return (str, remainder)\n    }\n}\n```\n\n这次改版的 `string` 里面第 1 步中的解析结果还是被忽略了，所以是否可以继续用 `discarding` 来简化？但是 `discarding` 函数需要两个解析器，但函数内只有 `lift` 返回的一个解析器，所以没办法继续简化了？\n\n仔细看 `string` 函数体的第一行 `return Parser {}` 就是一个解析器，能否把这个解析器利用上呢？`discarding` 是在 `Parser {}` 里面的，所以只要能想办法把它展平，那么就能再次利用上 `lift`，而且展平后的解析器需要做为 `string` 函数的返回值，所以它肯定是做为 `discarding` 的右边的参数。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    let lhs = Parser {}\n    let rhs = Parser<String> {}\n    return lift(x, y)\n}\n```\n\n根据第 2 步的 `return (str, remainder)` 可以知道，最终的返回结果是 `(输入的，lhs 吃剩的)`，所以很容易得到 `let rhs = Parser<String> { (str, $0) }`。所以可以推出 lhs 要做的只是负责吃掉一部分。也就是上面的第 1 步所做的。所以：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return (\"\", input)\n    }\n    // 2 吃掉\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3 结果和剩下的\n    let rhs = Parser<String> { (str, $0) }\n    // 4 返回\n    return discarding(lhs, rhs)\n}\n```\n\n函数的返回值是 `Parser`，由于外面没有 Parser {} ，展开后 1 那里需要返回一个 `Parser`。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return Parser<String> { (\"\", $0) }\n    }\n    // 2\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3\n    let rhs = Parser<String> { (str, $0) }\n    // 4\n    return discarding(lhs, rhs)\n}\n```\n\n明眼人可以看到 1 和 3 只有 `\"\"` 和 `str` 不一样，剩下的一模一样，虽然代码不长，但我们还是把它相同部分封装成一个函数，然后把不同的部分做为参赛。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return pure(\"\")\n    }\n    // 2\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3\n    let rhs = pure(str)\n    // 4\n    return discarding(lhs, rhs)\n}\n\n// Lift a value\nfunc pure<A>(_ x: A) -> Parser<A> {\n    return Parser<A> { (x, $0) }\n}\n```\n\n所以封装一个简洁的 `string` 解析器，花了很多功夫，但抛开性能，它比迭代的版本更简洁易懂。\n\n## Combine\n\n观察表达式 `( 4 + 3  )`，里面 `(` 和 `4` 之间有 1 个空格，数字 `3` 和 `)` 中间是有 2 个空格，在做加法运算的时候，这些 *many* 个空格是没有意义的，所以需要 *skip* 掉。\n\n#### Many\n\n首先需要解析空格的解析器，前面已经有实现过：\n\n```swift\nfunc space() -> Parser<Character> {\n    return satisfy(isSpace)\n}\n```\n\n由于空格数量未知，可能有 *many* 个，假如有一个解析器，能够解析 *many* 个 parser。用一个 loop 不断去解析就能实现：\n\n```swift\nfunc many<A>(_ x: Parser<A>) -> Parser<[A]> {\n    return Parser { input in\n        var results: [A] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (results, stream)\n    }\n}\n```\n\n任意个空格就是：\n\n```swift\nfunc spaces() -> Parser<[Character]> {\n    return many(space())\n}\n```\n\n`spaces` 得到的是一个 `Parser<[Character]>` 类型的 parser，但是按照理解更希望得到一个 `Parser<String>` 类型的 parser。在 Swift 中，`String([Character])` 就能够将 `[Character]` 拍扁成 `String` 类型。所以把 `many` 稍微修改一下：\n\n```swift\nfunc many<Character>(_ x: Parser<Character>) -> Parser<String> {\n    return Parser { input in\n        var results: [Character] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (String(results), stream)\n    }\n}\n```\n\n因为不是任何泛型 A 类型，都能用 String 拍扁，也不一定能通过其他类型进行拍扁，所以这里把泛型 A 去掉，直接用 Character 代替。但是这样做并不理想，因为 `many` 解析器从一个泛型解析器，变成了一个只能解析 Character 类型的解析器，变成了 `manyCharacter`。后面考虑解析这个问题，重新把 `many` 变成通用的解析器。\n\n#### Skip\n\n接着实现一个通用的 `skip` 解析器，它要做的事情很简单，输入什么吃掉什么，返回剩下的，和上面吃掉左边的 `discarding` 很像，不一样的是 `skip` 只有一个参数。\n\n```swift\nfunc skip<A>(_ x: Parser<A>) -> Parser<Void> {\n    return Parser { input in\n        guard let (_, remainder) = x.parse(input) else {\n            return ((), input)\n        }\n        \n        return ((), remainder)\n    }\n}\n```\n\n把 `skip` 和 `spaces` 进行组合：\n\n```swift\nfunc skipSpaces() -> Parser<Void> {\n    return skip(spaces)\n}\n```\n\n#### Many1\n\n前面实现的 `digit` 解析器，它只能解析个位数，这是没有什么卵用的。相比 `digit`，更加需要的是一个 `number` 解析器。一个 *number* 实际上也是由 *many* 个 *digit* 组成。\n\n```swift\nfunc number() -> Parser<[Character]> {\n    return many(digit())\n}\n\nnumber().parse(\"123abc\") // ([\"1\", \"2\", \"3\"], \"abc\")\nnumber().parse(\"abc\") // ([], \"abc\")\n```\n\n等等！`number().parse(\"abc\")` 也解析成功了，结果是空数组。这并不是想要的结果，一个 *string* 可以是空的，*space* 甚至也可以是空的，但一个 *number* 不能是空的。所以需要另外一个只是有一个的 `many`。这其实很常见，比如正则表达式中有 `*` 和 `+`，一个 {0, +} 一个是 {1, +}。\n\n```swift\nfunc many1<A>(_ x: Parser<A>) -> Parser<[A]> {\n    return Parser { input in\n        // 多加一个判断，第一个值必须满足条件\n        guard let (_, _) = x.parse(input) else {\n            return nil\n        }\n        var results: [A] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (results, stream)\n    }\n}\n```\n\n所以正确的 `number` 解析器就变成：\n\n```swift\nfunc number() -> Parser<[Character]> {\n    return many1(digit())\n}\n```\n\n这里 `number` 解析器和 `spaces` 解析器遇到了同样的问题，`number` 解析器的结果应该是 `Int`（暂不考虑浮点数），而不是 `[Character]`。解决方法可以类似 `manyCharacter`，但是这显示是很有问题的，抽象抽象抽象！\n\n程序员要有抽象思维，要学会用更高的层次的思维去看待问题，发现不同问题的共同点。`[Character]` 可以用 `String([Character])` 变成一个 `String`。对于 `digit` character，同样的也是用 `String([Character])` 拍扁，然后用 `Int(String)` 得到一个 `number`。\n\n结合 Swift 的 OOP（面向协议编程），可以定义一个协议，暂且叫做 `Combinable` :D\n\n```swift\nprotocol Combinable {\n    static func combine(_ xs: [Character]) -> Self\n}\n\nextension Int: Combinable {\n    \n    static func combine(_ xs: [Character]) -> Int {\n        return Int(String(describing: xs))!\n    }\n}\n\nextension String: Combinable {\n    static func combine(_ xs: [Character]) -> String {\n        return String(describing: xs)\n    }\n}\n\nfunc many1<A: Combinable>(_ x: Parser<Character>) -> Parser<A> {\n    return Parser { input in\n        guard let (_, _) = x.parse(input) else {\n            return nil\n        }\n        var results: [Character] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (A.combine(results), stream)\n    }\n}\n```\n\n然后就可以得到：\n\n```swift\nfunc number() -> Parser<Int> {\n    return many1(digit())\n}\n\nfunc spaces() -> Parser<String> {\n    return many1(space()) // 忽略 spaces 可以为空的情况\n}\n```\n\n实际上 `skipSpaces` 还可以用另外一个角度来拆分，上面先解析 *many* 个空格，然后一次 *skip* 掉。还可以每次 *skip* 一个空格，然后进行 *many* 次。不同的地方是 `skip` 和 `many` 两个 parser 的调用次序不一样，甚至还可以定义一个叫做 `skipMany` 的解析器，这也说明了 **Combinator** 的强大。通过定义一系列基础的 parser，进行不同的排列组合操作，最后覆盖所有的 case。（理想状态\n\n#### Zip\n\n合并两个 parser 的解析器 `zip` 的实现也很简单：\n\n```swift\nfunc zip<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<(A, B)> {\n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        return ((result1, result2), remainder2)\n    }\n}\n```\n\n#### Choice\n\n接下来还需要解析几个简单的一元运算符 `+` `-` `*` `/`。去掉空格后，两个数中间必须是其中一个运算符那么表达式就是合法的。\n\n```swift\nfunc opt() -> Parser<Character> {\n    let opts = [\"+\", \"-\", \"*\", \"/\"].map { character($0.characters.first!) }\n    return choice(opts)\n}\n```\n\n```swift\n// 也可以叫 one(of:)\nfunc choice<A, S: Sequence>(_ xs: S) -> Parser<A> where S.Iterator.Element == Parser<A> {\n    return xs.reduce(empty(), { $0 <|> $1 })\n}\n\nfunc empty<A>() -> Parser<A> {\n    return Parser { _ in nil }\n}\n```\n\n## Transform\n\n上面利用 Protocol 实现的 `number` 和 `space` 解析器其实并不是很优雅，费了很大劲把 `many` 变得 ~~通用~~，结果却并不是很 **通用**，因为要求结果的类型必须实现 `Combinable` 协议。但它做的工作却很少，只是把传入的 `Parser<A>` 循环解析得到的结果 `[A]` 在 `many` **内部** 组合成最终的类型，实现把 `Parser<[A]` 转换为 `Parser<B>`。正由于它是在 `many` 内部做的操作，所以依赖于传入的类型，使得 `many` 不再那么通用。\n\n再看 `func character(_ character: Character) -> Parser<Character>` 的定义，假如调用 `character(\"4\")`，那么返回的是一个 `Parser<Character>` 类型的解析器，这个解析器调用 `parse` 方法，返回的结果是 `Character` 类型的值。在解析表达式 `4 + 3` 的时候，需要将解析到的 `4` 和 `3` 当作一个整数然后相加，才能得到最终的结果，所以不想要 `Character` 类型的值，而是想要 `Int` 类型的值，那么需要将 `Parser<Character>` 转换为 `Parser<Int>` 解析器。\n\n所以，假如能实现一个函数，可以将任意 `Parser<A>` 转换为 `Parser<B>` 解析器，就完美了。`many` 只负责将 `Parser<A>` 解析得到 `Parser<[A]>`，然后由 `number` 自己将 `Parser<[A]>` 转换为 `Parser<Int>`。\n\n### Functor\n\n回忆 Swift 中 Optional 类型中的 map 方法：\n\n```swift\nlet a: Optional<Int> = 1\nlet b: Optional<String> = a.map { String($0) }\n```\n\n它将一个 `Optional<Int>` 转换为 `Optional<String>`，仔细一看，把 `Optional` 换成 `Parser`，就是我们所需要的转换解析器的方法。\n\n`Optional` 的函数签名是 `func map<U>(_ transform: (Wrapped) -> U) -> U?`，所以依葫芦画瓢，我们可以得到：\n\n```swift\nstruct Parser<A> {\n    func map<B>(_ transform: (A) -> B) -> Parser<B> {\n        return Parser { input in\n            guard let (result, remainder) = self.parse(input) else { return nil }\n            return (transform(result), remainder)\n        }\n    }\n}\n```\n\n像上面的 `satisfy` 和其他函数一样，把 `map` 方法从结构图内移出来，则得到：\n\n```swift\nfunc map<A, B>(_ x: Parser<A>, _ f: @escaping (A) -> B) -> Parser<B> {\n    return Parser { input in\n        guard let (result, remainder) = x.parse(input)else {\n            return nil\n        }\n        return (f(result), remainder)\n    }\n}\n```\n\n由于值是在 `Parser` 中包裹着的，想把返回的 `Parser<Character` 变成 `Parser<Int>`，需要把 `Parser<Character>` 解开取出里面<Character>的值，然后把它变成<Int>类型，然后重现包装起来。对于不同的类型转换，解包重新包装的步骤是一样的，不同的地方是把结果从一种类型变成另一种类型，函数的作用就是把相同的封装起来，把不同做为参赛传进去，所以在 `map` 函数的实现中，只需要在返回前，给外部将这个结果进行一次转换机会，所以需要一个参赛，能够将解开后得到的值变成另一种类型的值，也就是提供一个函数 `(Character) -> Int`。\n\n重新实现 `number` 和 `spaces`：\n\n```swift\nfunc number() -> Parser<Int> {\n    return map(many1(digit()), { Int(String($0))! })\n}\n\nfunc spaces() -> Parser<String> {\n    return map(many(space()), { String($0) })\n}\n```\n\n两种不同的结构体 `Optional<T>` 和 `Parser<A>`，都可以给它实现一个 `map` 方法，使得它变成一个不同类型的结构体。而支持这种 `map` 方法的结构体，我们称把它为 `Functor`。\n\n> 简单来说，所谓的 `Functor` 就是可以把一个函数应用于一个 **封装过的值** 上，得到一个新的 **封装过的值**\n\n`Functor` 最早出自于代数拓扑，这里说的 `Functor` 一般是指范畴论（Category Theory）中的 `Functor`，它被用来描述各种范畴间的关系。更多 Functor 的理解 [Group Theory and Category Theory](http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/)。\n\n### Applicative\n\n```swift\nfunc pure<A>(_ x: A) -> Parser<A> {\n    return Parser<A> { (x, $0) }\n}\n```\n\n实际上前面的 `pure` 和 `discarding` 函数就是一种 Applicative。像 `discarding` 一样有时候只关心这些要解析道字符存在就行了，上面定义的 `discarding` 解析器作用是忽略第一个 parser 参数的解析结果，同样地，可以定义一个忽略第二个 parser 参数的解析器。比如当解析出现在右边的 symbol 的时候就很有用，`discarding2(parser, string(\")\"))` 的作用就是确保存在闭合的右括号 \")\"。\n\n```swift\n/// 吃掉右边的结果\nfunc discarding2<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (_, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留左边的解析器的结果 result1，没有 result2\n        return (result1, remainder2)\n    }\n}\n```\n\n```swift\n/// 吃掉左边的结果\nfunc discarding1<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (_, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留右边的解析器的结果 result2，没有 result1\n        return (result2, remainder2)\n    }\n}\n```\n\n这两个 `discarding` 函数长的很像，如果有办法把它们抽象一下，把相似的地方提取出来就好了。\n\n对于两个结果，忽略其中一个，实际上很简单：\n\n```swift\n/// 忽略 B\nfunc f<A, B>(_ a: A, _ b: B) -> A {\n    return a\n}\n```\n\n```swift\n/// 忽略 A\nfunc f<A, B>(_ a: A, _ b: B) -> B {\n    return b\n}\n```\n\n```swift\n/// 吃掉左边的结果\nfunc left<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    \n    func discarding<A, B>(_ a: A, _ b: B) -> A {\n        return b\n    }\n    \n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        return (discarding(result1, result2), remainder2)\n    }\n}\n```\n\n然后这个函数并没有卵用。\n\n### Monad\n\n观看 `map` 函数 `func map<A, B>(_ x: Parser<A>, _ f: (A) -> B) -> Parser<B>`\n\n它要求传入两个参数，一个是 `Parser<A>`，一个是函数 `A -> B`，第二个参数对标题中的 **Combinator** 并不是很友好，**Parser Combinator** 的思想是组合一系列的 `Parser` 得到结果。上面定义了有很多小的 parser，比如 `func string(_ str: String) -> Parser<String>`，函数签名是 `(String) -> Parser<String>`，由于 `map` 函数的第二个参数的签名是 `(A) -> B`，而非 `(A) -> Parser<B>`，所以假如存在一个与 `map` 功能相似，但第二个参数的签名是 `(A) -> Parser<B>`，则能够使得之前定义的很多小的 `parser` 能够直接作为一个参数，直接得到一个新类型的 `Parser`，大概这样：\n\n```swift\nfunc flatMap<A, B>(_ x: Parser<A>, _ f: (A) -> Parser<B>) -> Parser<B>\n```\n\n使用的时候：\n\n```swift\nlet parser = flatMap(stringParser, string(\"alex\"))\n```\n\n具体实现与 `map` 也很像：\n\n```swift\nfunc flatMap<A, B>(_ x: Parser<A>, _ f: @escaping (A) -> Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (result, remainder) = x.parse(input)else {\n            return nil\n        }\n        return f(result).parse(remainder)\n    }\n}\n```\n\n[Group Theory and Category Theory](http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/)\n\n### Alternative\n\n```swift\nfunc empty<A>() -> Parser<A> {\n    return Parser { _ in nil }\n}\n```\n\n```swift\nfunc choice<A>(_ x: Parser<A>, _ y: Parser<A>) -> Parser<A> {\n    return Parser { input in\n        return x.parse(input) ?? y.parse(input)\n    }\n}\n```\n\nAlternative 类似于 `Swift Standard Library` 中定义的运算符 `??`，它有两个同类型的参数，第一个参数是偏爱的 `parser`，第二个参数是默认的 `parser`。它首先尝试使用第一个 `parser` 来进行解析，如果成功，则返回。如果不成功，则使用默认的 `parser` 进行解析。它的返回值类型也是同类型的 `Parser`。\n\n作用是假如有 Int, String, Bool 三个类型的 `parser`，而一个 scalar 类型的 `parser` 只要能够解析 Int, String, Bool 任意一种类型，则算解析成功。换句话说就是 scalar 是 Int, String, Bool 的父集。一种简单的从 `Parser<Int>`, `Parser<String>`, `Parser<Bool>` 三种已有实现的 parser 得到 `Parser<Scalar>` 的方法是逐个进行 parse，如果成功则马上返回。\n\n```swift\nlet scalar = parserInt <|> parserString <|> parserBool\n```\n\n从这个例子看有点 one of 的意思，但实际上更加准确的说法是 choice。\n\n### Applicative & Monad\n\nApplicative 和 Monad 的区别在于：\n\nApplicative 的两个 parser 是相互独立的，组合后的新 parser 是可以静态分析其行为的。而对于 Monad，在不知道输入的情况下，是不能确定其行为，也就是说 Monad 是依赖于计算结果。\n\n```swift\nfunc alex(_ x: Parser<String>) -> Bool {\n    if let (_, _) = x.parse(\"alex.huo\") {\n        return true\n    }\n    return false\n}\n\nlet af: Parser<(String) -> String> = pure(id)\nlet ax = string(\"alex\")\nalex(af <*> ax) // true\n\nlet mf: (String) -> Parser<String> = { string($0) }\nlet mx = string(\"alex\")\nalex(mx >>- mf) // false\n```\n\n## Ref\n\n[Jiffy](https://github.com/hlian/jiffy)\n[Parser combinators](https://news.realm.io/news/tryswift-yasuhiro-inami-parser-combinator/)\n[Monadic Parser Combinators](http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf)\n\n\n","source":"_posts/parser-combinator.md","raw":"---\ntitle: Parser Combinator\ndate: 2017-05-28 20:00:00\ntags:\n\t- parser\n\t- parser combinator\n\t- monad\n\t- functional programming\n\t- swift\ncategories: functional programming\n---\n解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。\n\n## Parser\n\n将一个数据流解析成结构化的数据的工具，我们称为解析器。比如我们需要将用户输入的表达式字符串解析成 AST，我们就可以使用解析器来达到我们的目的。\n\n`( 4 + 3  )` 就是一个表达式语句，它由字符 `(`  `4` `空格` `+` `3` 和 `)` 组成。我们可以将这个表达式解析成一种 *表达式树* (AST 的一种)。\n\n所以我们的解析器简单的用一个函数来描述就是：\n`func parser(_ string: String) -> AST`\n\n我们不是用正则表达式来解析输入的表达式字符串，为了得到表达式树里面的节点，我们需要一步步的解析，每次解析得到不同的节点。所以我们需要将解析器的定义变成解析成功的话，会返回结果值和剩下的字符串。\n\n`func parser(_ string: String) -> (AST, String)`\n\n表达式树的节点都是一些 `4` `+` 这种不同类型的数据，所以为了表示解析 `4` 成功和解析 `+` 成功，我们的返回值可以定义为泛型。并且表达出解析失败的情况，我们可以使用可选值。最终解析器函数就变成了：\n\n`func parser<T>(_ string: String) -> (T, String)?`\n\n所以解析第一个数字 4 的解析器函数为：\n\n```swift\nfunc parser(_ string: String) -> (Int, String)? {\n    guard let head = string.characters.first, head == \"4\" else {\n        return nil\n    }\n    return Optional.some((4, String(string.characters.dropFirst())))\n}\n```\n\n## Combinator\n\n> One of the distinguishing features of functional programming is the widespread use of combinators to construct programs. *A combinator is a function which builds program fragments from program fragments*; in a sense the programmer using combinators constructs much of the desired program automatically, rather that writing every detail by hand. -- John Hughes\n\n其实 Combinator 很容易理解，就像字面意思那样 —— 组合子。首先定义一系列原子操作，然后定义组合的规则，然后根据组合的规则把这些原子操作组合起来。\n\n## Parser Combinator\n\n回到开头的话：*解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。* 所以我们需要重新定义一下我们的解析器，把它变成一个解析组合子。\n\n```swift\nstruct Parser<A> {\n    let parse: (String) -> (A, String)?\n    // (input) -> (result, remaining)\n}\n```\n\n这是一个解析字符串的解析器，我们把这个函数放到一个结构体 `Parser` 中，作为一个 `parse` 变量。当然我们也可以用类型别名 `typealias Parser<Result> = (String) -> (Result, String)?`。\n\n当然解析组合子不仅仅能解析字符串，所以可以用泛型来把它变得更通用。\n\n```swift\nstruct Parser<I, O> {\n    let parse: (I) -> (O, I)?\n    // (input) -> (output, remaining input)\n}\n```\n\n所以解析数字字符 `4` 的解析器就变成了：\n\n```swift\nfunc character4() -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, head == \"4\" else {\n            return nil\n        }\n        return (\"4\", String(input.characters.dropFirst()))\n    }\n}\n```\n\n所以根据 `func character4() -> Parser<Character>` 很容易得到一个能够解析任何字符的解析器：\n\n```swift\nfunc character(_ character: Character) -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, head == character else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n根据 `character` 和 `digit` 的区别，很容易又得到能够解析任何数字的解析器：\n\n```swift\nfunc digit() -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, \"0\"...\"9\" ~= head else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n根据 `character` 和 `digit` 相同和不同，我们可以进一步抽象，把相同部分进行封装，把不同部分作为参数，得到新的解析器：\n\n```swift\nfunc satisfy(_ condition: @escaping (Character) -> Bool) -> Parser<Character> {\n    return Parser { input in\n        guard let head = input.characters.first, condition(head) else {\n            return nil\n        }\n        return (head, String(input.characters.dropFirst()))\n    }\n}\n```\n\n所以解析数字：\n\n`(satisfy { \"0\"...\"9\" ~= $0 }).parse(\"1abc\")`\n\n解析空格：\n\n```swift\nfunc isSpace(_ character: Character) -> Bool {\n    return String(character).trimmingCharacters(in: .whitespacesAndNewlines).isEmpty\n}\n(satisfy(isSpace)).parse(\" abc\")\n```\n\n所以我们只需要给 `satisfy` 函数传入一个是否属于 X 的函数，就可以得到一个能够解析 x 的解析器。\n\n## Next\n\n最基本的 `character` 有了，`digit` 有了，当我们需要解析一个字符串 `alex` 的时候，我们只需要把 `alex` 看成 `a` `l` `e` `x` 4 个字符，然后不断的用 `character` 进行解析，最后把每一步返回的结果合并起来就行了。考虑到解析一个字符串是一个基本功能，为了不用每次写重复的代码，把它封装成用来解析 `string` 的解析器。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    let parsers = str.characters.map { character($0) }\n    return Parser { input in\n        var results: [Character] = []\n        var stream = input\n        for parser in parsers {\n            guard let (result, remainder) = parser.parse(stream) {\n                return nil\n            }\n            results.append(result)\n            stream = remainder\n        }\n        return (String(results), stream)\n    }\n}\n```\n\n观察 parse 函数类型 `(String) -> (A, String)`，解析成功的返回值是解析结果和 **剩余** 的字符串，所以解析 `alex` 的时候：\n\n1. \"alex\": 'a' -> ('a', \"lex\")\n2. \"lex\": 'l' -> ('l', \"ex\")\n3. \"ex\": 'e' -> ('e', \"x\")\n4. \"x\": 'x' -> ('x', \"\")\n5. Parser<\"alex\">\n\n可以看到这几步做的事情除了参数不一样，内部逻辑是一样的，而且很容易看出是一个递归的过程，**每次解析成功就 `吃掉` 第一个字符**（留意这句话），然后解析剩下的字符串。\n\n所以我们写一个递归的版本：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    return Parser { input in\n        guard let (head, tail) = uncons(str.characters) else {\n            // 0. 把空字符解析器去解析任何字符串，都认为是解析成功\n            return (\"\", input)\n        }\n        // 1. 先解析第一个字符\n        guard let (_, remainder1) = character(head).parse(input) else {\n            return nil\n        }\n        // 2. 然后解析剩下的所有\n        guard let (_, remainder2) = string1(String(tail)).parse(remainder1) else {\n            return nil\n        }\n        // 3. 返回(\"结果\", \"剩余的字符串\")\n        return (str, remainder2)\n    }\n}\n\nfunc uncons<C: Collection>(_ xs: C) -> (C.Iterator.Element, C.SubSequence)? {\n    guard let head = xs.first else {\n        return nil\n    }\n    return (head, xs.suffix(from: xs.index(after: xs.startIndex)))\n}\n```\n\n观察 1 和 2，在这两步中，我们都没有使用解析的 **结果**，这两步实现的仅仅是 **每次解析成功就 `吃掉` 结果**！最后在第 3 步一次将结果返回。也就是说我们 1 和 2 这两本并不关心结果，只关心这些要解析道字符存在就行了。\n\n我们把解析成功吃掉结果这一步封装一下：\n\n```swift\nfunc discarding<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (_, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留右边的解析器的结果 result2，没有 result1\n        return (result2, remainder2)\n    }\n}\n```\n\n`discarding` 函数会 **吃掉** 左边第一个参数 `x` 的解析结果，返回值中只保留右边 `y` 的解析结果。用 `discarding` 函数重写一下上面的 `string` 函数：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    return Parser { input in\n        guard let (head, tail) = uncons(str.characters) else {\n            // 把空字符解析器去解析任何字符串，都认为是解析成功\n            return (\"\", input)\n        }\n        // 1 吃掉 character(head) 的结果\n        guard let (_, remainder) = discarding(character(head), string2(String(tail))).parse(input) else {\n            return nil\n        }\n        // 2 返回 (\"结果\", \"剩余的字符串\")\n        return (str, remainder)\n    }\n}\n```\n\n这次改版的 `string` 里面第 1 步中的解析结果还是被忽略了，所以是否可以继续用 `discarding` 来简化？但是 `discarding` 函数需要两个解析器，但函数内只有 `lift` 返回的一个解析器，所以没办法继续简化了？\n\n仔细看 `string` 函数体的第一行 `return Parser {}` 就是一个解析器，能否把这个解析器利用上呢？`discarding` 是在 `Parser {}` 里面的，所以只要能想办法把它展平，那么就能再次利用上 `lift`，而且展平后的解析器需要做为 `string` 函数的返回值，所以它肯定是做为 `discarding` 的右边的参数。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    let lhs = Parser {}\n    let rhs = Parser<String> {}\n    return lift(x, y)\n}\n```\n\n根据第 2 步的 `return (str, remainder)` 可以知道，最终的返回结果是 `(输入的，lhs 吃剩的)`，所以很容易得到 `let rhs = Parser<String> { (str, $0) }`。所以可以推出 lhs 要做的只是负责吃掉一部分。也就是上面的第 1 步所做的。所以：\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return (\"\", input)\n    }\n    // 2 吃掉\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3 结果和剩下的\n    let rhs = Parser<String> { (str, $0) }\n    // 4 返回\n    return discarding(lhs, rhs)\n}\n```\n\n函数的返回值是 `Parser`，由于外面没有 Parser {} ，展开后 1 那里需要返回一个 `Parser`。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return Parser<String> { (\"\", $0) }\n    }\n    // 2\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3\n    let rhs = Parser<String> { (str, $0) }\n    // 4\n    return discarding(lhs, rhs)\n}\n```\n\n明眼人可以看到 1 和 3 只有 `\"\"` 和 `str` 不一样，剩下的一模一样，虽然代码不长，但我们还是把它相同部分封装成一个函数，然后把不同的部分做为参赛。\n\n```swift\nfunc string(_ str: String) -> Parser<String> {\n    guard let (head, tail) = uncons(str.characters) else {\n        // 1 把空字符解析器去解析任何字符串，都认为是解析成功\n        return pure(\"\")\n    }\n    // 2\n    let lhs = discarding(character(head), string2(String(tail)))\n    // 3\n    let rhs = pure(str)\n    // 4\n    return discarding(lhs, rhs)\n}\n\n// Lift a value\nfunc pure<A>(_ x: A) -> Parser<A> {\n    return Parser<A> { (x, $0) }\n}\n```\n\n所以封装一个简洁的 `string` 解析器，花了很多功夫，但抛开性能，它比迭代的版本更简洁易懂。\n\n## Combine\n\n观察表达式 `( 4 + 3  )`，里面 `(` 和 `4` 之间有 1 个空格，数字 `3` 和 `)` 中间是有 2 个空格，在做加法运算的时候，这些 *many* 个空格是没有意义的，所以需要 *skip* 掉。\n\n#### Many\n\n首先需要解析空格的解析器，前面已经有实现过：\n\n```swift\nfunc space() -> Parser<Character> {\n    return satisfy(isSpace)\n}\n```\n\n由于空格数量未知，可能有 *many* 个，假如有一个解析器，能够解析 *many* 个 parser。用一个 loop 不断去解析就能实现：\n\n```swift\nfunc many<A>(_ x: Parser<A>) -> Parser<[A]> {\n    return Parser { input in\n        var results: [A] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (results, stream)\n    }\n}\n```\n\n任意个空格就是：\n\n```swift\nfunc spaces() -> Parser<[Character]> {\n    return many(space())\n}\n```\n\n`spaces` 得到的是一个 `Parser<[Character]>` 类型的 parser，但是按照理解更希望得到一个 `Parser<String>` 类型的 parser。在 Swift 中，`String([Character])` 就能够将 `[Character]` 拍扁成 `String` 类型。所以把 `many` 稍微修改一下：\n\n```swift\nfunc many<Character>(_ x: Parser<Character>) -> Parser<String> {\n    return Parser { input in\n        var results: [Character] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (String(results), stream)\n    }\n}\n```\n\n因为不是任何泛型 A 类型，都能用 String 拍扁，也不一定能通过其他类型进行拍扁，所以这里把泛型 A 去掉，直接用 Character 代替。但是这样做并不理想，因为 `many` 解析器从一个泛型解析器，变成了一个只能解析 Character 类型的解析器，变成了 `manyCharacter`。后面考虑解析这个问题，重新把 `many` 变成通用的解析器。\n\n#### Skip\n\n接着实现一个通用的 `skip` 解析器，它要做的事情很简单，输入什么吃掉什么，返回剩下的，和上面吃掉左边的 `discarding` 很像，不一样的是 `skip` 只有一个参数。\n\n```swift\nfunc skip<A>(_ x: Parser<A>) -> Parser<Void> {\n    return Parser { input in\n        guard let (_, remainder) = x.parse(input) else {\n            return ((), input)\n        }\n        \n        return ((), remainder)\n    }\n}\n```\n\n把 `skip` 和 `spaces` 进行组合：\n\n```swift\nfunc skipSpaces() -> Parser<Void> {\n    return skip(spaces)\n}\n```\n\n#### Many1\n\n前面实现的 `digit` 解析器，它只能解析个位数，这是没有什么卵用的。相比 `digit`，更加需要的是一个 `number` 解析器。一个 *number* 实际上也是由 *many* 个 *digit* 组成。\n\n```swift\nfunc number() -> Parser<[Character]> {\n    return many(digit())\n}\n\nnumber().parse(\"123abc\") // ([\"1\", \"2\", \"3\"], \"abc\")\nnumber().parse(\"abc\") // ([], \"abc\")\n```\n\n等等！`number().parse(\"abc\")` 也解析成功了，结果是空数组。这并不是想要的结果，一个 *string* 可以是空的，*space* 甚至也可以是空的，但一个 *number* 不能是空的。所以需要另外一个只是有一个的 `many`。这其实很常见，比如正则表达式中有 `*` 和 `+`，一个 {0, +} 一个是 {1, +}。\n\n```swift\nfunc many1<A>(_ x: Parser<A>) -> Parser<[A]> {\n    return Parser { input in\n        // 多加一个判断，第一个值必须满足条件\n        guard let (_, _) = x.parse(input) else {\n            return nil\n        }\n        var results: [A] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (results, stream)\n    }\n}\n```\n\n所以正确的 `number` 解析器就变成：\n\n```swift\nfunc number() -> Parser<[Character]> {\n    return many1(digit())\n}\n```\n\n这里 `number` 解析器和 `spaces` 解析器遇到了同样的问题，`number` 解析器的结果应该是 `Int`（暂不考虑浮点数），而不是 `[Character]`。解决方法可以类似 `manyCharacter`，但是这显示是很有问题的，抽象抽象抽象！\n\n程序员要有抽象思维，要学会用更高的层次的思维去看待问题，发现不同问题的共同点。`[Character]` 可以用 `String([Character])` 变成一个 `String`。对于 `digit` character，同样的也是用 `String([Character])` 拍扁，然后用 `Int(String)` 得到一个 `number`。\n\n结合 Swift 的 OOP（面向协议编程），可以定义一个协议，暂且叫做 `Combinable` :D\n\n```swift\nprotocol Combinable {\n    static func combine(_ xs: [Character]) -> Self\n}\n\nextension Int: Combinable {\n    \n    static func combine(_ xs: [Character]) -> Int {\n        return Int(String(describing: xs))!\n    }\n}\n\nextension String: Combinable {\n    static func combine(_ xs: [Character]) -> String {\n        return String(describing: xs)\n    }\n}\n\nfunc many1<A: Combinable>(_ x: Parser<Character>) -> Parser<A> {\n    return Parser { input in\n        guard let (_, _) = x.parse(input) else {\n            return nil\n        }\n        var results: [Character] = []\n        var stream = input\n        while let (result, remainder) = x.parse(stream) {\n            results.append(result)\n            stream = remainder\n        }\n        return (A.combine(results), stream)\n    }\n}\n```\n\n然后就可以得到：\n\n```swift\nfunc number() -> Parser<Int> {\n    return many1(digit())\n}\n\nfunc spaces() -> Parser<String> {\n    return many1(space()) // 忽略 spaces 可以为空的情况\n}\n```\n\n实际上 `skipSpaces` 还可以用另外一个角度来拆分，上面先解析 *many* 个空格，然后一次 *skip* 掉。还可以每次 *skip* 一个空格，然后进行 *many* 次。不同的地方是 `skip` 和 `many` 两个 parser 的调用次序不一样，甚至还可以定义一个叫做 `skipMany` 的解析器，这也说明了 **Combinator** 的强大。通过定义一系列基础的 parser，进行不同的排列组合操作，最后覆盖所有的 case。（理想状态\n\n#### Zip\n\n合并两个 parser 的解析器 `zip` 的实现也很简单：\n\n```swift\nfunc zip<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<(A, B)> {\n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        return ((result1, result2), remainder2)\n    }\n}\n```\n\n#### Choice\n\n接下来还需要解析几个简单的一元运算符 `+` `-` `*` `/`。去掉空格后，两个数中间必须是其中一个运算符那么表达式就是合法的。\n\n```swift\nfunc opt() -> Parser<Character> {\n    let opts = [\"+\", \"-\", \"*\", \"/\"].map { character($0.characters.first!) }\n    return choice(opts)\n}\n```\n\n```swift\n// 也可以叫 one(of:)\nfunc choice<A, S: Sequence>(_ xs: S) -> Parser<A> where S.Iterator.Element == Parser<A> {\n    return xs.reduce(empty(), { $0 <|> $1 })\n}\n\nfunc empty<A>() -> Parser<A> {\n    return Parser { _ in nil }\n}\n```\n\n## Transform\n\n上面利用 Protocol 实现的 `number` 和 `space` 解析器其实并不是很优雅，费了很大劲把 `many` 变得 ~~通用~~，结果却并不是很 **通用**，因为要求结果的类型必须实现 `Combinable` 协议。但它做的工作却很少，只是把传入的 `Parser<A>` 循环解析得到的结果 `[A]` 在 `many` **内部** 组合成最终的类型，实现把 `Parser<[A]` 转换为 `Parser<B>`。正由于它是在 `many` 内部做的操作，所以依赖于传入的类型，使得 `many` 不再那么通用。\n\n再看 `func character(_ character: Character) -> Parser<Character>` 的定义，假如调用 `character(\"4\")`，那么返回的是一个 `Parser<Character>` 类型的解析器，这个解析器调用 `parse` 方法，返回的结果是 `Character` 类型的值。在解析表达式 `4 + 3` 的时候，需要将解析到的 `4` 和 `3` 当作一个整数然后相加，才能得到最终的结果，所以不想要 `Character` 类型的值，而是想要 `Int` 类型的值，那么需要将 `Parser<Character>` 转换为 `Parser<Int>` 解析器。\n\n所以，假如能实现一个函数，可以将任意 `Parser<A>` 转换为 `Parser<B>` 解析器，就完美了。`many` 只负责将 `Parser<A>` 解析得到 `Parser<[A]>`，然后由 `number` 自己将 `Parser<[A]>` 转换为 `Parser<Int>`。\n\n### Functor\n\n回忆 Swift 中 Optional 类型中的 map 方法：\n\n```swift\nlet a: Optional<Int> = 1\nlet b: Optional<String> = a.map { String($0) }\n```\n\n它将一个 `Optional<Int>` 转换为 `Optional<String>`，仔细一看，把 `Optional` 换成 `Parser`，就是我们所需要的转换解析器的方法。\n\n`Optional` 的函数签名是 `func map<U>(_ transform: (Wrapped) -> U) -> U?`，所以依葫芦画瓢，我们可以得到：\n\n```swift\nstruct Parser<A> {\n    func map<B>(_ transform: (A) -> B) -> Parser<B> {\n        return Parser { input in\n            guard let (result, remainder) = self.parse(input) else { return nil }\n            return (transform(result), remainder)\n        }\n    }\n}\n```\n\n像上面的 `satisfy` 和其他函数一样，把 `map` 方法从结构图内移出来，则得到：\n\n```swift\nfunc map<A, B>(_ x: Parser<A>, _ f: @escaping (A) -> B) -> Parser<B> {\n    return Parser { input in\n        guard let (result, remainder) = x.parse(input)else {\n            return nil\n        }\n        return (f(result), remainder)\n    }\n}\n```\n\n由于值是在 `Parser` 中包裹着的，想把返回的 `Parser<Character` 变成 `Parser<Int>`，需要把 `Parser<Character>` 解开取出里面<Character>的值，然后把它变成<Int>类型，然后重现包装起来。对于不同的类型转换，解包重新包装的步骤是一样的，不同的地方是把结果从一种类型变成另一种类型，函数的作用就是把相同的封装起来，把不同做为参赛传进去，所以在 `map` 函数的实现中，只需要在返回前，给外部将这个结果进行一次转换机会，所以需要一个参赛，能够将解开后得到的值变成另一种类型的值，也就是提供一个函数 `(Character) -> Int`。\n\n重新实现 `number` 和 `spaces`：\n\n```swift\nfunc number() -> Parser<Int> {\n    return map(many1(digit()), { Int(String($0))! })\n}\n\nfunc spaces() -> Parser<String> {\n    return map(many(space()), { String($0) })\n}\n```\n\n两种不同的结构体 `Optional<T>` 和 `Parser<A>`，都可以给它实现一个 `map` 方法，使得它变成一个不同类型的结构体。而支持这种 `map` 方法的结构体，我们称把它为 `Functor`。\n\n> 简单来说，所谓的 `Functor` 就是可以把一个函数应用于一个 **封装过的值** 上，得到一个新的 **封装过的值**\n\n`Functor` 最早出自于代数拓扑，这里说的 `Functor` 一般是指范畴论（Category Theory）中的 `Functor`，它被用来描述各种范畴间的关系。更多 Functor 的理解 [Group Theory and Category Theory](http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/)。\n\n### Applicative\n\n```swift\nfunc pure<A>(_ x: A) -> Parser<A> {\n    return Parser<A> { (x, $0) }\n}\n```\n\n实际上前面的 `pure` 和 `discarding` 函数就是一种 Applicative。像 `discarding` 一样有时候只关心这些要解析道字符存在就行了，上面定义的 `discarding` 解析器作用是忽略第一个 parser 参数的解析结果，同样地，可以定义一个忽略第二个 parser 参数的解析器。比如当解析出现在右边的 symbol 的时候就很有用，`discarding2(parser, string(\")\"))` 的作用就是确保存在闭合的右括号 \")\"。\n\n```swift\n/// 吃掉右边的结果\nfunc discarding2<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (_, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留左边的解析器的结果 result1，没有 result2\n        return (result1, remainder2)\n    }\n}\n```\n\n```swift\n/// 吃掉左边的结果\nfunc discarding1<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (_, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        // 只保留右边的解析器的结果 result2，没有 result1\n        return (result2, remainder2)\n    }\n}\n```\n\n这两个 `discarding` 函数长的很像，如果有办法把它们抽象一下，把相似的地方提取出来就好了。\n\n对于两个结果，忽略其中一个，实际上很简单：\n\n```swift\n/// 忽略 B\nfunc f<A, B>(_ a: A, _ b: B) -> A {\n    return a\n}\n```\n\n```swift\n/// 忽略 A\nfunc f<A, B>(_ a: A, _ b: B) -> B {\n    return b\n}\n```\n\n```swift\n/// 吃掉左边的结果\nfunc left<A, B>(_ x: Parser<A>, _ y: Parser<B>) -> Parser<B> {\n    \n    func discarding<A, B>(_ a: A, _ b: B) -> A {\n        return b\n    }\n    \n    return Parser { input in\n        guard let (result1, remainder1) = x.parse(input) else {\n            return nil\n        }\n        guard let (result2, remainder2) = y.parse(remainder1) else {\n            return nil\n        }\n        return (discarding(result1, result2), remainder2)\n    }\n}\n```\n\n然后这个函数并没有卵用。\n\n### Monad\n\n观看 `map` 函数 `func map<A, B>(_ x: Parser<A>, _ f: (A) -> B) -> Parser<B>`\n\n它要求传入两个参数，一个是 `Parser<A>`，一个是函数 `A -> B`，第二个参数对标题中的 **Combinator** 并不是很友好，**Parser Combinator** 的思想是组合一系列的 `Parser` 得到结果。上面定义了有很多小的 parser，比如 `func string(_ str: String) -> Parser<String>`，函数签名是 `(String) -> Parser<String>`，由于 `map` 函数的第二个参数的签名是 `(A) -> B`，而非 `(A) -> Parser<B>`，所以假如存在一个与 `map` 功能相似，但第二个参数的签名是 `(A) -> Parser<B>`，则能够使得之前定义的很多小的 `parser` 能够直接作为一个参数，直接得到一个新类型的 `Parser`，大概这样：\n\n```swift\nfunc flatMap<A, B>(_ x: Parser<A>, _ f: (A) -> Parser<B>) -> Parser<B>\n```\n\n使用的时候：\n\n```swift\nlet parser = flatMap(stringParser, string(\"alex\"))\n```\n\n具体实现与 `map` 也很像：\n\n```swift\nfunc flatMap<A, B>(_ x: Parser<A>, _ f: @escaping (A) -> Parser<B>) -> Parser<B> {\n    return Parser { input in\n        guard let (result, remainder) = x.parse(input)else {\n            return nil\n        }\n        return f(result).parse(remainder)\n    }\n}\n```\n\n[Group Theory and Category Theory](http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/)\n\n### Alternative\n\n```swift\nfunc empty<A>() -> Parser<A> {\n    return Parser { _ in nil }\n}\n```\n\n```swift\nfunc choice<A>(_ x: Parser<A>, _ y: Parser<A>) -> Parser<A> {\n    return Parser { input in\n        return x.parse(input) ?? y.parse(input)\n    }\n}\n```\n\nAlternative 类似于 `Swift Standard Library` 中定义的运算符 `??`，它有两个同类型的参数，第一个参数是偏爱的 `parser`，第二个参数是默认的 `parser`。它首先尝试使用第一个 `parser` 来进行解析，如果成功，则返回。如果不成功，则使用默认的 `parser` 进行解析。它的返回值类型也是同类型的 `Parser`。\n\n作用是假如有 Int, String, Bool 三个类型的 `parser`，而一个 scalar 类型的 `parser` 只要能够解析 Int, String, Bool 任意一种类型，则算解析成功。换句话说就是 scalar 是 Int, String, Bool 的父集。一种简单的从 `Parser<Int>`, `Parser<String>`, `Parser<Bool>` 三种已有实现的 parser 得到 `Parser<Scalar>` 的方法是逐个进行 parse，如果成功则马上返回。\n\n```swift\nlet scalar = parserInt <|> parserString <|> parserBool\n```\n\n从这个例子看有点 one of 的意思，但实际上更加准确的说法是 choice。\n\n### Applicative & Monad\n\nApplicative 和 Monad 的区别在于：\n\nApplicative 的两个 parser 是相互独立的，组合后的新 parser 是可以静态分析其行为的。而对于 Monad，在不知道输入的情况下，是不能确定其行为，也就是说 Monad 是依赖于计算结果。\n\n```swift\nfunc alex(_ x: Parser<String>) -> Bool {\n    if let (_, _) = x.parse(\"alex.huo\") {\n        return true\n    }\n    return false\n}\n\nlet af: Parser<(String) -> String> = pure(id)\nlet ax = string(\"alex\")\nalex(af <*> ax) // true\n\nlet mf: (String) -> Parser<String> = { string($0) }\nlet mx = string(\"alex\")\nalex(mx >>- mf) // false\n```\n\n## Ref\n\n[Jiffy](https://github.com/hlian/jiffy)\n[Parser combinators](https://news.realm.io/news/tryswift-yasuhiro-inami-parser-combinator/)\n[Monadic Parser Combinators](http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf)\n\n\n","slug":"parser-combinator","published":1,"updated":"2022-01-02T11:26:31.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xc000c9ithe6tt7fs8","content":"<p>解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。</p>\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>将一个数据流解析成结构化的数据的工具，我们称为解析器。比如我们需要将用户输入的表达式字符串解析成 AST，我们就可以使用解析器来达到我们的目的。</p>\n<p><code>( 4 + 3  )</code> 就是一个表达式语句，它由字符 <code>(</code>  <code>4</code> <code>空格</code> <code>+</code> <code>3</code> 和 <code>)</code> 组成。我们可以将这个表达式解析成一种 <em>表达式树</em> (AST 的一种)。</p>\n<p>所以我们的解析器简单的用一个函数来描述就是：<br><code>func parser(_ string: String) -&gt; AST</code></p>\n<p>我们不是用正则表达式来解析输入的表达式字符串，为了得到表达式树里面的节点，我们需要一步步的解析，每次解析得到不同的节点。所以我们需要将解析器的定义变成解析成功的话，会返回结果值和剩下的字符串。</p>\n<p><code>func parser(_ string: String) -&gt; (AST, String)</code></p>\n<p>表达式树的节点都是一些 <code>4</code> <code>+</code> 这种不同类型的数据，所以为了表示解析 <code>4</code> 成功和解析 <code>+</code> 成功，我们的返回值可以定义为泛型。并且表达出解析失败的情况，我们可以使用可选值。最终解析器函数就变成了：</p>\n<p><code>func parser&lt;T&gt;(_ string: String) -&gt; (T, String)?</code></p>\n<p>所以解析第一个数字 4 的解析器函数为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parser</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; (<span class=\"type\">Int</span>, <span class=\"type\">String</span>)<span class=\"operator\">?</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> string.characters.first, head <span class=\"operator\">==</span> <span class=\"string\">&quot;4&quot;</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Optional</span>.some((<span class=\"number\">4</span>, <span class=\"type\">String</span>(string.characters.dropFirst())))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Combinator\"><a href=\"#Combinator\" class=\"headerlink\" title=\"Combinator\"></a>Combinator</h2><blockquote>\n<p>One of the distinguishing features of functional programming is the widespread use of combinators to construct programs. <em>A combinator is a function which builds program fragments from program fragments</em>; in a sense the programmer using combinators constructs much of the desired program automatically, rather that writing every detail by hand. – John Hughes</p>\n</blockquote>\n<p>其实 Combinator 很容易理解，就像字面意思那样 —— 组合子。首先定义一系列原子操作，然后定义组合的规则，然后根据组合的规则把这些原子操作组合起来。</p>\n<h2 id=\"Parser-Combinator\"><a href=\"#Parser-Combinator\" class=\"headerlink\" title=\"Parser Combinator\"></a>Parser Combinator</h2><p>回到开头的话：<em>解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。</em> 所以我们需要重新定义一下我们的解析器，把它变成一个解析组合子。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parse: (<span class=\"type\">String</span>) -&gt; (<span class=\"type\">A</span>, <span class=\"type\">String</span>)<span class=\"operator\">?</span></span><br><span class=\"line\">    <span class=\"comment\">// (input) -&gt; (result, remaining)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个解析字符串的解析器，我们把这个函数放到一个结构体 <code>Parser</code> 中，作为一个 <code>parse</code> 变量。当然我们也可以用类型别名 <code>typealias Parser&lt;Result&gt; = (String) -&gt; (Result, String)?</code>。</p>\n<p>当然解析组合子不仅仅能解析字符串，所以可以用泛型来把它变得更通用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">I</span>, <span class=\"title\">O</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parse: (<span class=\"type\">I</span>) -&gt; (<span class=\"type\">O</span>, <span class=\"type\">I</span>)<span class=\"operator\">?</span></span><br><span class=\"line\">    <span class=\"comment\">// (input) -&gt; (output, remaining input)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以解析数字字符 <code>4</code> 的解析器就变成了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">character4</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, head <span class=\"operator\">==</span> <span class=\"string\">&quot;4&quot;</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&quot;4&quot;</span>, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以根据 <code>func character4() -&gt; Parser&lt;Character&gt;</code> 很容易得到一个能够解析任何字符的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">character</span>(<span class=\"keyword\">_</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, head <span class=\"operator\">==</span> character <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据 <code>character</code> 和 <code>digit</code> 的区别，很容易又得到能够解析任何数字的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">digit</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, <span class=\"string\">&quot;0&quot;</span><span class=\"operator\">...</span><span class=\"string\">&quot;9&quot;</span> <span class=\"operator\">~=</span> head <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据 <code>character</code> 和 <code>digit</code> 相同和不同，我们可以进一步抽象，把相同部分进行封装，把不同部分作为参数，得到新的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">satisfy</span>(<span class=\"keyword\">_</span> <span class=\"params\">condition</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">Character</span>) -&gt; <span class=\"type\">Bool</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, condition(head) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以解析数字：</p>\n<p><code>(satisfy &#123; &quot;0&quot;...&quot;9&quot; ~= $0 &#125;).parse(&quot;1abc&quot;)</code></p>\n<p>解析空格：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isSpace</span>(<span class=\"keyword\">_</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>)</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(character).trimmingCharacters(in: .whitespacesAndNewlines).isEmpty</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(satisfy(isSpace)).parse(<span class=\"string\">&quot; abc&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所以我们只需要给 <code>satisfy</code> 函数传入一个是否属于 X 的函数，就可以得到一个能够解析 x 的解析器。</p>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>最基本的 <code>character</code> 有了，<code>digit</code> 有了，当我们需要解析一个字符串 <code>alex</code> 的时候，我们只需要把 <code>alex</code> 看成 <code>a</code> <code>l</code> <code>e</code> <code>x</code> 4 个字符，然后不断的用 <code>character</code> 进行解析，最后把每一步返回的结果合并起来就行了。考虑到解析一个字符串是一个基本功能，为了不用每次写重复的代码，把它封装成用来解析 <code>string</code> 的解析器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parsers <span class=\"operator\">=</span> str.characters.map &#123; character(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">for</span> parser <span class=\"keyword\">in</span> parsers &#123;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> parser.parse(stream) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">String</span>(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察 parse 函数类型 <code>(String) -&gt; (A, String)</code>，解析成功的返回值是解析结果和 <strong>剩余</strong> 的字符串，所以解析 <code>alex</code> 的时候：</p>\n<ol>\n<li>“alex”: ‘a’ -&gt; (‘a’, “lex”)</li>\n<li>“lex”: ‘l’ -&gt; (‘l’, “ex”)</li>\n<li>“ex”: ‘e’ -&gt; (‘e’, “x”)</li>\n<li>“x”: ‘x’ -&gt; (‘x’, “”)</li>\n<li>Parser&lt;”alex”&gt;</li>\n</ol>\n<p>可以看到这几步做的事情除了参数不一样，内部逻辑是一样的，而且很容易看出是一个递归的过程，<strong>每次解析成功就 <code>吃掉</code> 第一个字符</strong>（留意这句话），然后解析剩下的字符串。</p>\n<p>所以我们写一个递归的版本：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 0. 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 先解析第一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> character(head).parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 然后解析剩下的所有</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder2) <span class=\"operator\">=</span> string1(<span class=\"type\">String</span>(tail)).parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 返回(&quot;结果&quot;, &quot;剩余的字符串&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (str, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uncons</span>&lt;<span class=\"type\">C</span>: <span class=\"type\">Collection</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: <span class=\"type\">C</span>)</span> -&gt; (<span class=\"type\">C</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span>, <span class=\"type\">C</span>.<span class=\"type\">SubSequence</span>)<span class=\"operator\">?</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> xs.first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (head, xs.suffix(from: xs.index(after: xs.startIndex)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察 1 和 2，在这两步中，我们都没有使用解析的 <strong>结果</strong>，这两步实现的仅仅是 <strong>每次解析成功就 <code>吃掉</code> 结果</strong>！最后在第 3 步一次将结果返回。也就是说我们 1 和 2 这两本并不关心结果，只关心这些要解析道字符存在就行了。</p>\n<p>我们把解析成功吃掉结果这一步封装一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留右边的解析器的结果 result2，没有 result1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result2, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>discarding</code> 函数会 <strong>吃掉</strong> 左边第一个参数 <code>x</code> 的解析结果，返回值中只保留右边 <code>y</code> 的解析结果。用 <code>discarding</code> 函数重写一下上面的 <code>string</code> 函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1 吃掉 character(head) 的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder) <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail))).parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2 返回 (&quot;结果&quot;, &quot;剩余的字符串&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (str, remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次改版的 <code>string</code> 里面第 1 步中的解析结果还是被忽略了，所以是否可以继续用 <code>discarding</code> 来简化？但是 <code>discarding</code> 函数需要两个解析器，但函数内只有 <code>lift</code> 返回的一个解析器，所以没办法继续简化了？</p>\n<p>仔细看 <code>string</code> 函数体的第一行 <code>return Parser &#123;&#125;</code> 就是一个解析器，能否把这个解析器利用上呢？<code>discarding</code> 是在 <code>Parser &#123;&#125;</code> 里面的，所以只要能想办法把它展平，那么就能再次利用上 <code>lift</code>，而且展平后的解析器需要做为 <code>string</code> 函数的返回值，所以它肯定是做为 <code>discarding</code> 的右边的参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lift(x, y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据第 2 步的 <code>return (str, remainder)</code> 可以知道，最终的返回结果是 <code>(输入的，lhs 吃剩的)</code>，所以很容易得到 <code>let rhs = Parser&lt;String&gt; &#123; (str, $0) &#125;</code>。所以可以推出 lhs 要做的只是负责吃掉一部分。也就是上面的第 1 步所做的。所以：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2 吃掉</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3 结果和剩下的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (str, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4 返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的返回值是 <code>Parser</code>，由于外面没有 Parser {} ，展开后 1 那里需要返回一个 <code>Parser</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (<span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (str, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>明眼人可以看到 1 和 3 只有 <code>&quot;&quot;</code> 和 <code>str</code> 不一样，剩下的一模一样，虽然代码不长，但我们还是把它相同部分封装成一个函数，然后把不同的部分做为参赛。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pure(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> pure(str)</span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lift a value</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pure</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">A</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123; (x, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以封装一个简洁的 <code>string</code> 解析器，花了很多功夫，但抛开性能，它比迭代的版本更简洁易懂。</p>\n<h2 id=\"Combine\"><a href=\"#Combine\" class=\"headerlink\" title=\"Combine\"></a>Combine</h2><p>观察表达式 <code>( 4 + 3  )</code>，里面 <code>(</code> 和 <code>4</code> 之间有 1 个空格，数字 <code>3</code> 和 <code>)</code> 中间是有 2 个空格，在做加法运算的时候，这些 <em>many</em> 个空格是没有意义的，所以需要 <em>skip</em> 掉。</p>\n<h4 id=\"Many\"><a href=\"#Many\" class=\"headerlink\" title=\"Many\"></a>Many</h4><p>首先需要解析空格的解析器，前面已经有实现过：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">space</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> satisfy(isSpace)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于空格数量未知，可能有 <em>many</em> 个，假如有一个解析器，能够解析 <em>many</em> 个 parser。用一个 loop 不断去解析就能实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">A</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (results, stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>任意个空格就是：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many(space())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>spaces</code> 得到的是一个 <code>Parser&lt;[Character]&gt;</code> 类型的 parser，但是按照理解更希望得到一个 <code>Parser&lt;String&gt;</code> 类型的 parser。在 Swift 中，<code>String([Character])</code> 就能够将 <code>[Character]</code> 拍扁成 <code>String</code> 类型。所以把 <code>many</code> 稍微修改一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many</span>&lt;<span class=\"type\">Character</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">String</span>(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为不是任何泛型 A 类型，都能用 String 拍扁，也不一定能通过其他类型进行拍扁，所以这里把泛型 A 去掉，直接用 Character 代替。但是这样做并不理想，因为 <code>many</code> 解析器从一个泛型解析器，变成了一个只能解析 Character 类型的解析器，变成了 <code>manyCharacter</code>。后面考虑解析这个问题，重新把 <code>many</code> 变成通用的解析器。</p>\n<h4 id=\"Skip\"><a href=\"#Skip\" class=\"headerlink\" title=\"Skip\"></a>Skip</h4><p>接着实现一个通用的 <code>skip</code> 解析器，它要做的事情很简单，输入什么吃掉什么，返回剩下的，和上面吃掉左边的 <code>discarding</code> 很像，不一样的是 <code>skip</code> 只有一个参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">skip</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((), input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((), remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把 <code>skip</code> 和 <code>spaces</code> 进行组合：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">skipSpaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> skip(spaces)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Many1\"><a href=\"#Many1\" class=\"headerlink\" title=\"Many1\"></a>Many1</h4><p>前面实现的 <code>digit</code> 解析器，它只能解析个位数，这是没有什么卵用的。相比 <code>digit</code>，更加需要的是一个 <code>number</code> 解析器。一个 <em>number</em> 实际上也是由 <em>many</em> 个 <em>digit</em> 组成。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many(digit())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number().parse(<span class=\"string\">&quot;123abc&quot;</span>) <span class=\"comment\">// ([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], &quot;abc&quot;)</span></span><br><span class=\"line\">number().parse(<span class=\"string\">&quot;abc&quot;</span>) <span class=\"comment\">// ([], &quot;abc&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>等等！<code>number().parse(&quot;abc&quot;)</code> 也解析成功了，结果是空数组。这并不是想要的结果，一个 <em>string</em> 可以是空的，<em>space</em> 甚至也可以是空的，但一个 <em>number</em> 不能是空的。所以需要另外一个只是有一个的 <code>many</code>。这其实很常见，比如正则表达式中有 <code>*</code> 和 <code>+</code>，一个 {0, +} 一个是 {1, +}。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many1</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// 多加一个判断，第一个值必须满足条件</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">A</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (results, stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以正确的 <code>number</code> 解析器就变成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(digit())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>number</code> 解析器和 <code>spaces</code> 解析器遇到了同样的问题，<code>number</code> 解析器的结果应该是 <code>Int</code>（暂不考虑浮点数），而不是 <code>[Character]</code>。解决方法可以类似 <code>manyCharacter</code>，但是这显示是很有问题的，抽象抽象抽象！</p>\n<p>程序员要有抽象思维，要学会用更高的层次的思维去看待问题，发现不同问题的共同点。<code>[Character]</code> 可以用 <code>String([Character])</code> 变成一个 <code>String</code>。对于 <code>digit</code> character，同样的也是用 <code>String([Character])</code> 拍扁，然后用 <code>Int(String)</code> 得到一个 <code>number</code>。</p>\n<p>结合 Swift 的 OOP（面向协议编程），可以定义一个协议，暂且叫做 <code>Combinable</code> :D</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Int</span>(<span class=\"type\">String</span>(describing: xs))<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span>: <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: xs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many1</span>&lt;<span class=\"type\">A</span>: <span class=\"type\">Combinable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">A</span>.combine(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Int</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(digit())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(space()) <span class=\"comment\">// 忽略 spaces 可以为空的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上 <code>skipSpaces</code> 还可以用另外一个角度来拆分，上面先解析 <em>many</em> 个空格，然后一次 <em>skip</em> 掉。还可以每次 <em>skip</em> 一个空格，然后进行 <em>many</em> 次。不同的地方是 <code>skip</code> 和 <code>many</code> 两个 parser 的调用次序不一样，甚至还可以定义一个叫做 <code>skipMany</code> 的解析器，这也说明了 <strong>Combinator</strong> 的强大。通过定义一系列基础的 parser，进行不同的排列组合操作，最后覆盖所有的 case。（理想状态</p>\n<h4 id=\"Zip\"><a href=\"#Zip\" class=\"headerlink\" title=\"Zip\"></a>Zip</h4><p>合并两个 parser 的解析器 <code>zip</code> 的实现也很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zip</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;(<span class=\"type\">A</span>, <span class=\"type\">B</span>)&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((result1, result2), remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Choice\"><a href=\"#Choice\" class=\"headerlink\" title=\"Choice\"></a>Choice</h4><p>接下来还需要解析几个简单的一元运算符 <code>+</code> <code>-</code> <code>*</code> <code>/</code>。去掉空格后，两个数中间必须是其中一个运算符那么表达式就是合法的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">opt</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> opts <span class=\"operator\">=</span> [<span class=\"string\">&quot;+&quot;</span>, <span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;/&quot;</span>].map &#123; character(<span class=\"variable\">$0</span>.characters.first<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> choice(opts)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也可以叫 one(of:)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">choice</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">S</span>: <span class=\"type\">Sequence</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: <span class=\"type\">S</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; <span class=\"keyword\">where</span> <span class=\"type\">S</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(empty(), &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;|&gt;</span> <span class=\"variable\">$1</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span>&lt;<span class=\"type\">A</span>&gt;()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><p>上面利用 Protocol 实现的 <code>number</code> 和 <code>space</code> 解析器其实并不是很优雅，费了很大劲把 <code>many</code> 变得 <del>通用</del>，结果却并不是很 <strong>通用</strong>，因为要求结果的类型必须实现 <code>Combinable</code> 协议。但它做的工作却很少，只是把传入的 <code>Parser&lt;A&gt;</code> 循环解析得到的结果 <code>[A]</code> 在 <code>many</code> <strong>内部</strong> 组合成最终的类型，实现把 <code>Parser&lt;[A]</code> 转换为 <code>Parser&lt;B&gt;</code>。正由于它是在 <code>many</code> 内部做的操作，所以依赖于传入的类型，使得 <code>many</code> 不再那么通用。</p>\n<p>再看 <code>func character(_ character: Character) -&gt; Parser&lt;Character&gt;</code> 的定义，假如调用 <code>character(&quot;4&quot;)</code>，那么返回的是一个 <code>Parser&lt;Character&gt;</code> 类型的解析器，这个解析器调用 <code>parse</code> 方法，返回的结果是 <code>Character</code> 类型的值。在解析表达式 <code>4 + 3</code> 的时候，需要将解析到的 <code>4</code> 和 <code>3</code> 当作一个整数然后相加，才能得到最终的结果，所以不想要 <code>Character</code> 类型的值，而是想要 <code>Int</code> 类型的值，那么需要将 <code>Parser&lt;Character&gt;</code> 转换为 <code>Parser&lt;Int&gt;</code> 解析器。</p>\n<p>所以，假如能实现一个函数，可以将任意 <code>Parser&lt;A&gt;</code> 转换为 <code>Parser&lt;B&gt;</code> 解析器，就完美了。<code>many</code> 只负责将 <code>Parser&lt;A&gt;</code> 解析得到 <code>Parser&lt;[A]&gt;</code>，然后由 <code>number</code> 自己将 <code>Parser&lt;[A]&gt;</code> 转换为 <code>Parser&lt;Int&gt;</code>。</p>\n<h3 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h3><p>回忆 Swift 中 Optional 类型中的 map 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"type\">Optional</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b: <span class=\"type\">Optional</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> a.map &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>它将一个 <code>Optional&lt;Int&gt;</code> 转换为 <code>Optional&lt;String&gt;</code>，仔细一看，把 <code>Optional</code> 换成 <code>Parser</code>，就是我们所需要的转换解析器的方法。</p>\n<p><code>Optional</code> 的函数签名是 <code>func map&lt;U&gt;(_ transform: (Wrapped) -&gt; U) -&gt; U?</code>，所以依葫芦画瓢，我们可以得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">transform</span>: (<span class=\"type\">A</span>) -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.parse(input) <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (transform(result), remainder)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上面的 <code>satisfy</code> 和其他函数一样，把 <code>map</code> 方法从结构图内移出来，则得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">A</span>) -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(input)<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (f(result), remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于值是在 <code>Parser</code> 中包裹着的，想把返回的 <code>Parser&lt;Character</code> 变成 <code>Parser&lt;Int&gt;</code>，需要把 <code>Parser&lt;Character&gt;</code> 解开取出里面<Character>的值，然后把它变成<Int>类型，然后重现包装起来。对于不同的类型转换，解包重新包装的步骤是一样的，不同的地方是把结果从一种类型变成另一种类型，函数的作用就是把相同的封装起来，把不同做为参赛传进去，所以在 <code>map</code> 函数的实现中，只需要在返回前，给外部将这个结果进行一次转换机会，所以需要一个参赛，能够将解开后得到的值变成另一种类型的值，也就是提供一个函数 <code>(Character) -&gt; Int</code>。</p>\n<p>重新实现 <code>number</code> 和 <code>spaces</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Int</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map(many1(digit()), &#123; <span class=\"type\">Int</span>(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map(many(space()), &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两种不同的结构体 <code>Optional&lt;T&gt;</code> 和 <code>Parser&lt;A&gt;</code>，都可以给它实现一个 <code>map</code> 方法，使得它变成一个不同类型的结构体。而支持这种 <code>map</code> 方法的结构体，我们称把它为 <code>Functor</code>。</p>\n<blockquote>\n<p>简单来说，所谓的 <code>Functor</code> 就是可以把一个函数应用于一个 <strong>封装过的值</strong> 上，得到一个新的 <strong>封装过的值</strong></p>\n</blockquote>\n<p><code>Functor</code> 最早出自于代数拓扑，这里说的 <code>Functor</code> 一般是指范畴论（Category Theory）中的 <code>Functor</code>，它被用来描述各种范畴间的关系。更多 Functor 的理解 <a href=\"http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/\">Group Theory and Category Theory</a>。</p>\n<h3 id=\"Applicative\"><a href=\"#Applicative\" class=\"headerlink\" title=\"Applicative\"></a>Applicative</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pure</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">A</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123; (x, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上前面的 <code>pure</code> 和 <code>discarding</code> 函数就是一种 Applicative。像 <code>discarding</code> 一样有时候只关心这些要解析道字符存在就行了，上面定义的 <code>discarding</code> 解析器作用是忽略第一个 parser 参数的解析结果，同样地，可以定义一个忽略第二个 parser 参数的解析器。比如当解析出现在右边的 symbol 的时候就很有用，<code>discarding2(parser, string(&quot;)&quot;))</code> 的作用就是确保存在闭合的右括号 “)”。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉右边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding2</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留左边的解析器的结果 result1，没有 result2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result1, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉左边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding1</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留右边的解析器的结果 result2，没有 result1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result2, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个 <code>discarding</code> 函数长的很像，如果有办法把它们抽象一下，把相似的地方提取出来就好了。</p>\n<p>对于两个结果，忽略其中一个，实际上很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 忽略 B</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 忽略 A</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉左边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">left</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">A</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (discarding(result1, result2), remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后这个函数并没有卵用。</p>\n<h3 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h3><p>观看 <code>map</code> 函数 <code>func map&lt;A, B&gt;(_ x: Parser&lt;A&gt;, _ f: (A) -&gt; B) -&gt; Parser&lt;B&gt;</code></p>\n<p>它要求传入两个参数，一个是 <code>Parser&lt;A&gt;</code>，一个是函数 <code>A -&gt; B</code>，第二个参数对标题中的 <strong>Combinator</strong> 并不是很友好，<strong>Parser Combinator</strong> 的思想是组合一系列的 <code>Parser</code> 得到结果。上面定义了有很多小的 parser，比如 <code>func string(_ str: String) -&gt; Parser&lt;String&gt;</code>，函数签名是 <code>(String) -&gt; Parser&lt;String&gt;</code>，由于 <code>map</code> 函数的第二个参数的签名是 <code>(A) -&gt; B</code>，而非 <code>(A) -&gt; Parser&lt;B&gt;</code>，所以假如存在一个与 <code>map</code> 功能相似，但第二个参数的签名是 <code>(A) -&gt; Parser&lt;B&gt;</code>，则能够使得之前定义的很多小的 <code>parser</code> 能够直接作为一个参数，直接得到一个新类型的 <code>Parser</code>，大概这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: (<span class=\"type\">A</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用的时候：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parser <span class=\"operator\">=</span> flatMap(stringParser, string(<span class=\"string\">&quot;alex&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>具体实现与 <code>map</code> 也很像：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">A</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(input)<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(result).parse(remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/\">Group Theory and Category Theory</a></p>\n<h3 id=\"Alternative\"><a href=\"#Alternative\" class=\"headerlink\" title=\"Alternative\"></a>Alternative</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span>&lt;<span class=\"type\">A</span>&gt;()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">choice</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.parse(input) <span class=\"operator\">??</span> y.parse(input)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Alternative 类似于 <code>Swift Standard Library</code> 中定义的运算符 <code>??</code>，它有两个同类型的参数，第一个参数是偏爱的 <code>parser</code>，第二个参数是默认的 <code>parser</code>。它首先尝试使用第一个 <code>parser</code> 来进行解析，如果成功，则返回。如果不成功，则使用默认的 <code>parser</code> 进行解析。它的返回值类型也是同类型的 <code>Parser</code>。</p>\n<p>作用是假如有 Int, String, Bool 三个类型的 <code>parser</code>，而一个 scalar 类型的 <code>parser</code> 只要能够解析 Int, String, Bool 任意一种类型，则算解析成功。换句话说就是 scalar 是 Int, String, Bool 的父集。一种简单的从 <code>Parser&lt;Int&gt;</code>, <code>Parser&lt;String&gt;</code>, <code>Parser&lt;Bool&gt;</code> 三种已有实现的 parser 得到 <code>Parser&lt;Scalar&gt;</code> 的方法是逐个进行 parse，如果成功则马上返回。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scalar <span class=\"operator\">=</span> parserInt <span class=\"operator\">&lt;|&gt;</span> parserString <span class=\"operator\">&lt;|&gt;</span> parserBool</span><br></pre></td></tr></table></figure>\n\n<p>从这个例子看有点 one of 的意思，但实际上更加准确的说法是 choice。</p>\n<h3 id=\"Applicative-amp-Monad\"><a href=\"#Applicative-amp-Monad\" class=\"headerlink\" title=\"Applicative &amp; Monad\"></a>Applicative &amp; Monad</h3><p>Applicative 和 Monad 的区别在于：</p>\n<p>Applicative 的两个 parser 是相互独立的，组合后的新 parser 是可以静态分析其行为的。而对于 Monad，在不知道输入的情况下，是不能确定其行为，也就是说 Monad 是依赖于计算结果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">alex</span>(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt;)</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(<span class=\"string\">&quot;alex.huo&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> af: <span class=\"type\">Parser</span>&lt;(<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> pure(id)</span><br><span class=\"line\"><span class=\"keyword\">let</span> ax <span class=\"operator\">=</span> string(<span class=\"string\">&quot;alex&quot;</span>)</span><br><span class=\"line\">alex(af <span class=\"operator\">&lt;*&gt;</span> ax) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mf: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> &#123; string(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mx <span class=\"operator\">=</span> string(<span class=\"string\">&quot;alex&quot;</span>)</span><br><span class=\"line\">alex(mx <span class=\"operator\">&gt;&gt;-</span> mf) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://github.com/hlian/jiffy\">Jiffy</a><br><a href=\"https://news.realm.io/news/tryswift-yasuhiro-inami-parser-combinator/\">Parser combinators</a><br><a href=\"http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf\">Monadic Parser Combinators</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。</p>\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>将一个数据流解析成结构化的数据的工具，我们称为解析器。比如我们需要将用户输入的表达式字符串解析成 AST，我们就可以使用解析器来达到我们的目的。</p>\n<p><code>( 4 + 3  )</code> 就是一个表达式语句，它由字符 <code>(</code>  <code>4</code> <code>空格</code> <code>+</code> <code>3</code> 和 <code>)</code> 组成。我们可以将这个表达式解析成一种 <em>表达式树</em> (AST 的一种)。</p>\n<p>所以我们的解析器简单的用一个函数来描述就是：<br><code>func parser(_ string: String) -&gt; AST</code></p>\n<p>我们不是用正则表达式来解析输入的表达式字符串，为了得到表达式树里面的节点，我们需要一步步的解析，每次解析得到不同的节点。所以我们需要将解析器的定义变成解析成功的话，会返回结果值和剩下的字符串。</p>\n<p><code>func parser(_ string: String) -&gt; (AST, String)</code></p>\n<p>表达式树的节点都是一些 <code>4</code> <code>+</code> 这种不同类型的数据，所以为了表示解析 <code>4</code> 成功和解析 <code>+</code> 成功，我们的返回值可以定义为泛型。并且表达出解析失败的情况，我们可以使用可选值。最终解析器函数就变成了：</p>\n<p><code>func parser&lt;T&gt;(_ string: String) -&gt; (T, String)?</code></p>\n<p>所以解析第一个数字 4 的解析器函数为：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parser</span>(<span class=\"keyword\">_</span> <span class=\"params\">string</span>: <span class=\"type\">String</span>)</span> -&gt; (<span class=\"type\">Int</span>, <span class=\"type\">String</span>)<span class=\"operator\">?</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> string.characters.first, head <span class=\"operator\">==</span> <span class=\"string\">&quot;4&quot;</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Optional</span>.some((<span class=\"number\">4</span>, <span class=\"type\">String</span>(string.characters.dropFirst())))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Combinator\"><a href=\"#Combinator\" class=\"headerlink\" title=\"Combinator\"></a>Combinator</h2><blockquote>\n<p>One of the distinguishing features of functional programming is the widespread use of combinators to construct programs. <em>A combinator is a function which builds program fragments from program fragments</em>; in a sense the programmer using combinators constructs much of the desired program automatically, rather that writing every detail by hand. – John Hughes</p>\n</blockquote>\n<p>其实 Combinator 很容易理解，就像字面意思那样 —— 组合子。首先定义一系列原子操作，然后定义组合的规则，然后根据组合的规则把这些原子操作组合起来。</p>\n<h2 id=\"Parser-Combinator\"><a href=\"#Parser-Combinator\" class=\"headerlink\" title=\"Parser Combinator\"></a>Parser Combinator</h2><p>回到开头的话：<em>解析组合子是由多个解析器为参数并返回一个解析器的高阶函数。</em> 所以我们需要重新定义一下我们的解析器，把它变成一个解析组合子。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parse: (<span class=\"type\">String</span>) -&gt; (<span class=\"type\">A</span>, <span class=\"type\">String</span>)<span class=\"operator\">?</span></span><br><span class=\"line\">    <span class=\"comment\">// (input) -&gt; (result, remaining)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是一个解析字符串的解析器，我们把这个函数放到一个结构体 <code>Parser</code> 中，作为一个 <code>parse</code> 变量。当然我们也可以用类型别名 <code>typealias Parser&lt;Result&gt; = (String) -&gt; (Result, String)?</code>。</p>\n<p>当然解析组合子不仅仅能解析字符串，所以可以用泛型来把它变得更通用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">I</span>, <span class=\"title\">O</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parse: (<span class=\"type\">I</span>) -&gt; (<span class=\"type\">O</span>, <span class=\"type\">I</span>)<span class=\"operator\">?</span></span><br><span class=\"line\">    <span class=\"comment\">// (input) -&gt; (output, remaining input)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以解析数字字符 <code>4</code> 的解析器就变成了：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">character4</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, head <span class=\"operator\">==</span> <span class=\"string\">&quot;4&quot;</span> <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&quot;4&quot;</span>, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以根据 <code>func character4() -&gt; Parser&lt;Character&gt;</code> 很容易得到一个能够解析任何字符的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">character</span>(<span class=\"keyword\">_</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, head <span class=\"operator\">==</span> character <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据 <code>character</code> 和 <code>digit</code> 的区别，很容易又得到能够解析任何数字的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">digit</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, <span class=\"string\">&quot;0&quot;</span><span class=\"operator\">...</span><span class=\"string\">&quot;9&quot;</span> <span class=\"operator\">~=</span> head <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据 <code>character</code> 和 <code>digit</code> 相同和不同，我们可以进一步抽象，把相同部分进行封装，把不同部分作为参数，得到新的解析器：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">satisfy</span>(<span class=\"keyword\">_</span> <span class=\"params\">condition</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">Character</span>) -&gt; <span class=\"type\">Bool</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> input.characters.first, condition(head) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (head, <span class=\"type\">String</span>(input.characters.dropFirst()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以解析数字：</p>\n<p><code>(satisfy &#123; &quot;0&quot;...&quot;9&quot; ~= $0 &#125;).parse(&quot;1abc&quot;)</code></p>\n<p>解析空格：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isSpace</span>(<span class=\"keyword\">_</span> <span class=\"params\">character</span>: <span class=\"type\">Character</span>)</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">String</span>(character).trimmingCharacters(in: .whitespacesAndNewlines).isEmpty</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(satisfy(isSpace)).parse(<span class=\"string\">&quot; abc&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>所以我们只需要给 <code>satisfy</code> 函数传入一个是否属于 X 的函数，就可以得到一个能够解析 x 的解析器。</p>\n<h2 id=\"Next\"><a href=\"#Next\" class=\"headerlink\" title=\"Next\"></a>Next</h2><p>最基本的 <code>character</code> 有了，<code>digit</code> 有了，当我们需要解析一个字符串 <code>alex</code> 的时候，我们只需要把 <code>alex</code> 看成 <code>a</code> <code>l</code> <code>e</code> <code>x</code> 4 个字符，然后不断的用 <code>character</code> 进行解析，最后把每一步返回的结果合并起来就行了。考虑到解析一个字符串是一个基本功能，为了不用每次写重复的代码，把它封装成用来解析 <code>string</code> 的解析器。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> parsers <span class=\"operator\">=</span> str.characters.map &#123; character(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">for</span> parser <span class=\"keyword\">in</span> parsers &#123;</span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> parser.parse(stream) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">String</span>(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察 parse 函数类型 <code>(String) -&gt; (A, String)</code>，解析成功的返回值是解析结果和 <strong>剩余</strong> 的字符串，所以解析 <code>alex</code> 的时候：</p>\n<ol>\n<li>“alex”: ‘a’ -&gt; (‘a’, “lex”)</li>\n<li>“lex”: ‘l’ -&gt; (‘l’, “ex”)</li>\n<li>“ex”: ‘e’ -&gt; (‘e’, “x”)</li>\n<li>“x”: ‘x’ -&gt; (‘x’, “”)</li>\n<li>Parser&lt;”alex”&gt;</li>\n</ol>\n<p>可以看到这几步做的事情除了参数不一样，内部逻辑是一样的，而且很容易看出是一个递归的过程，<strong>每次解析成功就 <code>吃掉</code> 第一个字符</strong>（留意这句话），然后解析剩下的字符串。</p>\n<p>所以我们写一个递归的版本：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 0. 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 先解析第一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> character(head).parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 然后解析剩下的所有</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder2) <span class=\"operator\">=</span> string1(<span class=\"type\">String</span>(tail)).parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 返回(&quot;结果&quot;, &quot;剩余的字符串&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (str, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uncons</span>&lt;<span class=\"type\">C</span>: <span class=\"type\">Collection</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: <span class=\"type\">C</span>)</span> -&gt; (<span class=\"type\">C</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span>, <span class=\"type\">C</span>.<span class=\"type\">SubSequence</span>)<span class=\"operator\">?</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> head <span class=\"operator\">=</span> xs.first <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (head, xs.suffix(from: xs.index(after: xs.startIndex)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>观察 1 和 2，在这两步中，我们都没有使用解析的 <strong>结果</strong>，这两步实现的仅仅是 <strong>每次解析成功就 <code>吃掉</code> 结果</strong>！最后在第 3 步一次将结果返回。也就是说我们 1 和 2 这两本并不关心结果，只关心这些要解析道字符存在就行了。</p>\n<p>我们把解析成功吃掉结果这一步封装一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留右边的解析器的结果 result2，没有 result1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result2, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>discarding</code> 函数会 <strong>吃掉</strong> 左边第一个参数 <code>x</code> 的解析结果，返回值中只保留右边 <code>y</code> 的解析结果。用 <code>discarding</code> 函数重写一下上面的 <code>string</code> 函数：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 1 吃掉 character(head) 的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder) <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail))).parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 2 返回 (&quot;结果&quot;, &quot;剩余的字符串&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (str, remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这次改版的 <code>string</code> 里面第 1 步中的解析结果还是被忽略了，所以是否可以继续用 <code>discarding</code> 来简化？但是 <code>discarding</code> 函数需要两个解析器，但函数内只有 <code>lift</code> 返回的一个解析器，所以没办法继续简化了？</p>\n<p>仔细看 <code>string</code> 函数体的第一行 <code>return Parser &#123;&#125;</code> 就是一个解析器，能否把这个解析器利用上呢？<code>discarding</code> 是在 <code>Parser &#123;&#125;</code> 里面的，所以只要能想办法把它展平，那么就能再次利用上 <code>lift</code>，而且展平后的解析器需要做为 <code>string</code> 函数的返回值，所以它肯定是做为 <code>discarding</code> 的右边的参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lift(x, y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>根据第 2 步的 <code>return (str, remainder)</code> 可以知道，最终的返回结果是 <code>(输入的，lhs 吃剩的)</code>，所以很容易得到 <code>let rhs = Parser&lt;String&gt; &#123; (str, $0) &#125;</code>。所以可以推出 lhs 要做的只是负责吃掉一部分。也就是上面的第 1 步所做的。所以：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&quot;&quot;</span>, input)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2 吃掉</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3 结果和剩下的</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (str, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4 返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数的返回值是 <code>Parser</code>，由于外面没有 Parser {} ，展开后 1 那里需要返回一个 <code>Parser</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (<span class=\"string\">&quot;&quot;</span>, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123; (str, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>明眼人可以看到 1 和 3 只有 <code>&quot;&quot;</code> 和 <code>str</code> 不一样，剩下的一模一样，虽然代码不长，但我们还是把它相同部分封装成一个函数，然后把不同的部分做为参赛。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">string</span>(<span class=\"keyword\">_</span> <span class=\"params\">str</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (head, tail) <span class=\"operator\">=</span> uncons(str.characters) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1 把空字符解析器去解析任何字符串，都认为是解析成功</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> pure(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lhs <span class=\"operator\">=</span> discarding(character(head), string2(<span class=\"type\">String</span>(tail)))</span><br><span class=\"line\">    <span class=\"comment\">// 3</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> rhs <span class=\"operator\">=</span> pure(str)</span><br><span class=\"line\">    <span class=\"comment\">// 4</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> discarding(lhs, rhs)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lift a value</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pure</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">A</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123; (x, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以封装一个简洁的 <code>string</code> 解析器，花了很多功夫，但抛开性能，它比迭代的版本更简洁易懂。</p>\n<h2 id=\"Combine\"><a href=\"#Combine\" class=\"headerlink\" title=\"Combine\"></a>Combine</h2><p>观察表达式 <code>( 4 + 3  )</code>，里面 <code>(</code> 和 <code>4</code> 之间有 1 个空格，数字 <code>3</code> 和 <code>)</code> 中间是有 2 个空格，在做加法运算的时候，这些 <em>many</em> 个空格是没有意义的，所以需要 <em>skip</em> 掉。</p>\n<h4 id=\"Many\"><a href=\"#Many\" class=\"headerlink\" title=\"Many\"></a>Many</h4><p>首先需要解析空格的解析器，前面已经有实现过：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">space</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> satisfy(isSpace)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于空格数量未知，可能有 <em>many</em> 个，假如有一个解析器，能够解析 <em>many</em> 个 parser。用一个 loop 不断去解析就能实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">A</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (results, stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>任意个空格就是：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many(space())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>spaces</code> 得到的是一个 <code>Parser&lt;[Character]&gt;</code> 类型的 parser，但是按照理解更希望得到一个 <code>Parser&lt;String&gt;</code> 类型的 parser。在 Swift 中，<code>String([Character])</code> 就能够将 <code>[Character]</code> 拍扁成 <code>String</code> 类型。所以把 <code>many</code> 稍微修改一下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many</span>&lt;<span class=\"type\">Character</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">String</span>(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为不是任何泛型 A 类型，都能用 String 拍扁，也不一定能通过其他类型进行拍扁，所以这里把泛型 A 去掉，直接用 Character 代替。但是这样做并不理想，因为 <code>many</code> 解析器从一个泛型解析器，变成了一个只能解析 Character 类型的解析器，变成了 <code>manyCharacter</code>。后面考虑解析这个问题，重新把 <code>many</code> 变成通用的解析器。</p>\n<h4 id=\"Skip\"><a href=\"#Skip\" class=\"headerlink\" title=\"Skip\"></a>Skip</h4><p>接着实现一个通用的 <code>skip</code> 解析器，它要做的事情很简单，输入什么吃掉什么，返回剩下的，和上面吃掉左边的 <code>discarding</code> 很像，不一样的是 <code>skip</code> 只有一个参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">skip</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((), input)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((), remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把 <code>skip</code> 和 <code>spaces</code> 进行组合：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">skipSpaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> skip(spaces)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Many1\"><a href=\"#Many1\" class=\"headerlink\" title=\"Many1\"></a>Many1</h4><p>前面实现的 <code>digit</code> 解析器，它只能解析个位数，这是没有什么卵用的。相比 <code>digit</code>，更加需要的是一个 <code>number</code> 解析器。一个 <em>number</em> 实际上也是由 <em>many</em> 个 <em>digit</em> 组成。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many(digit())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">number().parse(<span class=\"string\">&quot;123abc&quot;</span>) <span class=\"comment\">// ([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], &quot;abc&quot;)</span></span><br><span class=\"line\">number().parse(<span class=\"string\">&quot;abc&quot;</span>) <span class=\"comment\">// ([], &quot;abc&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<p>等等！<code>number().parse(&quot;abc&quot;)</code> 也解析成功了，结果是空数组。这并不是想要的结果，一个 <em>string</em> 可以是空的，<em>space</em> 甚至也可以是空的，但一个 <em>number</em> 不能是空的。所以需要另外一个只是有一个的 <code>many</code>。这其实很常见，比如正则表达式中有 <code>*</code> 和 <code>+</code>，一个 {0, +} 一个是 {1, +}。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many1</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"comment\">// 多加一个判断，第一个值必须满足条件</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">A</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (results, stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以正确的 <code>number</code> 解析器就变成：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">Character</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(digit())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里 <code>number</code> 解析器和 <code>spaces</code> 解析器遇到了同样的问题，<code>number</code> 解析器的结果应该是 <code>Int</code>（暂不考虑浮点数），而不是 <code>[Character]</code>。解决方法可以类似 <code>manyCharacter</code>，但是这显示是很有问题的，抽象抽象抽象！</p>\n<p>程序员要有抽象思维，要学会用更高的层次的思维去看待问题，发现不同问题的共同点。<code>[Character]</code> 可以用 <code>String([Character])</code> 变成一个 <code>String</code>。对于 <code>digit</code> character，同样的也是用 <code>String([Character])</code> 拍扁，然后用 <code>Int(String)</code> 得到一个 <code>number</code>。</p>\n<p>结合 Swift 的 OOP（面向协议编程），可以定义一个协议，暂且叫做 <code>Combinable</code> :D</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"keyword\">Self</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span>: <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Int</span>(<span class=\"type\">String</span>(describing: xs))<span class=\"operator\">!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span>: <span class=\"title\">Combinable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combine</span>(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: [<span class=\"type\">Character</span>])</span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">String</span>(describing: xs)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">many1</span>&lt;<span class=\"type\">A</span>: <span class=\"type\">Combinable</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> results: [<span class=\"type\">Character</span>] <span class=\"operator\">=</span> []</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stream <span class=\"operator\">=</span> input</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(stream) &#123;</span><br><span class=\"line\">            results.append(result)</span><br><span class=\"line\">            stream <span class=\"operator\">=</span> remainder</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">A</span>.combine(results), stream)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Int</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(digit())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> many1(space()) <span class=\"comment\">// 忽略 spaces 可以为空的情况</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上 <code>skipSpaces</code> 还可以用另外一个角度来拆分，上面先解析 <em>many</em> 个空格，然后一次 <em>skip</em> 掉。还可以每次 <em>skip</em> 一个空格，然后进行 <em>many</em> 次。不同的地方是 <code>skip</code> 和 <code>many</code> 两个 parser 的调用次序不一样，甚至还可以定义一个叫做 <code>skipMany</code> 的解析器，这也说明了 <strong>Combinator</strong> 的强大。通过定义一系列基础的 parser，进行不同的排列组合操作，最后覆盖所有的 case。（理想状态</p>\n<h4 id=\"Zip\"><a href=\"#Zip\" class=\"headerlink\" title=\"Zip\"></a>Zip</h4><p>合并两个 parser 的解析器 <code>zip</code> 的实现也很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">zip</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;(<span class=\"type\">A</span>, <span class=\"type\">B</span>)&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ((result1, result2), remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Choice\"><a href=\"#Choice\" class=\"headerlink\" title=\"Choice\"></a>Choice</h4><p>接下来还需要解析几个简单的一元运算符 <code>+</code> <code>-</code> <code>*</code> <code>/</code>。去掉空格后，两个数中间必须是其中一个运算符那么表达式就是合法的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">opt</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Character</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> opts <span class=\"operator\">=</span> [<span class=\"string\">&quot;+&quot;</span>, <span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;/&quot;</span>].map &#123; character(<span class=\"variable\">$0</span>.characters.first<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> choice(opts)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 也可以叫 one(of:)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">choice</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">S</span>: <span class=\"type\">Sequence</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">xs</span>: <span class=\"type\">S</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; <span class=\"keyword\">where</span> <span class=\"type\">S</span>.<span class=\"type\">Iterator</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xs.reduce(empty(), &#123; <span class=\"variable\">$0</span> <span class=\"operator\">&lt;|&gt;</span> <span class=\"variable\">$1</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span>&lt;<span class=\"type\">A</span>&gt;()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><p>上面利用 Protocol 实现的 <code>number</code> 和 <code>space</code> 解析器其实并不是很优雅，费了很大劲把 <code>many</code> 变得 <del>通用</del>，结果却并不是很 <strong>通用</strong>，因为要求结果的类型必须实现 <code>Combinable</code> 协议。但它做的工作却很少，只是把传入的 <code>Parser&lt;A&gt;</code> 循环解析得到的结果 <code>[A]</code> 在 <code>many</code> <strong>内部</strong> 组合成最终的类型，实现把 <code>Parser&lt;[A]</code> 转换为 <code>Parser&lt;B&gt;</code>。正由于它是在 <code>many</code> 内部做的操作，所以依赖于传入的类型，使得 <code>many</code> 不再那么通用。</p>\n<p>再看 <code>func character(_ character: Character) -&gt; Parser&lt;Character&gt;</code> 的定义，假如调用 <code>character(&quot;4&quot;)</code>，那么返回的是一个 <code>Parser&lt;Character&gt;</code> 类型的解析器，这个解析器调用 <code>parse</code> 方法，返回的结果是 <code>Character</code> 类型的值。在解析表达式 <code>4 + 3</code> 的时候，需要将解析到的 <code>4</code> 和 <code>3</code> 当作一个整数然后相加，才能得到最终的结果，所以不想要 <code>Character</code> 类型的值，而是想要 <code>Int</code> 类型的值，那么需要将 <code>Parser&lt;Character&gt;</code> 转换为 <code>Parser&lt;Int&gt;</code> 解析器。</p>\n<p>所以，假如能实现一个函数，可以将任意 <code>Parser&lt;A&gt;</code> 转换为 <code>Parser&lt;B&gt;</code> 解析器，就完美了。<code>many</code> 只负责将 <code>Parser&lt;A&gt;</code> 解析得到 <code>Parser&lt;[A]&gt;</code>，然后由 <code>number</code> 自己将 <code>Parser&lt;[A]&gt;</code> 转换为 <code>Parser&lt;Int&gt;</code>。</p>\n<h3 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h3><p>回忆 Swift 中 Optional 类型中的 map 方法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a: <span class=\"type\">Optional</span>&lt;<span class=\"type\">Int</span>&gt; <span class=\"operator\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b: <span class=\"type\">Optional</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> a.map &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>它将一个 <code>Optional&lt;Int&gt;</code> 转换为 <code>Optional&lt;String&gt;</code>，仔细一看，把 <code>Optional</code> 换成 <code>Parser</code>，就是我们所需要的转换解析器的方法。</p>\n<p><code>Optional</code> 的函数签名是 <code>func map&lt;U&gt;(_ transform: (Wrapped) -&gt; U) -&gt; U?</code>，所以依葫芦画瓢，我们可以得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Parser</span>&lt;<span class=\"title\">A</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">transform</span>: (<span class=\"type\">A</span>) -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.parse(input) <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (transform(result), remainder)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像上面的 <code>satisfy</code> 和其他函数一样，把 <code>map</code> 方法从结构图内移出来，则得到：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">A</span>) -&gt; <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(input)<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (f(result), remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于值是在 <code>Parser</code> 中包裹着的，想把返回的 <code>Parser&lt;Character</code> 变成 <code>Parser&lt;Int&gt;</code>，需要把 <code>Parser&lt;Character&gt;</code> 解开取出里面<Character>的值，然后把它变成<Int>类型，然后重现包装起来。对于不同的类型转换，解包重新包装的步骤是一样的，不同的地方是把结果从一种类型变成另一种类型，函数的作用就是把相同的封装起来，把不同做为参赛传进去，所以在 <code>map</code> 函数的实现中，只需要在返回前，给外部将这个结果进行一次转换机会，所以需要一个参赛，能够将解开后得到的值变成另一种类型的值，也就是提供一个函数 <code>(Character) -&gt; Int</code>。</p>\n<p>重新实现 <code>number</code> 和 <code>spaces</code>：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">number</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">Int</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map(many1(digit()), &#123; <span class=\"type\">Int</span>(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">spaces</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map(many(space()), &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两种不同的结构体 <code>Optional&lt;T&gt;</code> 和 <code>Parser&lt;A&gt;</code>，都可以给它实现一个 <code>map</code> 方法，使得它变成一个不同类型的结构体。而支持这种 <code>map</code> 方法的结构体，我们称把它为 <code>Functor</code>。</p>\n<blockquote>\n<p>简单来说，所谓的 <code>Functor</code> 就是可以把一个函数应用于一个 <strong>封装过的值</strong> 上，得到一个新的 <strong>封装过的值</strong></p>\n</blockquote>\n<p><code>Functor</code> 最早出自于代数拓扑，这里说的 <code>Functor</code> 一般是指范畴论（Category Theory）中的 <code>Functor</code>，它被用来描述各种范畴间的关系。更多 Functor 的理解 <a href=\"http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/\">Group Theory and Category Theory</a>。</p>\n<h3 id=\"Applicative\"><a href=\"#Applicative\" class=\"headerlink\" title=\"Applicative\"></a>Applicative</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pure</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">A</span>)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123; (x, <span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上前面的 <code>pure</code> 和 <code>discarding</code> 函数就是一种 Applicative。像 <code>discarding</code> 一样有时候只关心这些要解析道字符存在就行了，上面定义的 <code>discarding</code> 解析器作用是忽略第一个 parser 参数的解析结果，同样地，可以定义一个忽略第二个 parser 参数的解析器。比如当解析出现在右边的 symbol 的时候就很有用，<code>discarding2(parser, string(&quot;)&quot;))</code> 的作用就是确保存在闭合的右括号 “)”。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉右边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding2</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留左边的解析器的结果 result1，没有 result2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result1, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉左边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding1</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只保留右边的解析器的结果 result2，没有 result1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (result2, remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这两个 <code>discarding</code> 函数长的很像，如果有办法把它们抽象一下，把相似的地方提取出来就好了。</p>\n<p>对于两个结果，忽略其中一个，实际上很简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 忽略 B</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 忽略 A</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 吃掉左边的结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">left</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">discarding</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">a</span>: <span class=\"type\">A</span>, <span class=\"keyword\">_</span> <span class=\"params\">b</span>: <span class=\"type\">B</span>)</span> -&gt; <span class=\"type\">A</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result1, remainder1) <span class=\"operator\">=</span> x.parse(input) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result2, remainder2) <span class=\"operator\">=</span> y.parse(remainder1) <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (discarding(result1, result2), remainder2)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后这个函数并没有卵用。</p>\n<h3 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h3><p>观看 <code>map</code> 函数 <code>func map&lt;A, B&gt;(_ x: Parser&lt;A&gt;, _ f: (A) -&gt; B) -&gt; Parser&lt;B&gt;</code></p>\n<p>它要求传入两个参数，一个是 <code>Parser&lt;A&gt;</code>，一个是函数 <code>A -&gt; B</code>，第二个参数对标题中的 <strong>Combinator</strong> 并不是很友好，<strong>Parser Combinator</strong> 的思想是组合一系列的 <code>Parser</code> 得到结果。上面定义了有很多小的 parser，比如 <code>func string(_ str: String) -&gt; Parser&lt;String&gt;</code>，函数签名是 <code>(String) -&gt; Parser&lt;String&gt;</code>，由于 <code>map</code> 函数的第二个参数的签名是 <code>(A) -&gt; B</code>，而非 <code>(A) -&gt; Parser&lt;B&gt;</code>，所以假如存在一个与 <code>map</code> 功能相似，但第二个参数的签名是 <code>(A) -&gt; Parser&lt;B&gt;</code>，则能够使得之前定义的很多小的 <code>parser</code> 能够直接作为一个参数，直接得到一个新类型的 <code>Parser</code>，大概这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: (<span class=\"type\">A</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>使用的时候：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parser <span class=\"operator\">=</span> flatMap(stringParser, string(<span class=\"string\">&quot;alex&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>具体实现与 <code>map</code> 也很像：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">flatMap</span>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">f</span>: <span class=\"keyword\">@escaping</span> (<span class=\"type\">A</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">B</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">guard</span> <span class=\"keyword\">let</span> (result, remainder) <span class=\"operator\">=</span> x.parse(input)<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(result).parse(remainder)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://blessingsoft.com/2017/06/12/group-theory-and-category-theory/\">Group Theory and Category Theory</a></p>\n<h3 id=\"Alternative\"><a href=\"#Alternative\" class=\"headerlink\" title=\"Alternative\"></a>Alternative</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">empty</span>&lt;<span class=\"type\">A</span>&gt;()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; <span class=\"keyword\">_</span> <span class=\"keyword\">in</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">choice</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;, <span class=\"keyword\">_</span> <span class=\"params\">y</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Parser</span> &#123; input <span class=\"keyword\">in</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.parse(input) <span class=\"operator\">??</span> y.parse(input)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Alternative 类似于 <code>Swift Standard Library</code> 中定义的运算符 <code>??</code>，它有两个同类型的参数，第一个参数是偏爱的 <code>parser</code>，第二个参数是默认的 <code>parser</code>。它首先尝试使用第一个 <code>parser</code> 来进行解析，如果成功，则返回。如果不成功，则使用默认的 <code>parser</code> 进行解析。它的返回值类型也是同类型的 <code>Parser</code>。</p>\n<p>作用是假如有 Int, String, Bool 三个类型的 <code>parser</code>，而一个 scalar 类型的 <code>parser</code> 只要能够解析 Int, String, Bool 任意一种类型，则算解析成功。换句话说就是 scalar 是 Int, String, Bool 的父集。一种简单的从 <code>Parser&lt;Int&gt;</code>, <code>Parser&lt;String&gt;</code>, <code>Parser&lt;Bool&gt;</code> 三种已有实现的 parser 得到 <code>Parser&lt;Scalar&gt;</code> 的方法是逐个进行 parse，如果成功则马上返回。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scalar <span class=\"operator\">=</span> parserInt <span class=\"operator\">&lt;|&gt;</span> parserString <span class=\"operator\">&lt;|&gt;</span> parserBool</span><br></pre></td></tr></table></figure>\n\n<p>从这个例子看有点 one of 的意思，但实际上更加准确的说法是 choice。</p>\n<h3 id=\"Applicative-amp-Monad\"><a href=\"#Applicative-amp-Monad\" class=\"headerlink\" title=\"Applicative &amp; Monad\"></a>Applicative &amp; Monad</h3><p>Applicative 和 Monad 的区别在于：</p>\n<p>Applicative 的两个 parser 是相互独立的，组合后的新 parser 是可以静态分析其行为的。而对于 Monad，在不知道输入的情况下，是不能确定其行为，也就是说 Monad 是依赖于计算结果。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">alex</span>(<span class=\"keyword\">_</span> <span class=\"params\">x</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt;)</span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> (<span class=\"keyword\">_</span>, <span class=\"keyword\">_</span>) <span class=\"operator\">=</span> x.parse(<span class=\"string\">&quot;alex.huo&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> af: <span class=\"type\">Parser</span>&lt;(<span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> pure(id)</span><br><span class=\"line\"><span class=\"keyword\">let</span> ax <span class=\"operator\">=</span> string(<span class=\"string\">&quot;alex&quot;</span>)</span><br><span class=\"line\">alex(af <span class=\"operator\">&lt;*&gt;</span> ax) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mf: (<span class=\"type\">String</span>) -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"operator\">=</span> &#123; string(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mx <span class=\"operator\">=</span> string(<span class=\"string\">&quot;alex&quot;</span>)</span><br><span class=\"line\">alex(mx <span class=\"operator\">&gt;&gt;-</span> mf) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://github.com/hlian/jiffy\">Jiffy</a><br><a href=\"https://news.realm.io/news/tryswift-yasuhiro-inami-parser-combinator/\">Parser combinators</a><br><a href=\"http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf\">Monadic Parser Combinators</a></p>\n"},{"title":"PATs","date":"2018-08-26T12:00:00.000Z","_content":"> 更新：随着 Swift 中一些新的提案（如 [SE-0309](https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md) 和 [SE-0335](https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md)）的提出，大大的简化了 Swift 中的 Protocol 的使用，文中的一些概念或者观点抑或是写法已经显得落后而不适用。--2022.01.01\n\n> 很久没有写 Swift 了，闲着写几行玩玩的时候，遇到了一个之前没有接触过的问题——Protocol with Associated Types\n\n## Protocol-Oriented Programming\n\n首先 Swift 是一个 **支持** 面向协议编程思想的语言，并且 [Standard Library](https://github.com/apple/swift) 也是大量使用这种思想来实现很多的特性。（这里删掉介绍 POP 以及对应优缺点的几千字\n\n先看看用 POP 的思想，来实现一个 Cache：\n\n```swift\nprotocol Caching {\n    var name: String { get }\n}\n\nstruct MemoryCache: Caching {\n    var name: String {\n        return \"Memory Cache\"\n    }\n}\n\nstruct DiskCache: Caching {\n    var name: String {\n        return \"Disk Cache\"\n    }\n}\n\nlet memory: Caching = MemoryCache() // 🙂️\nlet disk: Caching = DiskCache() // 🙂️\nlet caches: [Caching] = [memory, disk] // 🙂️\n```\n\n到这里，一切都是很熟悉的样子，也能正常的 work，类似这样的**用一个 *protocol* 来进行接口（行为）约束**的代码估计写的也不少。\n\n## Generics\n\n> 作为一个现代语言，泛型是必须支持的。作为一个现代程序员，泛型也是必须会使用的。\n\nCache  是用来缓存数据的，但有很多数据类型都适合被缓存，比如一张图片，一个视频等等。如果希望不同类型的数据有不同的缓存策略，使用的时候也能直接获取某一种类型的缓存，不需要各种 `as? XXX`，立马想到的就是泛型。\n\n泛型还不简单：\n\n```swift\nprotocol Caching {\n    associatedtype Object\n\n    func store(_ object: Object, forKey key: String)\n    func retrieve(forKey key: String) -> Object?\n}\n\nstruct MemoryCache: Caching {\n    typealias Object = UIImage\n\n    func store(_ object: Object, forKey key: String) {\n        //\n    }\n    func retrieve(forKey key: String) -> Object? {\n        //\n    }\n}\n\nstruct DiskCache: Caching {\n    typealias Object = UIImage\n\n    func store(_ object: Object, forKey key: String) {\n        //\n    }\n    func retrieve(forKey key: String) -> Object? {\n        //\n    }\n}\n\nlet memory: Caching = MemoryCache() // 🙃\nlet disk: Caching = DiskCache() // 🙃\nlet caches: [Caching] = [memory, disk] // 🙃\n```\n\n然后 Xcode 就好很无情的提示你：\n\n> ❗️Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n\nWTF?\n\n## What is Protocol with Associated Types?\n\n看到这个错误提示，有经验的 Swift  程序员一般会想到，`Caching` 里面关联了一个类型，如果不指定这个关联的类型的具体类型是什么，作为一门静态语言，那可能就无法知道内存是怎么布局的。\n\n既然需要指定类型，马上想到的就是 *泛型参数*。\n\n```swift\nlet cache: Caching<UIImage> =  ...\n// ❗️Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n```\n\n```swift\nprotocol Caching<Object> {\n}\n// ❗️Protocols do not allow generic parameters; use associated types instead\n```\n\nWTF？\n\n## Protocol as Types\n\n突然发现自己好像一点都不了解 protocol，看看文档介绍[Protocols — The Swift Programming Language (Swift 4.2)](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html)。里面 Protocol as Types 一节有一段话：\n\n> Protocols don’t actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.\n> Because it’s a type, you can use a protocol in many places where other types are allowed, including:\n> * As a parameter type or return type in a function, method, or initializer\n> * As the type of a constant, variable, or property\n> * As the type of items in an array, dictionary, or other container\n\n为什么 protocol + generic 就这么难用？应该怎么用？\n\n## PATs in Swift Standard Library\n\n既然不会用，那么看看 Standard Library 里面是如何使用的。\n\n```swift\npublic protocol IteratorProtocol {\n    /// The type of element traversed by the iterator.\n    associatedtype Element\n\n    /// - Returns: The next element in the underlying sequence, if a next element\n    ///   exists; otherwise, `nil`.\n    mutating func next() -> Element?\n}\n\npublic protocol Sequence {\n    /// A type representing the sequence's elements.\n    associatedtype Element\n\n    /// A type that provides the sequence's iteration interface and\n    /// encapsulates its iteration state.\n    associatedtype Iterator : IteratorProtocol where Iterator.Element == Element\n\n    /// Returns an iterator over the elements of this sequence.\n    func makeIterator() -> Iterator\n}\n```\n\n然后又发现有一个叫 `AnyIterator` 和 `AnySequence` 的东西。\n\n```swift\npublic struct AnyIterator<Element> {\n    internal let _box: _AnyIteratorBoxBase<Element>\n\n    public init<I : IteratorProtocol>(_ base: I) where I.Element == Element {\n        self._box = _IteratorBox(base)\n    }\n\n    public init(_ body: @escaping () -> Element?) {\n        self._box = _IteratorBox(_ClosureBasedIterator(body))\n    }\n\n    internal init(_box: _AnyIteratorBoxBase<Element>) {\n        self._box = _box\n    }\n}\n\nextension AnyIterator: IteratorProtocol {\n\n    public func next() -> Element? {\n        return _box.next()\n    }\n}\n\npublic struct AnySequence<Element> {\n    internal let _box: _AnySequenceBox<Element>\n\n    public init<I : IteratorProtocol>(_ makeUnderlyingIterator: @escaping () -> I) where I.Element == Element {\n        self.init(_ClosureBasedSequence(makeUnderlyingIterator))\n    }\n\n    internal init(_box: _AnySequenceBox<Element>) {\n        self._box = _box\n    }\n}\n\nextension AnySequence: Sequence {\n    public typealias Iterator = AnyIterator<Element>\n\n    public init<S : Sequence>(_ base: S) where S.Element == Element {\n        self._box = _SequenceBox(_base: base)\n    }\n}\n```\n\n这是什么鬼，先看看文档：\n\n> This iterator forwards its next() method to an arbitrary underlying iterator having the same Element type, hiding the specifics of the underlying IteratorProtocol. —[AnyIterator - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anyiterator)\n\n> An instance of AnySequence forwards its operations to an underlying base sequence having the same Element type, hiding the specifics of the underlying sequence. —[AnySequence - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anysequence)\n\n说白了就是包装一层，转发一下，它有个术语叫做 **Type Erasure**\n\n## What is Type Erasure?\n\n首先 Swift 的类型系统里面，有两种类型：\n\n* Concrete Type: Int, Bool…\n* Abstract Type: associatedType, <T>\n\n对于抽象类型来说，编译器无法知道这个类型的确切功能。当编译器处理抽象类型的时候，它无法知晓其所占的空间大小；甚至可能会认为这个类型是不存在的。Swift 是静态语言。\n\n> Type erasure is a process in code that makes abstract types concrete.\n\n具体看看 Swift Standard Library 里面，是怎么做到的：\n\n```swift\n// 1. abstract base\ninternal class _AnyIteratorBoxBase<Element> : IteratorProtocol {\n    internal init() {}\n\n    internal func next() -> Element? { _abstract() }\n}\n\n// 2. private box\ninternal final class _IteratorBox<Base : IteratorProtocol> : _AnyIteratorBoxBase<Base.Element> {\n    internal init(_ base: Base) { self._base = base }\n\n    internal override func next() -> Base.Element? { return _base.next() }\n\n    internal var _base: Base\n}\n\n// 3. public wrapper\npublic struct AnyIterator<Element> {\n    internal let _box: _AnyIteratorBoxBase<Element>\n\n    public init<I : IteratorProtocol>(_ base: I) where I.Element == Element {\n        self._box = _IteratorBox(base)\n    }\n\n    public init(_ body: @escaping () -> Element?) {\n        self._box = _IteratorBox(_ClosureBasedIterator(body))\n    }\n\n    internal init(_box: _AnyIteratorBoxBase<Element>) {\n        self._box = _box\n    }\n}\n```\n\n这个模式概括起来就是三个步骤：\n\n* an abstract base class\n* a private box class\n* a public wrapper class\n\n（想了解更多相关的理论知识？*Existential* 了解一下\n\n## One more thing\n\n到这里，我以为我已经掌握了如何用 PATs 了，然后有一天，我开始写一个轻量级的日志系统。\n\n```swift\nprotocol Logging: Hashtable {\n}\n```\n\n```swift\nlet loggers: Set<Logging> = []\n// ❗️Using 'Logging' as a concrete type conforming to protocol 'Hashable' is no supported\n```\n\n```swift\nfunc add(_ logger: Logging) {\n}\n// ❗️Protocol 'Logging' can only be used as generic constraint because it has Self or associated type requirements\n```\n\n看到这熟悉的错误，马上就想到 `Hashable` 其实是继承 `Equatable` 的，然后这个 `Equatable` 的几个方法里面，用了 `Self` 来占位，它其实也是 PATs 的一种。意不意外，惊不惊喜。（其实一点都不意外\n\n然后就是 type erasure 了，真正根据上面的三个步骤来写的时候，发现好像跟之前的又有点不太一样，因为它没有关联别的类型。\n\n```swift\n// 1. abstract baes\nclass _AnyLoggerBoxBase<T> : Logging {\n}\n\n// 2. private box\nclass _LoggerBox<Base : Logging> : _AnyLoggerBoxBase <Base.Self> {\n}\n\n// 3. public wrapper\nstruct AnyLogger<T> {\n    init<L : Logging>(_ base: L) where L.Self == Self {\n    }\n}\n```\n\n这三步里面的泛型参数像是多出来的，根本无从下手。\n\n> 遇到不懂，首先看源码总是不会有错。— 圣人\n\n了解 Swift 的都知道，有一个叫做 `AnyHashable` 的东西。（一顿抄，完事\n\n## Ref\n\n* [Alexis Gallagher - Protocols with Associated Types - YouTube](https://www.youtube.com/watch?v=XWoNjiSPqI8&t=2391s)\n* [Keep Calm and Type Erase On](https://academy.realm.io/posts/tryswift-gwendolyn-weston-type-erasure/)\n* [AnySequence - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anysequence)\n* [swift/ExistentialCollection.swift.gyb at master · apple/swift · GitHub](https://github.com/apple/swift/blob/master/stdlib/public/core/ExistentialCollection.swift.gyb)\n* [swift/AnyHashable.swift at master · apple/swift · GitHub](https://github.com/apple/swift/blob/master/stdlib/public/core/AnyHashable.swift)","source":"_posts/pats.md","raw":"---\ntitle: PATs\ndate: 2018-08-26 20:00:00\ntags:\n\t- swift\n\t- type erasure\n\t- type erased\n\t- pats\n\t- protocol\n\t- generic\ncategories: advanced swift\n---\n> 更新：随着 Swift 中一些新的提案（如 [SE-0309](https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md) 和 [SE-0335](https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md)）的提出，大大的简化了 Swift 中的 Protocol 的使用，文中的一些概念或者观点抑或是写法已经显得落后而不适用。--2022.01.01\n\n> 很久没有写 Swift 了，闲着写几行玩玩的时候，遇到了一个之前没有接触过的问题——Protocol with Associated Types\n\n## Protocol-Oriented Programming\n\n首先 Swift 是一个 **支持** 面向协议编程思想的语言，并且 [Standard Library](https://github.com/apple/swift) 也是大量使用这种思想来实现很多的特性。（这里删掉介绍 POP 以及对应优缺点的几千字\n\n先看看用 POP 的思想，来实现一个 Cache：\n\n```swift\nprotocol Caching {\n    var name: String { get }\n}\n\nstruct MemoryCache: Caching {\n    var name: String {\n        return \"Memory Cache\"\n    }\n}\n\nstruct DiskCache: Caching {\n    var name: String {\n        return \"Disk Cache\"\n    }\n}\n\nlet memory: Caching = MemoryCache() // 🙂️\nlet disk: Caching = DiskCache() // 🙂️\nlet caches: [Caching] = [memory, disk] // 🙂️\n```\n\n到这里，一切都是很熟悉的样子，也能正常的 work，类似这样的**用一个 *protocol* 来进行接口（行为）约束**的代码估计写的也不少。\n\n## Generics\n\n> 作为一个现代语言，泛型是必须支持的。作为一个现代程序员，泛型也是必须会使用的。\n\nCache  是用来缓存数据的，但有很多数据类型都适合被缓存，比如一张图片，一个视频等等。如果希望不同类型的数据有不同的缓存策略，使用的时候也能直接获取某一种类型的缓存，不需要各种 `as? XXX`，立马想到的就是泛型。\n\n泛型还不简单：\n\n```swift\nprotocol Caching {\n    associatedtype Object\n\n    func store(_ object: Object, forKey key: String)\n    func retrieve(forKey key: String) -> Object?\n}\n\nstruct MemoryCache: Caching {\n    typealias Object = UIImage\n\n    func store(_ object: Object, forKey key: String) {\n        //\n    }\n    func retrieve(forKey key: String) -> Object? {\n        //\n    }\n}\n\nstruct DiskCache: Caching {\n    typealias Object = UIImage\n\n    func store(_ object: Object, forKey key: String) {\n        //\n    }\n    func retrieve(forKey key: String) -> Object? {\n        //\n    }\n}\n\nlet memory: Caching = MemoryCache() // 🙃\nlet disk: Caching = DiskCache() // 🙃\nlet caches: [Caching] = [memory, disk] // 🙃\n```\n\n然后 Xcode 就好很无情的提示你：\n\n> ❗️Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n\nWTF?\n\n## What is Protocol with Associated Types?\n\n看到这个错误提示，有经验的 Swift  程序员一般会想到，`Caching` 里面关联了一个类型，如果不指定这个关联的类型的具体类型是什么，作为一门静态语言，那可能就无法知道内存是怎么布局的。\n\n既然需要指定类型，马上想到的就是 *泛型参数*。\n\n```swift\nlet cache: Caching<UIImage> =  ...\n// ❗️Protocol 'Caching' can only be used as generic constraint because it has Self or associated type requirements\n```\n\n```swift\nprotocol Caching<Object> {\n}\n// ❗️Protocols do not allow generic parameters; use associated types instead\n```\n\nWTF？\n\n## Protocol as Types\n\n突然发现自己好像一点都不了解 protocol，看看文档介绍[Protocols — The Swift Programming Language (Swift 4.2)](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html)。里面 Protocol as Types 一节有一段话：\n\n> Protocols don’t actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.\n> Because it’s a type, you can use a protocol in many places where other types are allowed, including:\n> * As a parameter type or return type in a function, method, or initializer\n> * As the type of a constant, variable, or property\n> * As the type of items in an array, dictionary, or other container\n\n为什么 protocol + generic 就这么难用？应该怎么用？\n\n## PATs in Swift Standard Library\n\n既然不会用，那么看看 Standard Library 里面是如何使用的。\n\n```swift\npublic protocol IteratorProtocol {\n    /// The type of element traversed by the iterator.\n    associatedtype Element\n\n    /// - Returns: The next element in the underlying sequence, if a next element\n    ///   exists; otherwise, `nil`.\n    mutating func next() -> Element?\n}\n\npublic protocol Sequence {\n    /// A type representing the sequence's elements.\n    associatedtype Element\n\n    /// A type that provides the sequence's iteration interface and\n    /// encapsulates its iteration state.\n    associatedtype Iterator : IteratorProtocol where Iterator.Element == Element\n\n    /// Returns an iterator over the elements of this sequence.\n    func makeIterator() -> Iterator\n}\n```\n\n然后又发现有一个叫 `AnyIterator` 和 `AnySequence` 的东西。\n\n```swift\npublic struct AnyIterator<Element> {\n    internal let _box: _AnyIteratorBoxBase<Element>\n\n    public init<I : IteratorProtocol>(_ base: I) where I.Element == Element {\n        self._box = _IteratorBox(base)\n    }\n\n    public init(_ body: @escaping () -> Element?) {\n        self._box = _IteratorBox(_ClosureBasedIterator(body))\n    }\n\n    internal init(_box: _AnyIteratorBoxBase<Element>) {\n        self._box = _box\n    }\n}\n\nextension AnyIterator: IteratorProtocol {\n\n    public func next() -> Element? {\n        return _box.next()\n    }\n}\n\npublic struct AnySequence<Element> {\n    internal let _box: _AnySequenceBox<Element>\n\n    public init<I : IteratorProtocol>(_ makeUnderlyingIterator: @escaping () -> I) where I.Element == Element {\n        self.init(_ClosureBasedSequence(makeUnderlyingIterator))\n    }\n\n    internal init(_box: _AnySequenceBox<Element>) {\n        self._box = _box\n    }\n}\n\nextension AnySequence: Sequence {\n    public typealias Iterator = AnyIterator<Element>\n\n    public init<S : Sequence>(_ base: S) where S.Element == Element {\n        self._box = _SequenceBox(_base: base)\n    }\n}\n```\n\n这是什么鬼，先看看文档：\n\n> This iterator forwards its next() method to an arbitrary underlying iterator having the same Element type, hiding the specifics of the underlying IteratorProtocol. —[AnyIterator - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anyiterator)\n\n> An instance of AnySequence forwards its operations to an underlying base sequence having the same Element type, hiding the specifics of the underlying sequence. —[AnySequence - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anysequence)\n\n说白了就是包装一层，转发一下，它有个术语叫做 **Type Erasure**\n\n## What is Type Erasure?\n\n首先 Swift 的类型系统里面，有两种类型：\n\n* Concrete Type: Int, Bool…\n* Abstract Type: associatedType, <T>\n\n对于抽象类型来说，编译器无法知道这个类型的确切功能。当编译器处理抽象类型的时候，它无法知晓其所占的空间大小；甚至可能会认为这个类型是不存在的。Swift 是静态语言。\n\n> Type erasure is a process in code that makes abstract types concrete.\n\n具体看看 Swift Standard Library 里面，是怎么做到的：\n\n```swift\n// 1. abstract base\ninternal class _AnyIteratorBoxBase<Element> : IteratorProtocol {\n    internal init() {}\n\n    internal func next() -> Element? { _abstract() }\n}\n\n// 2. private box\ninternal final class _IteratorBox<Base : IteratorProtocol> : _AnyIteratorBoxBase<Base.Element> {\n    internal init(_ base: Base) { self._base = base }\n\n    internal override func next() -> Base.Element? { return _base.next() }\n\n    internal var _base: Base\n}\n\n// 3. public wrapper\npublic struct AnyIterator<Element> {\n    internal let _box: _AnyIteratorBoxBase<Element>\n\n    public init<I : IteratorProtocol>(_ base: I) where I.Element == Element {\n        self._box = _IteratorBox(base)\n    }\n\n    public init(_ body: @escaping () -> Element?) {\n        self._box = _IteratorBox(_ClosureBasedIterator(body))\n    }\n\n    internal init(_box: _AnyIteratorBoxBase<Element>) {\n        self._box = _box\n    }\n}\n```\n\n这个模式概括起来就是三个步骤：\n\n* an abstract base class\n* a private box class\n* a public wrapper class\n\n（想了解更多相关的理论知识？*Existential* 了解一下\n\n## One more thing\n\n到这里，我以为我已经掌握了如何用 PATs 了，然后有一天，我开始写一个轻量级的日志系统。\n\n```swift\nprotocol Logging: Hashtable {\n}\n```\n\n```swift\nlet loggers: Set<Logging> = []\n// ❗️Using 'Logging' as a concrete type conforming to protocol 'Hashable' is no supported\n```\n\n```swift\nfunc add(_ logger: Logging) {\n}\n// ❗️Protocol 'Logging' can only be used as generic constraint because it has Self or associated type requirements\n```\n\n看到这熟悉的错误，马上就想到 `Hashable` 其实是继承 `Equatable` 的，然后这个 `Equatable` 的几个方法里面，用了 `Self` 来占位，它其实也是 PATs 的一种。意不意外，惊不惊喜。（其实一点都不意外\n\n然后就是 type erasure 了，真正根据上面的三个步骤来写的时候，发现好像跟之前的又有点不太一样，因为它没有关联别的类型。\n\n```swift\n// 1. abstract baes\nclass _AnyLoggerBoxBase<T> : Logging {\n}\n\n// 2. private box\nclass _LoggerBox<Base : Logging> : _AnyLoggerBoxBase <Base.Self> {\n}\n\n// 3. public wrapper\nstruct AnyLogger<T> {\n    init<L : Logging>(_ base: L) where L.Self == Self {\n    }\n}\n```\n\n这三步里面的泛型参数像是多出来的，根本无从下手。\n\n> 遇到不懂，首先看源码总是不会有错。— 圣人\n\n了解 Swift 的都知道，有一个叫做 `AnyHashable` 的东西。（一顿抄，完事\n\n## Ref\n\n* [Alexis Gallagher - Protocols with Associated Types - YouTube](https://www.youtube.com/watch?v=XWoNjiSPqI8&t=2391s)\n* [Keep Calm and Type Erase On](https://academy.realm.io/posts/tryswift-gwendolyn-weston-type-erasure/)\n* [AnySequence - Swift Standard Library | Apple Developer Documentation](https://developer.apple.com/documentation/swift/anysequence)\n* [swift/ExistentialCollection.swift.gyb at master · apple/swift · GitHub](https://github.com/apple/swift/blob/master/stdlib/public/core/ExistentialCollection.swift.gyb)\n* [swift/AnyHashable.swift at master · apple/swift · GitHub](https://github.com/apple/swift/blob/master/stdlib/public/core/AnyHashable.swift)","slug":"pats","published":1,"updated":"2022-01-02T11:27:52.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xf000g9ith0tr985fe","content":"<blockquote>\n<p>更新：随着 Swift 中一些新的提案（如 <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md\">SE-0309</a> 和 <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md\">SE-0335</a>）的提出，大大的简化了 Swift 中的 Protocol 的使用，文中的一些概念或者观点抑或是写法已经显得落后而不适用。–2022.01.01</p>\n</blockquote>\n<blockquote>\n<p>很久没有写 Swift 了，闲着写几行玩玩的时候，遇到了一个之前没有接触过的问题——Protocol with Associated Types</p>\n</blockquote>\n<h2 id=\"Protocol-Oriented-Programming\"><a href=\"#Protocol-Oriented-Programming\" class=\"headerlink\" title=\"Protocol-Oriented Programming\"></a>Protocol-Oriented Programming</h2><p>首先 Swift 是一个 <strong>支持</strong> 面向协议编程思想的语言，并且 <a href=\"https://github.com/apple/swift\">Standard Library</a> 也是大量使用这种思想来实现很多的特性。（这里删掉介绍 POP 以及对应优缺点的几千字</p>\n<p>先看看用 POP 的思想，来实现一个 Cache：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MemoryCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Memory Cache&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiskCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Disk Cache&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> memory: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">MemoryCache</span>() <span class=\"comment\">// 🙂️</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> disk: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">DiskCache</span>() <span class=\"comment\">// 🙂️</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> caches: [<span class=\"type\">Caching</span>] <span class=\"operator\">=</span> [memory, disk] <span class=\"comment\">// 🙂️</span></span><br></pre></td></tr></table></figure>\n\n<p>到这里，一切都是很熟悉的样子，也能正常的 work，类似这样的<strong>用一个 <em>protocol</em> 来进行接口（行为）约束</strong>的代码估计写的也不少。</p>\n<h2 id=\"Generics\"><a href=\"#Generics\" class=\"headerlink\" title=\"Generics\"></a>Generics</h2><blockquote>\n<p>作为一个现代语言，泛型是必须支持的。作为一个现代程序员，泛型也是必须会使用的。</p>\n</blockquote>\n<p>Cache  是用来缓存数据的，但有很多数据类型都适合被缓存，比如一张图片，一个视频等等。如果希望不同类型的数据有不同的缓存策略，使用的时候也能直接获取某一种类型的缓存，不需要各种 <code>as? XXX</code>，立马想到的就是泛型。</p>\n<p>泛型还不简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MemoryCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Object</span> <span class=\"operator\">=</span> <span class=\"type\">UIImage</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>? &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiskCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Object</span> <span class=\"operator\">=</span> <span class=\"type\">UIImage</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>? &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> memory: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">MemoryCache</span>() <span class=\"comment\">// 🙃</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> disk: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">DiskCache</span>() <span class=\"comment\">// 🙃</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> caches: [<span class=\"type\">Caching</span>] <span class=\"operator\">=</span> [memory, disk] <span class=\"comment\">// 🙃</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 Xcode 就好很无情的提示你：</p>\n<blockquote>\n<p>❗️Protocol ‘Caching’ can only be used as generic constraint because it has Self or associated type requirements</p>\n</blockquote>\n<p>WTF?</p>\n<h2 id=\"What-is-Protocol-with-Associated-Types\"><a href=\"#What-is-Protocol-with-Associated-Types\" class=\"headerlink\" title=\"What is Protocol with Associated Types?\"></a>What is Protocol with Associated Types?</h2><p>看到这个错误提示，有经验的 Swift  程序员一般会想到，<code>Caching</code> 里面关联了一个类型，如果不指定这个关联的类型的具体类型是什么，作为一门静态语言，那可能就无法知道内存是怎么布局的。</p>\n<p>既然需要指定类型，马上想到的就是 <em>泛型参数</em>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cache: <span class=\"type\">Caching</span>&lt;<span class=\"type\">UIImage</span>&gt; <span class=\"operator\">=</span>  <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocol &#x27;Caching&#x27; can only be used as generic constraint because it has Self or associated type requirements</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocols do not allow generic parameters; use associated types instead</span></span><br></pre></td></tr></table></figure>\n\n<p>WTF？</p>\n<h2 id=\"Protocol-as-Types\"><a href=\"#Protocol-as-Types\" class=\"headerlink\" title=\"Protocol as Types\"></a>Protocol as Types</h2><p>突然发现自己好像一点都不了解 protocol，看看文档介绍<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">Protocols — The Swift Programming Language (Swift 4.2)</a>。里面 Protocol as Types 一节有一段话：</p>\n<blockquote>\n<p>Protocols don’t actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.<br>Because it’s a type, you can use a protocol in many places where other types are allowed, including:</p>\n<ul>\n<li>As a parameter type or return type in a function, method, or initializer</li>\n<li>As the type of a constant, variable, or property</li>\n<li>As the type of items in an array, dictionary, or other container</li>\n</ul>\n</blockquote>\n<p>为什么 protocol + generic 就这么难用？应该怎么用？</p>\n<h2 id=\"PATs-in-Swift-Standard-Library\"><a href=\"#PATs-in-Swift-Standard-Library\" class=\"headerlink\" title=\"PATs in Swift Standard Library\"></a>PATs in Swift Standard Library</h2><p>既然不会用，那么看看 Standard Library 里面是如何使用的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The type of element traversed by the iterator.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: The next element in the underlying sequence, if a next element</span></span><br><span class=\"line\">    <span class=\"comment\">///   exists; otherwise, `nil`.</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A type representing the sequence&#x27;s elements.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A type that provides the sequence&#x27;s iteration interface and</span></span><br><span class=\"line\">    <span class=\"comment\">/// encapsulates its iteration state.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Iterator</span> : <span class=\"type\">IteratorProtocol</span> <span class=\"keyword\">where</span> <span class=\"type\">Iterator</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Returns an iterator over the elements of this sequence.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span>()</span> -&gt; <span class=\"type\">Iterator</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后又发现有一个叫 <code>AnyIterator</code> 和 <code>AnySequence</code> 的东西。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyIterator</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">body</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Element</span>?)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(_ClosureBasedIterator(body))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">AnyIterator</span>: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _box.next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnySequence</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnySequenceBox<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">makeUnderlyingIterator</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(_ClosureBasedSequence(makeUnderlyingIterator))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnySequenceBox<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">AnySequence</span>: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Iterator</span> <span class=\"operator\">=</span> <span class=\"type\">AnyIterator</span>&lt;<span class=\"type\">Element</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span> : <span class=\"type\">Sequence</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">S</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">S</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _SequenceBox(_base: base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是什么鬼，先看看文档：</p>\n<blockquote>\n<p>This iterator forwards its next() method to an arbitrary underlying iterator having the same Element type, hiding the specifics of the underlying IteratorProtocol. —<a href=\"https://developer.apple.com/documentation/swift/anyiterator\">AnyIterator - Swift Standard Library | Apple Developer Documentation</a></p>\n</blockquote>\n<blockquote>\n<p>An instance of AnySequence forwards its operations to an underlying base sequence having the same Element type, hiding the specifics of the underlying sequence. —<a href=\"https://developer.apple.com/documentation/swift/anysequence\">AnySequence - Swift Standard Library | Apple Developer Documentation</a></p>\n</blockquote>\n<p>说白了就是包装一层，转发一下，它有个术语叫做 <strong>Type Erasure</strong></p>\n<h2 id=\"What-is-Type-Erasure\"><a href=\"#What-is-Type-Erasure\" class=\"headerlink\" title=\"What is Type Erasure?\"></a>What is Type Erasure?</h2><p>首先 Swift 的类型系统里面，有两种类型：</p>\n<ul>\n<li>Concrete Type: Int, Bool…</li>\n<li>Abstract Type: associatedType, <T></li>\n</ul>\n<p>对于抽象类型来说，编译器无法知道这个类型的确切功能。当编译器处理抽象类型的时候，它无法知晓其所占的空间大小；甚至可能会认为这个类型是不存在的。Swift 是静态语言。</p>\n<blockquote>\n<p>Type erasure is a process in code that makes abstract types concrete.</p>\n</blockquote>\n<p>具体看看 Swift Standard Library 里面，是怎么做到的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. abstract base</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnyIteratorBoxBase</span>&lt;<span class=\"title\">Element</span>&gt; : <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>? &#123; _abstract() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. private box</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_IteratorBox</span>&lt;<span class=\"title\">Base</span> : <span class=\"title\">IteratorProtocol</span>&gt; : <span class=\"title\">_AnyIteratorBoxBase</span>&lt;<span class=\"title\">Base</span>.<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">Base</span>)</span> &#123; <span class=\"keyword\">self</span>._base <span class=\"operator\">=</span> base &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Base</span>.<span class=\"type\">Element</span>? &#123; <span class=\"keyword\">return</span> _base.next() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> _base: <span class=\"type\">Base</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. public wrapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyIterator</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">body</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Element</span>?)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(_ClosureBasedIterator(body))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个模式概括起来就是三个步骤：</p>\n<ul>\n<li>an abstract base class</li>\n<li>a private box class</li>\n<li>a public wrapper class</li>\n</ul>\n<p>（想了解更多相关的理论知识？<em>Existential</em> 了解一下</p>\n<h2 id=\"One-more-thing\"><a href=\"#One-more-thing\" class=\"headerlink\" title=\"One more thing\"></a>One more thing</h2><p>到这里，我以为我已经掌握了如何用 PATs 了，然后有一天，我开始写一个轻量级的日志系统。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span>: <span class=\"title\">Hashtable</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> loggers: <span class=\"type\">Set</span>&lt;<span class=\"type\">Logging</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\"><span class=\"comment\">// ❗️Using &#x27;Logging&#x27; as a concrete type conforming to protocol &#x27;Hashable&#x27; is no supported</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span>(<span class=\"keyword\">_</span> <span class=\"params\">logger</span>: <span class=\"type\">Logging</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocol &#x27;Logging&#x27; can only be used as generic constraint because it has Self or associated type requirements</span></span><br></pre></td></tr></table></figure>\n\n<p>看到这熟悉的错误，马上就想到 <code>Hashable</code> 其实是继承 <code>Equatable</code> 的，然后这个 <code>Equatable</code> 的几个方法里面，用了 <code>Self</code> 来占位，它其实也是 PATs 的一种。意不意外，惊不惊喜。（其实一点都不意外</p>\n<p>然后就是 type erasure 了，真正根据上面的三个步骤来写的时候，发现好像跟之前的又有点不太一样，因为它没有关联别的类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. abstract baes</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnyLoggerBoxBase</span>&lt;<span class=\"title\">T</span>&gt; : <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. private box</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_LoggerBox</span>&lt;<span class=\"title\">Base</span> : <span class=\"title\">Logging</span>&gt; : <span class=\"title\">_AnyLoggerBoxBase</span> &lt;<span class=\"title\">Base</span>.<span class=\"title\">Self</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. public wrapper</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyLogger</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">L</span> : <span class=\"type\">Logging</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">L</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">L</span>.<span class=\"keyword\">Self</span> <span class=\"operator\">==</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这三步里面的泛型参数像是多出来的，根本无从下手。</p>\n<blockquote>\n<p>遇到不懂，首先看源码总是不会有错。— 圣人</p>\n</blockquote>\n<p>了解 Swift 的都知道，有一个叫做 <code>AnyHashable</code> 的东西。（一顿抄，完事</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=XWoNjiSPqI8&t=2391s\">Alexis Gallagher - Protocols with Associated Types - YouTube</a></li>\n<li><a href=\"https://academy.realm.io/posts/tryswift-gwendolyn-weston-type-erasure/\">Keep Calm and Type Erase On</a></li>\n<li><a href=\"https://developer.apple.com/documentation/swift/anysequence\">AnySequence - Swift Standard Library | Apple Developer Documentation</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/ExistentialCollection.swift.gyb\">swift/ExistentialCollection.swift.gyb at master · apple/swift · GitHub</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/AnyHashable.swift\">swift/AnyHashable.swift at master · apple/swift · GitHub</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>更新：随着 Swift 中一些新的提案（如 <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md\">SE-0309</a> 和 <a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0335-existential-any.md\">SE-0335</a>）的提出，大大的简化了 Swift 中的 Protocol 的使用，文中的一些概念或者观点抑或是写法已经显得落后而不适用。–2022.01.01</p>\n</blockquote>\n<blockquote>\n<p>很久没有写 Swift 了，闲着写几行玩玩的时候，遇到了一个之前没有接触过的问题——Protocol with Associated Types</p>\n</blockquote>\n<h2 id=\"Protocol-Oriented-Programming\"><a href=\"#Protocol-Oriented-Programming\" class=\"headerlink\" title=\"Protocol-Oriented Programming\"></a>Protocol-Oriented Programming</h2><p>首先 Swift 是一个 <strong>支持</strong> 面向协议编程思想的语言，并且 <a href=\"https://github.com/apple/swift\">Standard Library</a> 也是大量使用这种思想来实现很多的特性。（这里删掉介绍 POP 以及对应优缺点的几千字</p>\n<p>先看看用 POP 的思想，来实现一个 Cache：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MemoryCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Memory Cache&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiskCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Disk Cache&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> memory: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">MemoryCache</span>() <span class=\"comment\">// 🙂️</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> disk: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">DiskCache</span>() <span class=\"comment\">// 🙂️</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> caches: [<span class=\"type\">Caching</span>] <span class=\"operator\">=</span> [memory, disk] <span class=\"comment\">// 🙂️</span></span><br></pre></td></tr></table></figure>\n\n<p>到这里，一切都是很熟悉的样子，也能正常的 work，类似这样的<strong>用一个 <em>protocol</em> 来进行接口（行为）约束</strong>的代码估计写的也不少。</p>\n<h2 id=\"Generics\"><a href=\"#Generics\" class=\"headerlink\" title=\"Generics\"></a>Generics</h2><blockquote>\n<p>作为一个现代语言，泛型是必须支持的。作为一个现代程序员，泛型也是必须会使用的。</p>\n</blockquote>\n<p>Cache  是用来缓存数据的，但有很多数据类型都适合被缓存，比如一张图片，一个视频等等。如果希望不同类型的数据有不同的缓存策略，使用的时候也能直接获取某一种类型的缓存，不需要各种 <code>as? XXX</code>，立马想到的就是泛型。</p>\n<p>泛型还不简单：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MemoryCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Object</span> <span class=\"operator\">=</span> <span class=\"type\">UIImage</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>? &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DiskCache</span>: <span class=\"title\">Caching</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">Object</span> <span class=\"operator\">=</span> <span class=\"type\">UIImage</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">store</span>(<span class=\"keyword\">_</span> <span class=\"params\">object</span>: <span class=\"type\">Object</span>, <span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieve</span>(<span class=\"params\">forKey</span> <span class=\"params\">key</span>: <span class=\"type\">String</span>)</span> -&gt; <span class=\"type\">Object</span>? &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> memory: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">MemoryCache</span>() <span class=\"comment\">// 🙃</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> disk: <span class=\"type\">Caching</span> <span class=\"operator\">=</span> <span class=\"type\">DiskCache</span>() <span class=\"comment\">// 🙃</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> caches: [<span class=\"type\">Caching</span>] <span class=\"operator\">=</span> [memory, disk] <span class=\"comment\">// 🙃</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 Xcode 就好很无情的提示你：</p>\n<blockquote>\n<p>❗️Protocol ‘Caching’ can only be used as generic constraint because it has Self or associated type requirements</p>\n</blockquote>\n<p>WTF?</p>\n<h2 id=\"What-is-Protocol-with-Associated-Types\"><a href=\"#What-is-Protocol-with-Associated-Types\" class=\"headerlink\" title=\"What is Protocol with Associated Types?\"></a>What is Protocol with Associated Types?</h2><p>看到这个错误提示，有经验的 Swift  程序员一般会想到，<code>Caching</code> 里面关联了一个类型，如果不指定这个关联的类型的具体类型是什么，作为一门静态语言，那可能就无法知道内存是怎么布局的。</p>\n<p>既然需要指定类型，马上想到的就是 <em>泛型参数</em>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cache: <span class=\"type\">Caching</span>&lt;<span class=\"type\">UIImage</span>&gt; <span class=\"operator\">=</span>  <span class=\"operator\">...</span></span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocol &#x27;Caching&#x27; can only be used as generic constraint because it has Self or associated type requirements</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Caching</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocols do not allow generic parameters; use associated types instead</span></span><br></pre></td></tr></table></figure>\n\n<p>WTF？</p>\n<h2 id=\"Protocol-as-Types\"><a href=\"#Protocol-as-Types\" class=\"headerlink\" title=\"Protocol as Types\"></a>Protocol as Types</h2><p>突然发现自己好像一点都不了解 protocol，看看文档介绍<a href=\"https://docs.swift.org/swift-book/LanguageGuide/Protocols.html\">Protocols — The Swift Programming Language (Swift 4.2)</a>。里面 Protocol as Types 一节有一段话：</p>\n<blockquote>\n<p>Protocols don’t actually implement any functionality themselves. Nonetheless, any protocol you create will become a fully-fledged type for use in your code.<br>Because it’s a type, you can use a protocol in many places where other types are allowed, including:</p>\n<ul>\n<li>As a parameter type or return type in a function, method, or initializer</li>\n<li>As the type of a constant, variable, or property</li>\n<li>As the type of items in an array, dictionary, or other container</li>\n</ul>\n</blockquote>\n<p>为什么 protocol + generic 就这么难用？应该怎么用？</p>\n<h2 id=\"PATs-in-Swift-Standard-Library\"><a href=\"#PATs-in-Swift-Standard-Library\" class=\"headerlink\" title=\"PATs in Swift Standard Library\"></a>PATs in Swift Standard Library</h2><p>既然不会用，那么看看 Standard Library 里面是如何使用的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// The type of element traversed by the iterator.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// - Returns: The next element in the underlying sequence, if a next element</span></span><br><span class=\"line\">    <span class=\"comment\">///   exists; otherwise, `nil`.</span></span><br><span class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// A type representing the sequence&#x27;s elements.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A type that provides the sequence&#x27;s iteration interface and</span></span><br><span class=\"line\">    <span class=\"comment\">/// encapsulates its iteration state.</span></span><br><span class=\"line\">    <span class=\"keyword\">associatedtype</span> <span class=\"type\">Iterator</span> : <span class=\"type\">IteratorProtocol</span> <span class=\"keyword\">where</span> <span class=\"type\">Iterator</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Returns an iterator over the elements of this sequence.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIterator</span>()</span> -&gt; <span class=\"type\">Iterator</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后又发现有一个叫 <code>AnyIterator</code> 和 <code>AnySequence</code> 的东西。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyIterator</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">body</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Element</span>?)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(_ClosureBasedIterator(body))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">AnyIterator</span>: <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _box.next()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnySequence</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnySequenceBox<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">makeUnderlyingIterator</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(_ClosureBasedSequence(makeUnderlyingIterator))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnySequenceBox<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">AnySequence</span>: <span class=\"title\">Sequence</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Iterator</span> <span class=\"operator\">=</span> <span class=\"type\">AnyIterator</span>&lt;<span class=\"type\">Element</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">S</span> : <span class=\"type\">Sequence</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">S</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">S</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _SequenceBox(_base: base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是什么鬼，先看看文档：</p>\n<blockquote>\n<p>This iterator forwards its next() method to an arbitrary underlying iterator having the same Element type, hiding the specifics of the underlying IteratorProtocol. —<a href=\"https://developer.apple.com/documentation/swift/anyiterator\">AnyIterator - Swift Standard Library | Apple Developer Documentation</a></p>\n</blockquote>\n<blockquote>\n<p>An instance of AnySequence forwards its operations to an underlying base sequence having the same Element type, hiding the specifics of the underlying sequence. —<a href=\"https://developer.apple.com/documentation/swift/anysequence\">AnySequence - Swift Standard Library | Apple Developer Documentation</a></p>\n</blockquote>\n<p>说白了就是包装一层，转发一下，它有个术语叫做 <strong>Type Erasure</strong></p>\n<h2 id=\"What-is-Type-Erasure\"><a href=\"#What-is-Type-Erasure\" class=\"headerlink\" title=\"What is Type Erasure?\"></a>What is Type Erasure?</h2><p>首先 Swift 的类型系统里面，有两种类型：</p>\n<ul>\n<li>Concrete Type: Int, Bool…</li>\n<li>Abstract Type: associatedType, <T></li>\n</ul>\n<p>对于抽象类型来说，编译器无法知道这个类型的确切功能。当编译器处理抽象类型的时候，它无法知晓其所占的空间大小；甚至可能会认为这个类型是不存在的。Swift 是静态语言。</p>\n<blockquote>\n<p>Type erasure is a process in code that makes abstract types concrete.</p>\n</blockquote>\n<p>具体看看 Swift Standard Library 里面，是怎么做到的：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. abstract base</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnyIteratorBoxBase</span>&lt;<span class=\"title\">Element</span>&gt; : <span class=\"title\">IteratorProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Element</span>? &#123; _abstract() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. private box</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_IteratorBox</span>&lt;<span class=\"title\">Base</span> : <span class=\"title\">IteratorProtocol</span>&gt; : <span class=\"title\">_AnyIteratorBoxBase</span>&lt;<span class=\"title\">Base</span>.<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">Base</span>)</span> &#123; <span class=\"keyword\">self</span>._base <span class=\"operator\">=</span> base &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span>()</span> -&gt; <span class=\"type\">Base</span>.<span class=\"type\">Element</span>? &#123; <span class=\"keyword\">return</span> _base.next() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> _base: <span class=\"type\">Base</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. public wrapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyIterator</span>&lt;<span class=\"title\">Element</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">let</span> _box: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">I</span> : <span class=\"type\">IteratorProtocol</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">I</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">I</span>.<span class=\"type\">Element</span> <span class=\"operator\">==</span> <span class=\"type\">Element</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(base)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"keyword\">_</span> <span class=\"params\">body</span>: <span class=\"keyword\">@escaping</span> () -&gt; <span class=\"type\">Element</span>?)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _IteratorBox(_ClosureBasedIterator(body))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">_box</span>: _AnyIteratorBoxBase<span class=\"operator\">&lt;</span><span class=\"type\">Element</span><span class=\"operator\">&gt;</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>._box <span class=\"operator\">=</span> _box</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个模式概括起来就是三个步骤：</p>\n<ul>\n<li>an abstract base class</li>\n<li>a private box class</li>\n<li>a public wrapper class</li>\n</ul>\n<p>（想了解更多相关的理论知识？<em>Existential</em> 了解一下</p>\n<h2 id=\"One-more-thing\"><a href=\"#One-more-thing\" class=\"headerlink\" title=\"One more thing\"></a>One more thing</h2><p>到这里，我以为我已经掌握了如何用 PATs 了，然后有一天，我开始写一个轻量级的日志系统。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Logging</span>: <span class=\"title\">Hashtable</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> loggers: <span class=\"type\">Set</span>&lt;<span class=\"type\">Logging</span>&gt; <span class=\"operator\">=</span> []</span><br><span class=\"line\"><span class=\"comment\">// ❗️Using &#x27;Logging&#x27; as a concrete type conforming to protocol &#x27;Hashable&#x27; is no supported</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span>(<span class=\"keyword\">_</span> <span class=\"params\">logger</span>: <span class=\"type\">Logging</span>)</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ❗️Protocol &#x27;Logging&#x27; can only be used as generic constraint because it has Self or associated type requirements</span></span><br></pre></td></tr></table></figure>\n\n<p>看到这熟悉的错误，马上就想到 <code>Hashable</code> 其实是继承 <code>Equatable</code> 的，然后这个 <code>Equatable</code> 的几个方法里面，用了 <code>Self</code> 来占位，它其实也是 PATs 的一种。意不意外，惊不惊喜。（其实一点都不意外</p>\n<p>然后就是 type erasure 了，真正根据上面的三个步骤来写的时候，发现好像跟之前的又有点不太一样，因为它没有关联别的类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. abstract baes</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnyLoggerBoxBase</span>&lt;<span class=\"title\">T</span>&gt; : <span class=\"title\">Logging</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. private box</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_LoggerBox</span>&lt;<span class=\"title\">Base</span> : <span class=\"title\">Logging</span>&gt; : <span class=\"title\">_AnyLoggerBoxBase</span> &lt;<span class=\"title\">Base</span>.<span class=\"title\">Self</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. public wrapper</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AnyLogger</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>&lt;<span class=\"type\">L</span> : <span class=\"type\">Logging</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">base</span>: <span class=\"type\">L</span>)</span> <span class=\"keyword\">where</span> <span class=\"type\">L</span>.<span class=\"keyword\">Self</span> <span class=\"operator\">==</span> <span class=\"keyword\">Self</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这三步里面的泛型参数像是多出来的，根本无从下手。</p>\n<blockquote>\n<p>遇到不懂，首先看源码总是不会有错。— 圣人</p>\n</blockquote>\n<p>了解 Swift 的都知道，有一个叫做 <code>AnyHashable</code> 的东西。（一顿抄，完事</p>\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=XWoNjiSPqI8&t=2391s\">Alexis Gallagher - Protocols with Associated Types - YouTube</a></li>\n<li><a href=\"https://academy.realm.io/posts/tryswift-gwendolyn-weston-type-erasure/\">Keep Calm and Type Erase On</a></li>\n<li><a href=\"https://developer.apple.com/documentation/swift/anysequence\">AnySequence - Swift Standard Library | Apple Developer Documentation</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/ExistentialCollection.swift.gyb\">swift/ExistentialCollection.swift.gyb at master · apple/swift · GitHub</a></li>\n<li><a href=\"https://github.com/apple/swift/blob/master/stdlib/public/core/AnyHashable.swift\">swift/AnyHashable.swift at master · apple/swift · GitHub</a></li>\n</ul>\n"},{"title":"Plist Parser","date":"2017-08-10T12:00:00.000Z","_content":"Plist 是 Apple 家平台上一种很常见的配置文件，常见的存储格式是常见的 XML 格式（还有 Binary 格式），不同于 HTML 的复杂，Plist 只包含了比较少的几种标签（tag），所以实现使用 functional 的 parser combinator 来实现一个简单的 plist parser 也是一件很有意思的事情。\n\n## Plist\n\n一个 Plist 文件内容长这个样子：\n\n```\n<dict>\n    <key>number</key>\n    <integer>0</integer>\n    <key>date</key>\n    <date>2017-08-05T14:25:14Z</date>\n    <key>data</key>\n    <data>VGVzdFZhbHVl</data>\n    <key>boolean</key>\n    <true/>\n    <key>array</key>\n    <array>\n        <string>string</string>\n        <false/>\n        <integer>0</integer>\n    </array>\n </dict>\n```\n\n[wikipedia](https://zh.wikipedia.org/zh-hans/属性列表) 上列出了一个详细的 `XML` 标签和 macOS/iOS 中的类型关系以及存储格式。\n\n| Foundation 类 | Core Foundation 类型 | XML 标签 | 储存格式 |\n| :--- | :--- | :--- | :--- |\n| NSString | CFString | &lt;string&gt; | UTF-8 编码的字符串 |\n| NSNumber\t| CFNumber | &lt;real&gt;, &lt;integer&gt; | 十进制数字符串 |\n| NSNumber | CFBoolean\t| &lt;true/&gt;, or &lt;false/&gt; | 无数据（只有标签）|\n| NSDate | CFDate | &lt;date&gt; | ISO 8601 格式的日期字符串 |\n| NSData | CFData | &lt;data&gt; | Base64 编码的数据 |\n| NSArray | CFArray | &lt;array&gt; | 可以包含任意数量的子元素 |\n| NSDictionary | CFDictionary | &lt;dict&gt; | 交替包含 &lt;key&gt; 标签和 plist 元素标签 |\n\n根据这个表格，我们可以定义出 Plist 的数据结构。\n\n## Model\n\n```swift\n/// The plist data model\npublic enum PLIST {\n    /// <true/> or <false/>\n    case bool(Bool)\n    \n    /// 2017-08-05T14:25:14Z\n    case date(Date)\n    \n    /// <data>VGVzdFZhbHVl</data> (<54657374 56616c75 65>\n    case data(Data)\n    \n    /// <integer>233</integer> or <real>2.33</real>\n    case number(Int)\n    \n    /// <string>string</string>\n    case string(String)\n    \n    /// <array><string>The String</string></array>\n    indirect case array([PLIST])\n    \n    /// <dict><key>The Key</key><string>The String</string></dict>\n    indirect case dict([String: PLIST])\n}\n```\n\n## Parser\n\n根据 Plist data model，想要解析一个 Plist 字符串 得到 `PLIST` 类型，只需要一个 `parser`。\n\n没错，只需要一个 parser，这个 parser 大概长这样：\n\n```swift\nlet parser: Parser<PLIST>\nlet result = parser.parse(\"plist\")\n```\n\n这个 `let parser: Parser<PLIST>` 的实现才是最关键的。一个 `PLIST` 是由 `Bool` `Date` `Data` `Number` `String` 5 种简单的类型和 `Array<PLIST>` `Dictionary<PLIST>` 2 种容器（nested）类型组成，所以一个 `Parser<PLIST>` 也是由对应的 `Parser<Bool>` `Parser<Date>` `Parser<Data>` `Parser<Number>` `Parser<String>` 5 中简单的 parser 和 `Parser<Array>` `Parser<Dictionary>` 2 种容器类型 parser 组成。\n\n### Bool Parser\n\n在 Plist 中，Bool 类型由两种形式 `<true/>` 和 `<false/>`，所以一个 Bool 类型的 parser 也就是能够解析字符串 `<true/>` 和 `<false/>`。\n\n```swift\nlet _true = string(\"<true/>\") <&> const(PLIST.bool(true))\nlet _false = string(\"<false/>\") <&> const(PLIST.bool(false))\n\nlet _bool = _true <|> _false\n_bool.parse(\"<false/>\")\n```\n\n### Date Parser\n\nPlist 中的 Date 类型存储的是 UTC 字符串，如 `<date>2017-08-05T14:25:14Z</date>`。字符串中的开始标签 `<date>` 和结束标签 `</date>` 对于解析的结果来说是没有用的，所以一个 Date 类型的 parser 是要将这个字符串解析成 `PLIST.date(date)`, date 为 2017-08-05T14:25:14Z 通过 format 得到。\n\n```swift\nlet _date = string(\"<date>\") *> manyTill(_any, string(\"</date>\")) <&> { PLIST.date(String($0).date!) }\n_date.parse(\"<date>2017-08-05T14:25:14Z</date>\")\n\n/// UTC Date\npublic extension String {\n    public var date: Date? {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss'Z'\"\n        return formatter.date(from: self)\n    }\n}\n```\n\n### Data Parser\n\nPlist 中的 Data 类型存储的是 Base64 编码后的数据，所以实现一个 Data Parser 和 Date Parser 差不多，区别是 tag 和 Data 类型初始化。\n\n```swift\nlet _data = string(\"<data>\") *> manyTill(_any, string(\"</data>\")) <&> { PLIST.data(Data(base64Encoded: String($0))!) }\nlet dataString = _data.parse(\"<data>VGVzdFZhbHVl</data>\")\n```\n\n### Number Parser\n\nPlist 中的 Number 的存储实际上分两种。一种是整型，一种是浮点型。整型的 `tag` 是 `integer`，浮点型是 `real`。\n\n先看 Integer Parser：\n\n```swift\nlet _integer = string(\"<integer>\") *> manyTill(_digit, string(\"</integer>\")) <&> { PLIST.number(Int(String($0))!) }\n```\n\n### String Parser\n\nString Parser 和 Date Parser 以及 Data Parser 对比起来更简单，实际上就是去掉了最后转换的那一步。\n\n```swift\nlet _string = string(\"<string>\") *> manyTill(_any, string(\"</string>\")) <&> { PLIST.string(String($0)) }\n_string.parse(\"<string>The String</string>\")\n```\n\n### Tag Parser\n\n通过对比上面几种除了 Bool Parser 之外不同类型的 Parser，可以发现实现的方式很相似。\n\n* closed tag，成对存在。\n* 中间存储的都是字符串，最后把字符串转为具体类型。\n\n把这些相似的 Parser 进行抽象，将相同部分封装成一个函数，不同的部分用传参的形式来实现。\n\n```swift\nfunc tag<A>(_ tag: String, _ p: Parser<A>) -> Parser<[A]> {\n    return string(\"<\\(tag)>\") *> manyTill(p, string(\"</\\(tag)>\"))\n}\n\nlet _date1 = tag(\"<date>\", _any) <&> { PLIST.date(String($0).date!) }\n_date1.parse(\"<date>2017-08-05T14:25:14Z</date>\")\n\nlet _string1 = tag(\"string\", _any) <&> { PLIST.string(String($0)) }\n_string1.parse(\"<string>The String</string>\")\n```\n\n### Array Parser\n\nArray Parser 和 Dictionary Parser 相对比较复杂，因为它们是容器类型，里面可以是任意的 PLIST 类型，包括它们本身。对于 Enum PLIST 来说，可以使用 `indirect` 关键字来表示这种情况，但是在定义 parser 的时候，确没有这些魔法。\n\n但是通过利用 Swift 的一些特性，还是很容易解决这个递归的问题。先忽略 Dictionary 类型。\n\n```swift\nlet _plist = plist()\nfunc plist() -> Parser<PLIST> {\n    return _bool <|> _string <|> _integer <|> _date <|> _data <|> _array\n}\n\nlet _array = tag(\"array\", _plist) <&> {\n    PLIST.array($0)\n}\n```\n\n### Dictionary Parser\n\nDictionary Parser 的递归问题和 Array Parser 一样。\n\n```swift\nlet _plist = plist()\nfunc plist() -> Parser<PLIST> {\n    return _bool <|> _string <|> _integer <|> _date <|> _data <|> _array <|> _dict\n}\n\nlet _dict = tag(\"dict\", ?) <&> {\n   /// 转换为 PLIST.dict\n}\n```\n\n但 Dictionary 和 Array 不一样的地方在于，Array 里面是多个 Plist 的元素，而 Dictionary 是 key-value 对，且必须是 key-value 对，也就是 `tag(\"dict\", _keyValue)`。\n\n先实现一个 Key-Value Parser：\n\n```swift\nlet _key = string(\"<key>\") *> manyTill(_any, string(\"</key>\")) <&> { String($0) }\nlet _keyValue = ({ a in { b in (a, b) }} <^> _key <*> (value))\n```\n\n然后就可以得到 Dictionary Parser：\n\n```swift\nlet _dict = tag(\"dict\", _keyValue) <&> { PLIST.dict(atod($0)) }\n/// Tuple Array to Dictionary\npublic func atod<Key: Hashable, Value>(_ tuples: [(Key, Value)]) -> [Key: Value] {\n    var dict: [Key: Value] = [:]\n    for (key, value) in tuples {\n        dict[key] = value\n    }\n    return dict\n}\n```\n\n或者换一种写法：\n\n```swift\nlet _kv = _keyValue <&> { ttod($0) }\n\nlet _dict1 = tag(\"dict\", _kv) <&> {\n    PLIST.dict(\n    \t\t$0.flatMap { $0 }\n        .reduce([String: PLIST]()) { d, kv in\n            var dict = d\n            dict.updateValue(kv.value, forKey: kv.key)\n            return dict\n        })\n}\n\npublic func ttod<Key: Hashable, Value>(_ tuple: (Key, Value)) -> [Key: Value] {\n    return [tuple.0: tuple.1]\n}\n```\n\n### Plist Parser\n\n最后\n\n```swift\nlet _plist = _bool <|> _string <|> _integer <|> _date <|> _data <|> _array <|> _dict\n\nlet result = _plist.parse(plist)\ndump(result)\n```\n\n## Ref\n\n[属性列表](https://zh.wikipedia.org/zh-hans/属性列表)\n[Parser Combinator](http://blessingsoft.com/2017/05/28/parser-combinator/)\n[解析组合子](https://github.com/nixzhu/dev-blog/blob/master/2017-04-12-json-parser.md)\n\n\n","source":"_posts/plist-parser.md","raw":"---\ntitle: Plist Parser\ndate: 2017-08-10 20:00:00\ntags:\n\t- plist parser\n\t- parser\n\t- parser combinator\n\t- monad\n\t- functional programming\n\t- swift\ncategories: functional programming\n---\nPlist 是 Apple 家平台上一种很常见的配置文件，常见的存储格式是常见的 XML 格式（还有 Binary 格式），不同于 HTML 的复杂，Plist 只包含了比较少的几种标签（tag），所以实现使用 functional 的 parser combinator 来实现一个简单的 plist parser 也是一件很有意思的事情。\n\n## Plist\n\n一个 Plist 文件内容长这个样子：\n\n```\n<dict>\n    <key>number</key>\n    <integer>0</integer>\n    <key>date</key>\n    <date>2017-08-05T14:25:14Z</date>\n    <key>data</key>\n    <data>VGVzdFZhbHVl</data>\n    <key>boolean</key>\n    <true/>\n    <key>array</key>\n    <array>\n        <string>string</string>\n        <false/>\n        <integer>0</integer>\n    </array>\n </dict>\n```\n\n[wikipedia](https://zh.wikipedia.org/zh-hans/属性列表) 上列出了一个详细的 `XML` 标签和 macOS/iOS 中的类型关系以及存储格式。\n\n| Foundation 类 | Core Foundation 类型 | XML 标签 | 储存格式 |\n| :--- | :--- | :--- | :--- |\n| NSString | CFString | &lt;string&gt; | UTF-8 编码的字符串 |\n| NSNumber\t| CFNumber | &lt;real&gt;, &lt;integer&gt; | 十进制数字符串 |\n| NSNumber | CFBoolean\t| &lt;true/&gt;, or &lt;false/&gt; | 无数据（只有标签）|\n| NSDate | CFDate | &lt;date&gt; | ISO 8601 格式的日期字符串 |\n| NSData | CFData | &lt;data&gt; | Base64 编码的数据 |\n| NSArray | CFArray | &lt;array&gt; | 可以包含任意数量的子元素 |\n| NSDictionary | CFDictionary | &lt;dict&gt; | 交替包含 &lt;key&gt; 标签和 plist 元素标签 |\n\n根据这个表格，我们可以定义出 Plist 的数据结构。\n\n## Model\n\n```swift\n/// The plist data model\npublic enum PLIST {\n    /// <true/> or <false/>\n    case bool(Bool)\n    \n    /// 2017-08-05T14:25:14Z\n    case date(Date)\n    \n    /// <data>VGVzdFZhbHVl</data> (<54657374 56616c75 65>\n    case data(Data)\n    \n    /// <integer>233</integer> or <real>2.33</real>\n    case number(Int)\n    \n    /// <string>string</string>\n    case string(String)\n    \n    /// <array><string>The String</string></array>\n    indirect case array([PLIST])\n    \n    /// <dict><key>The Key</key><string>The String</string></dict>\n    indirect case dict([String: PLIST])\n}\n```\n\n## Parser\n\n根据 Plist data model，想要解析一个 Plist 字符串 得到 `PLIST` 类型，只需要一个 `parser`。\n\n没错，只需要一个 parser，这个 parser 大概长这样：\n\n```swift\nlet parser: Parser<PLIST>\nlet result = parser.parse(\"plist\")\n```\n\n这个 `let parser: Parser<PLIST>` 的实现才是最关键的。一个 `PLIST` 是由 `Bool` `Date` `Data` `Number` `String` 5 种简单的类型和 `Array<PLIST>` `Dictionary<PLIST>` 2 种容器（nested）类型组成，所以一个 `Parser<PLIST>` 也是由对应的 `Parser<Bool>` `Parser<Date>` `Parser<Data>` `Parser<Number>` `Parser<String>` 5 中简单的 parser 和 `Parser<Array>` `Parser<Dictionary>` 2 种容器类型 parser 组成。\n\n### Bool Parser\n\n在 Plist 中，Bool 类型由两种形式 `<true/>` 和 `<false/>`，所以一个 Bool 类型的 parser 也就是能够解析字符串 `<true/>` 和 `<false/>`。\n\n```swift\nlet _true = string(\"<true/>\") <&> const(PLIST.bool(true))\nlet _false = string(\"<false/>\") <&> const(PLIST.bool(false))\n\nlet _bool = _true <|> _false\n_bool.parse(\"<false/>\")\n```\n\n### Date Parser\n\nPlist 中的 Date 类型存储的是 UTC 字符串，如 `<date>2017-08-05T14:25:14Z</date>`。字符串中的开始标签 `<date>` 和结束标签 `</date>` 对于解析的结果来说是没有用的，所以一个 Date 类型的 parser 是要将这个字符串解析成 `PLIST.date(date)`, date 为 2017-08-05T14:25:14Z 通过 format 得到。\n\n```swift\nlet _date = string(\"<date>\") *> manyTill(_any, string(\"</date>\")) <&> { PLIST.date(String($0).date!) }\n_date.parse(\"<date>2017-08-05T14:25:14Z</date>\")\n\n/// UTC Date\npublic extension String {\n    public var date: Date? {\n        let formatter = DateFormatter()\n        formatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss'Z'\"\n        return formatter.date(from: self)\n    }\n}\n```\n\n### Data Parser\n\nPlist 中的 Data 类型存储的是 Base64 编码后的数据，所以实现一个 Data Parser 和 Date Parser 差不多，区别是 tag 和 Data 类型初始化。\n\n```swift\nlet _data = string(\"<data>\") *> manyTill(_any, string(\"</data>\")) <&> { PLIST.data(Data(base64Encoded: String($0))!) }\nlet dataString = _data.parse(\"<data>VGVzdFZhbHVl</data>\")\n```\n\n### Number Parser\n\nPlist 中的 Number 的存储实际上分两种。一种是整型，一种是浮点型。整型的 `tag` 是 `integer`，浮点型是 `real`。\n\n先看 Integer Parser：\n\n```swift\nlet _integer = string(\"<integer>\") *> manyTill(_digit, string(\"</integer>\")) <&> { PLIST.number(Int(String($0))!) }\n```\n\n### String Parser\n\nString Parser 和 Date Parser 以及 Data Parser 对比起来更简单，实际上就是去掉了最后转换的那一步。\n\n```swift\nlet _string = string(\"<string>\") *> manyTill(_any, string(\"</string>\")) <&> { PLIST.string(String($0)) }\n_string.parse(\"<string>The String</string>\")\n```\n\n### Tag Parser\n\n通过对比上面几种除了 Bool Parser 之外不同类型的 Parser，可以发现实现的方式很相似。\n\n* closed tag，成对存在。\n* 中间存储的都是字符串，最后把字符串转为具体类型。\n\n把这些相似的 Parser 进行抽象，将相同部分封装成一个函数，不同的部分用传参的形式来实现。\n\n```swift\nfunc tag<A>(_ tag: String, _ p: Parser<A>) -> Parser<[A]> {\n    return string(\"<\\(tag)>\") *> manyTill(p, string(\"</\\(tag)>\"))\n}\n\nlet _date1 = tag(\"<date>\", _any) <&> { PLIST.date(String($0).date!) }\n_date1.parse(\"<date>2017-08-05T14:25:14Z</date>\")\n\nlet _string1 = tag(\"string\", _any) <&> { PLIST.string(String($0)) }\n_string1.parse(\"<string>The String</string>\")\n```\n\n### Array Parser\n\nArray Parser 和 Dictionary Parser 相对比较复杂，因为它们是容器类型，里面可以是任意的 PLIST 类型，包括它们本身。对于 Enum PLIST 来说，可以使用 `indirect` 关键字来表示这种情况，但是在定义 parser 的时候，确没有这些魔法。\n\n但是通过利用 Swift 的一些特性，还是很容易解决这个递归的问题。先忽略 Dictionary 类型。\n\n```swift\nlet _plist = plist()\nfunc plist() -> Parser<PLIST> {\n    return _bool <|> _string <|> _integer <|> _date <|> _data <|> _array\n}\n\nlet _array = tag(\"array\", _plist) <&> {\n    PLIST.array($0)\n}\n```\n\n### Dictionary Parser\n\nDictionary Parser 的递归问题和 Array Parser 一样。\n\n```swift\nlet _plist = plist()\nfunc plist() -> Parser<PLIST> {\n    return _bool <|> _string <|> _integer <|> _date <|> _data <|> _array <|> _dict\n}\n\nlet _dict = tag(\"dict\", ?) <&> {\n   /// 转换为 PLIST.dict\n}\n```\n\n但 Dictionary 和 Array 不一样的地方在于，Array 里面是多个 Plist 的元素，而 Dictionary 是 key-value 对，且必须是 key-value 对，也就是 `tag(\"dict\", _keyValue)`。\n\n先实现一个 Key-Value Parser：\n\n```swift\nlet _key = string(\"<key>\") *> manyTill(_any, string(\"</key>\")) <&> { String($0) }\nlet _keyValue = ({ a in { b in (a, b) }} <^> _key <*> (value))\n```\n\n然后就可以得到 Dictionary Parser：\n\n```swift\nlet _dict = tag(\"dict\", _keyValue) <&> { PLIST.dict(atod($0)) }\n/// Tuple Array to Dictionary\npublic func atod<Key: Hashable, Value>(_ tuples: [(Key, Value)]) -> [Key: Value] {\n    var dict: [Key: Value] = [:]\n    for (key, value) in tuples {\n        dict[key] = value\n    }\n    return dict\n}\n```\n\n或者换一种写法：\n\n```swift\nlet _kv = _keyValue <&> { ttod($0) }\n\nlet _dict1 = tag(\"dict\", _kv) <&> {\n    PLIST.dict(\n    \t\t$0.flatMap { $0 }\n        .reduce([String: PLIST]()) { d, kv in\n            var dict = d\n            dict.updateValue(kv.value, forKey: kv.key)\n            return dict\n        })\n}\n\npublic func ttod<Key: Hashable, Value>(_ tuple: (Key, Value)) -> [Key: Value] {\n    return [tuple.0: tuple.1]\n}\n```\n\n### Plist Parser\n\n最后\n\n```swift\nlet _plist = _bool <|> _string <|> _integer <|> _date <|> _data <|> _array <|> _dict\n\nlet result = _plist.parse(plist)\ndump(result)\n```\n\n## Ref\n\n[属性列表](https://zh.wikipedia.org/zh-hans/属性列表)\n[Parser Combinator](http://blessingsoft.com/2017/05/28/parser-combinator/)\n[解析组合子](https://github.com/nixzhu/dev-blog/blob/master/2017-04-12-json-parser.md)\n\n\n","slug":"plist-parser","published":1,"updated":"2022-01-02T11:27:03.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xg000i9ith73ww8npz","content":"<p>Plist 是 Apple 家平台上一种很常见的配置文件，常见的存储格式是常见的 XML 格式（还有 Binary 格式），不同于 HTML 的复杂，Plist 只包含了比较少的几种标签（tag），所以实现使用 functional 的 parser combinator 来实现一个简单的 plist parser 也是一件很有意思的事情。</p>\n<h2 id=\"Plist\"><a href=\"#Plist\" class=\"headerlink\" title=\"Plist\"></a>Plist</h2><p>一个 Plist 文件内容长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;number&lt;/key&gt;</span><br><span class=\"line\">    &lt;integer&gt;0&lt;/integer&gt;</span><br><span class=\"line\">    &lt;key&gt;date&lt;/key&gt;</span><br><span class=\"line\">    &lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;</span><br><span class=\"line\">    &lt;key&gt;data&lt;/key&gt;</span><br><span class=\"line\">    &lt;data&gt;VGVzdFZhbHVl&lt;/data&gt;</span><br><span class=\"line\">    &lt;key&gt;boolean&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;array&lt;/key&gt;</span><br><span class=\"line\">    &lt;array&gt;</span><br><span class=\"line\">        &lt;string&gt;string&lt;/string&gt;</span><br><span class=\"line\">        &lt;false/&gt;</span><br><span class=\"line\">        &lt;integer&gt;0&lt;/integer&gt;</span><br><span class=\"line\">    &lt;/array&gt;</span><br><span class=\"line\"> &lt;/dict&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">wikipedia</a> 上列出了一个详细的 <code>XML</code> 标签和 macOS/iOS 中的类型关系以及存储格式。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Foundation 类</th>\n<th align=\"left\">Core Foundation 类型</th>\n<th align=\"left\">XML 标签</th>\n<th align=\"left\">储存格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">NSString</td>\n<td align=\"left\">CFString</td>\n<td align=\"left\">&lt;string&gt;</td>\n<td align=\"left\">UTF-8 编码的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSNumber</td>\n<td align=\"left\">CFNumber</td>\n<td align=\"left\">&lt;real&gt;, &lt;integer&gt;</td>\n<td align=\"left\">十进制数字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSNumber</td>\n<td align=\"left\">CFBoolean</td>\n<td align=\"left\">&lt;true/&gt;, or &lt;false/&gt;</td>\n<td align=\"left\">无数据（只有标签）</td>\n</tr>\n<tr>\n<td align=\"left\">NSDate</td>\n<td align=\"left\">CFDate</td>\n<td align=\"left\">&lt;date&gt;</td>\n<td align=\"left\">ISO 8601 格式的日期字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSData</td>\n<td align=\"left\">CFData</td>\n<td align=\"left\">&lt;data&gt;</td>\n<td align=\"left\">Base64 编码的数据</td>\n</tr>\n<tr>\n<td align=\"left\">NSArray</td>\n<td align=\"left\">CFArray</td>\n<td align=\"left\">&lt;array&gt;</td>\n<td align=\"left\">可以包含任意数量的子元素</td>\n</tr>\n<tr>\n<td align=\"left\">NSDictionary</td>\n<td align=\"left\">CFDictionary</td>\n<td align=\"left\">&lt;dict&gt;</td>\n<td align=\"left\">交替包含 &lt;key&gt; 标签和 plist 元素标签</td>\n</tr>\n</tbody></table>\n<p>根据这个表格，我们可以定义出 Plist 的数据结构。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// The plist data model</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">PLIST</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;true/&gt; or &lt;false/&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> bool(<span class=\"type\">Bool</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 2017-08-05T14:25:14Z</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> date(<span class=\"type\">Date</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;data&gt;VGVzdFZhbHVl&lt;/data&gt; (&lt;54657374 56616c75 65&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> data(<span class=\"type\">Data</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;integer&gt;233&lt;/integer&gt; or &lt;real&gt;2.33&lt;/real&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;string&gt;string&lt;/string&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> string(<span class=\"type\">String</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;array&gt;&lt;string&gt;The String&lt;/string&gt;&lt;/array&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> array([<span class=\"type\">PLIST</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;dict&gt;&lt;key&gt;The Key&lt;/key&gt;&lt;string&gt;The String&lt;/string&gt;&lt;/dict&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> dict([String: <span class=\"type\">PLIST</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>根据 Plist data model，想要解析一个 Plist 字符串 得到 <code>PLIST</code> 类型，只需要一个 <code>parser</code>。</p>\n<p>没错，只需要一个 parser，这个 parser 大概长这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parser: <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> parser.parse(<span class=\"string\">&quot;plist&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>let parser: Parser&lt;PLIST&gt;</code> 的实现才是最关键的。一个 <code>PLIST</code> 是由 <code>Bool</code> <code>Date</code> <code>Data</code> <code>Number</code> <code>String</code> 5 种简单的类型和 <code>Array&lt;PLIST&gt;</code> <code>Dictionary&lt;PLIST&gt;</code> 2 种容器（nested）类型组成，所以一个 <code>Parser&lt;PLIST&gt;</code> 也是由对应的 <code>Parser&lt;Bool&gt;</code> <code>Parser&lt;Date&gt;</code> <code>Parser&lt;Data&gt;</code> <code>Parser&lt;Number&gt;</code> <code>Parser&lt;String&gt;</code> 5 中简单的 parser 和 <code>Parser&lt;Array&gt;</code> <code>Parser&lt;Dictionary&gt;</code> 2 种容器类型 parser 组成。</p>\n<h3 id=\"Bool-Parser\"><a href=\"#Bool-Parser\" class=\"headerlink\" title=\"Bool Parser\"></a>Bool Parser</h3><p>在 Plist 中，Bool 类型由两种形式 <code>&lt;true/&gt;</code> 和 <code>&lt;false/&gt;</code>，所以一个 Bool 类型的 parser 也就是能够解析字符串 <code>&lt;true/&gt;</code> 和 <code>&lt;false/&gt;</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _true <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;true/&gt;&quot;</span>) <span class=\"operator\">&lt;&amp;&gt;</span> const(<span class=\"type\">PLIST</span>.bool(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> _false <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;false/&gt;&quot;</span>) <span class=\"operator\">&lt;&amp;&gt;</span> const(<span class=\"type\">PLIST</span>.bool(<span class=\"literal\">false</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _bool <span class=\"operator\">=</span> _true <span class=\"operator\">&lt;|&gt;</span> _false</span><br><span class=\"line\">_bool.parse(<span class=\"string\">&quot;&lt;false/&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Date-Parser\"><a href=\"#Date-Parser\" class=\"headerlink\" title=\"Date Parser\"></a>Date Parser</h3><p>Plist 中的 Date 类型存储的是 UTC 字符串，如 <code>&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;</code>。字符串中的开始标签 <code>&lt;date&gt;</code> 和结束标签 <code>&lt;/date&gt;</code> 对于解析的结果来说是没有用的，所以一个 Date 类型的 parser 是要将这个字符串解析成 <code>PLIST.date(date)</code>, date 为 2017-08-05T14:25:14Z 通过 format 得到。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _date <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;date&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/date&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.date(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>).date<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">_date.parse(<span class=\"string\">&quot;&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// UTC Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> date: <span class=\"type\">Date</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> formatter <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>()</span><br><span class=\"line\">        formatter.dateFormat <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&#x27;Z&#x27;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> formatter.date(from: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Data-Parser\"><a href=\"#Data-Parser\" class=\"headerlink\" title=\"Data Parser\"></a>Data Parser</h3><p>Plist 中的 Data 类型存储的是 Base64 编码后的数据，所以实现一个 Data Parser 和 Date Parser 差不多，区别是 tag 和 Data 类型初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _data <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;data&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/data&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.data(<span class=\"type\">Data</span>(base64Encoded: <span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dataString <span class=\"operator\">=</span> _data.parse(<span class=\"string\">&quot;&lt;data&gt;VGVzdFZhbHVl&lt;/data&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Number-Parser\"><a href=\"#Number-Parser\" class=\"headerlink\" title=\"Number Parser\"></a>Number Parser</h3><p>Plist 中的 Number 的存储实际上分两种。一种是整型，一种是浮点型。整型的 <code>tag</code> 是 <code>integer</code>，浮点型是 <code>real</code>。</p>\n<p>先看 Integer Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _integer <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;integer&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_digit, string(<span class=\"string\">&quot;&lt;/integer&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.number(<span class=\"type\">Int</span>(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String-Parser\"><a href=\"#String-Parser\" class=\"headerlink\" title=\"String Parser\"></a>String Parser</h3><p>String Parser 和 Date Parser 以及 Data Parser 对比起来更简单，实际上就是去掉了最后转换的那一步。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _string <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;string&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/string&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.string(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\">_string.parse(<span class=\"string\">&quot;&lt;string&gt;The String&lt;/string&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tag-Parser\"><a href=\"#Tag-Parser\" class=\"headerlink\" title=\"Tag Parser\"></a>Tag Parser</h3><p>通过对比上面几种除了 Bool Parser 之外不同类型的 Parser，可以发现实现的方式很相似。</p>\n<ul>\n<li>closed tag，成对存在。</li>\n<li>中间存储的都是字符串，最后把字符串转为具体类型。</li>\n</ul>\n<p>把这些相似的 Parser 进行抽象，将相同部分封装成一个函数，不同的部分用传参的形式来实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tag</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tag</span>: <span class=\"type\">String</span>, <span class=\"keyword\">_</span> <span class=\"params\">p</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string(<span class=\"string\">&quot;&lt;<span class=\"subst\">\\(tag)</span>&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(p, string(<span class=\"string\">&quot;&lt;/<span class=\"subst\">\\(tag)</span>&gt;&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _date1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;&lt;date&gt;&quot;</span>, _any) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.date(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>).date<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">_date1.parse(<span class=\"string\">&quot;&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _string1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;string&quot;</span>, _any) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.string(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\">_string1.parse(<span class=\"string\">&quot;&lt;string&gt;The String&lt;/string&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-Parser\"><a href=\"#Array-Parser\" class=\"headerlink\" title=\"Array Parser\"></a>Array Parser</h3><p>Array Parser 和 Dictionary Parser 相对比较复杂，因为它们是容器类型，里面可以是任意的 PLIST 类型，包括它们本身。对于 Enum PLIST 来说，可以使用 <code>indirect</code> 关键字来表示这种情况，但是在定义 parser 的时候，确没有这些魔法。</p>\n<p>但是通过利用 Swift 的一些特性，还是很容易解决这个递归的问题。先忽略 Dictionary 类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> plist()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">plist</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _array <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;array&quot;</span>, _plist) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PLIST</span>.array(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dictionary-Parser\"><a href=\"#Dictionary-Parser\" class=\"headerlink\" title=\"Dictionary Parser\"></a>Dictionary Parser</h3><p>Dictionary Parser 的递归问题和 Array Parser 一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> plist()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">plist</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array <span class=\"operator\">&lt;|&gt;</span> _dict</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _dict <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, <span class=\"operator\">?</span>) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// 转换为 PLIST.dict</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但 Dictionary 和 Array 不一样的地方在于，Array 里面是多个 Plist 的元素，而 Dictionary 是 key-value 对，且必须是 key-value 对，也就是 <code>tag(&quot;dict&quot;, _keyValue)</code>。</p>\n<p>先实现一个 Key-Value Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _key <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;key&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/key&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _keyValue <span class=\"operator\">=</span> (&#123; a <span class=\"keyword\">in</span> &#123; b <span class=\"keyword\">in</span> (a, b) &#125;&#125; <span class=\"operator\">&lt;^&gt;</span> _key <span class=\"operator\">&lt;*&gt;</span> (value))</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以得到 Dictionary Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _dict <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, _keyValue) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.dict(atod(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\"><span class=\"comment\">/// Tuple Array to Dictionary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">atod</span>&lt;<span class=\"type\">Key</span>: <span class=\"type\">Hashable</span>, <span class=\"type\">Value</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tuples</span>: [(<span class=\"type\">Key</span>, <span class=\"type\">Value</span>)])</span> -&gt; [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dict: [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] <span class=\"operator\">=</span> [:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> tuples &#123;</span><br><span class=\"line\">        dict[key] <span class=\"operator\">=</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dict</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者换一种写法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _kv <span class=\"operator\">=</span> _keyValue <span class=\"operator\">&lt;&amp;&gt;</span> &#123; ttod(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _dict1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, _kv) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PLIST</span>.dict(</span><br><span class=\"line\">    \t\t<span class=\"variable\">$0</span>.flatMap &#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">        .reduce([String: <span class=\"type\">PLIST</span>]()) &#123; d, kv <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dict <span class=\"operator\">=</span> d</span><br><span class=\"line\">            dict.updateValue(kv.value, forKey: kv.key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dict</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ttod</span>&lt;<span class=\"type\">Key</span>: <span class=\"type\">Hashable</span>, <span class=\"type\">Value</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tuple</span>: (<span class=\"type\">Key</span>, <span class=\"type\">Value</span>))</span> -&gt; [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tuple.<span class=\"number\">0</span>: tuple.<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Plist-Parser\"><a href=\"#Plist-Parser\" class=\"headerlink\" title=\"Plist Parser\"></a>Plist Parser</h3><p>最后</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array <span class=\"operator\">&lt;|&gt;</span> _dict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> _plist.parse(plist)</span><br><span class=\"line\"><span class=\"built_in\">dump</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://zh.wikipedia.org/zh-hans/%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">属性列表</a><br><a href=\"http://blessingsoft.com/2017/05/28/parser-combinator/\">Parser Combinator</a><br><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2017-04-12-json-parser.md\">解析组合子</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Plist 是 Apple 家平台上一种很常见的配置文件，常见的存储格式是常见的 XML 格式（还有 Binary 格式），不同于 HTML 的复杂，Plist 只包含了比较少的几种标签（tag），所以实现使用 functional 的 parser combinator 来实现一个简单的 plist parser 也是一件很有意思的事情。</p>\n<h2 id=\"Plist\"><a href=\"#Plist\" class=\"headerlink\" title=\"Plist\"></a>Plist</h2><p>一个 Plist 文件内容长这个样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dict&gt;</span><br><span class=\"line\">    &lt;key&gt;number&lt;/key&gt;</span><br><span class=\"line\">    &lt;integer&gt;0&lt;/integer&gt;</span><br><span class=\"line\">    &lt;key&gt;date&lt;/key&gt;</span><br><span class=\"line\">    &lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;</span><br><span class=\"line\">    &lt;key&gt;data&lt;/key&gt;</span><br><span class=\"line\">    &lt;data&gt;VGVzdFZhbHVl&lt;/data&gt;</span><br><span class=\"line\">    &lt;key&gt;boolean&lt;/key&gt;</span><br><span class=\"line\">    &lt;true/&gt;</span><br><span class=\"line\">    &lt;key&gt;array&lt;/key&gt;</span><br><span class=\"line\">    &lt;array&gt;</span><br><span class=\"line\">        &lt;string&gt;string&lt;/string&gt;</span><br><span class=\"line\">        &lt;false/&gt;</span><br><span class=\"line\">        &lt;integer&gt;0&lt;/integer&gt;</span><br><span class=\"line\">    &lt;/array&gt;</span><br><span class=\"line\"> &lt;/dict&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">wikipedia</a> 上列出了一个详细的 <code>XML</code> 标签和 macOS/iOS 中的类型关系以及存储格式。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Foundation 类</th>\n<th align=\"left\">Core Foundation 类型</th>\n<th align=\"left\">XML 标签</th>\n<th align=\"left\">储存格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">NSString</td>\n<td align=\"left\">CFString</td>\n<td align=\"left\">&lt;string&gt;</td>\n<td align=\"left\">UTF-8 编码的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSNumber</td>\n<td align=\"left\">CFNumber</td>\n<td align=\"left\">&lt;real&gt;, &lt;integer&gt;</td>\n<td align=\"left\">十进制数字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSNumber</td>\n<td align=\"left\">CFBoolean</td>\n<td align=\"left\">&lt;true/&gt;, or &lt;false/&gt;</td>\n<td align=\"left\">无数据（只有标签）</td>\n</tr>\n<tr>\n<td align=\"left\">NSDate</td>\n<td align=\"left\">CFDate</td>\n<td align=\"left\">&lt;date&gt;</td>\n<td align=\"left\">ISO 8601 格式的日期字符串</td>\n</tr>\n<tr>\n<td align=\"left\">NSData</td>\n<td align=\"left\">CFData</td>\n<td align=\"left\">&lt;data&gt;</td>\n<td align=\"left\">Base64 编码的数据</td>\n</tr>\n<tr>\n<td align=\"left\">NSArray</td>\n<td align=\"left\">CFArray</td>\n<td align=\"left\">&lt;array&gt;</td>\n<td align=\"left\">可以包含任意数量的子元素</td>\n</tr>\n<tr>\n<td align=\"left\">NSDictionary</td>\n<td align=\"left\">CFDictionary</td>\n<td align=\"left\">&lt;dict&gt;</td>\n<td align=\"left\">交替包含 &lt;key&gt; 标签和 plist 元素标签</td>\n</tr>\n</tbody></table>\n<p>根据这个表格，我们可以定义出 Plist 的数据结构。</p>\n<h2 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// The plist data model</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">PLIST</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;true/&gt; or &lt;false/&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> bool(<span class=\"type\">Bool</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 2017-08-05T14:25:14Z</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> date(<span class=\"type\">Date</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;data&gt;VGVzdFZhbHVl&lt;/data&gt; (&lt;54657374 56616c75 65&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> data(<span class=\"type\">Data</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;integer&gt;233&lt;/integer&gt; or &lt;real&gt;2.33&lt;/real&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> number(<span class=\"type\">Int</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;string&gt;string&lt;/string&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> string(<span class=\"type\">String</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;array&gt;&lt;string&gt;The String&lt;/string&gt;&lt;/array&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> array([<span class=\"type\">PLIST</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// &lt;dict&gt;&lt;key&gt;The Key&lt;/key&gt;&lt;string&gt;The String&lt;/string&gt;&lt;/dict&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">indirect</span> <span class=\"keyword\">case</span> dict([String: <span class=\"type\">PLIST</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>根据 Plist data model，想要解析一个 Plist 字符串 得到 <code>PLIST</code> 类型，只需要一个 <code>parser</code>。</p>\n<p>没错，只需要一个 parser，这个 parser 大概长这样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parser: <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> parser.parse(<span class=\"string\">&quot;plist&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>let parser: Parser&lt;PLIST&gt;</code> 的实现才是最关键的。一个 <code>PLIST</code> 是由 <code>Bool</code> <code>Date</code> <code>Data</code> <code>Number</code> <code>String</code> 5 种简单的类型和 <code>Array&lt;PLIST&gt;</code> <code>Dictionary&lt;PLIST&gt;</code> 2 种容器（nested）类型组成，所以一个 <code>Parser&lt;PLIST&gt;</code> 也是由对应的 <code>Parser&lt;Bool&gt;</code> <code>Parser&lt;Date&gt;</code> <code>Parser&lt;Data&gt;</code> <code>Parser&lt;Number&gt;</code> <code>Parser&lt;String&gt;</code> 5 中简单的 parser 和 <code>Parser&lt;Array&gt;</code> <code>Parser&lt;Dictionary&gt;</code> 2 种容器类型 parser 组成。</p>\n<h3 id=\"Bool-Parser\"><a href=\"#Bool-Parser\" class=\"headerlink\" title=\"Bool Parser\"></a>Bool Parser</h3><p>在 Plist 中，Bool 类型由两种形式 <code>&lt;true/&gt;</code> 和 <code>&lt;false/&gt;</code>，所以一个 Bool 类型的 parser 也就是能够解析字符串 <code>&lt;true/&gt;</code> 和 <code>&lt;false/&gt;</code>。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _true <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;true/&gt;&quot;</span>) <span class=\"operator\">&lt;&amp;&gt;</span> const(<span class=\"type\">PLIST</span>.bool(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> _false <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;false/&gt;&quot;</span>) <span class=\"operator\">&lt;&amp;&gt;</span> const(<span class=\"type\">PLIST</span>.bool(<span class=\"literal\">false</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _bool <span class=\"operator\">=</span> _true <span class=\"operator\">&lt;|&gt;</span> _false</span><br><span class=\"line\">_bool.parse(<span class=\"string\">&quot;&lt;false/&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Date-Parser\"><a href=\"#Date-Parser\" class=\"headerlink\" title=\"Date Parser\"></a>Date Parser</h3><p>Plist 中的 Date 类型存储的是 UTC 字符串，如 <code>&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;</code>。字符串中的开始标签 <code>&lt;date&gt;</code> 和结束标签 <code>&lt;/date&gt;</code> 对于解析的结果来说是没有用的，所以一个 Date 类型的 parser 是要将这个字符串解析成 <code>PLIST.date(date)</code>, date 为 2017-08-05T14:25:14Z 通过 format 得到。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _date <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;date&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/date&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.date(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>).date<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">_date.parse(<span class=\"string\">&quot;&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// UTC Date</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> date: <span class=\"type\">Date</span>? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> formatter <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>()</span><br><span class=\"line\">        formatter.dateFormat <span class=\"operator\">=</span> <span class=\"string\">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&#x27;Z&#x27;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> formatter.date(from: <span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Data-Parser\"><a href=\"#Data-Parser\" class=\"headerlink\" title=\"Data Parser\"></a>Data Parser</h3><p>Plist 中的 Data 类型存储的是 Base64 编码后的数据，所以实现一个 Data Parser 和 Date Parser 差不多，区别是 tag 和 Data 类型初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _data <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;data&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/data&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.data(<span class=\"type\">Data</span>(base64Encoded: <span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dataString <span class=\"operator\">=</span> _data.parse(<span class=\"string\">&quot;&lt;data&gt;VGVzdFZhbHVl&lt;/data&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Number-Parser\"><a href=\"#Number-Parser\" class=\"headerlink\" title=\"Number Parser\"></a>Number Parser</h3><p>Plist 中的 Number 的存储实际上分两种。一种是整型，一种是浮点型。整型的 <code>tag</code> 是 <code>integer</code>，浮点型是 <code>real</code>。</p>\n<p>先看 Integer Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _integer <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;integer&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_digit, string(<span class=\"string\">&quot;&lt;/integer&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.number(<span class=\"type\">Int</span>(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>))<span class=\"operator\">!</span>) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String-Parser\"><a href=\"#String-Parser\" class=\"headerlink\" title=\"String Parser\"></a>String Parser</h3><p>String Parser 和 Date Parser 以及 Data Parser 对比起来更简单，实际上就是去掉了最后转换的那一步。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _string <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;string&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/string&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.string(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\">_string.parse(<span class=\"string\">&quot;&lt;string&gt;The String&lt;/string&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Tag-Parser\"><a href=\"#Tag-Parser\" class=\"headerlink\" title=\"Tag Parser\"></a>Tag Parser</h3><p>通过对比上面几种除了 Bool Parser 之外不同类型的 Parser，可以发现实现的方式很相似。</p>\n<ul>\n<li>closed tag，成对存在。</li>\n<li>中间存储的都是字符串，最后把字符串转为具体类型。</li>\n</ul>\n<p>把这些相似的 Parser 进行抽象，将相同部分封装成一个函数，不同的部分用传参的形式来实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">tag</span>&lt;<span class=\"type\">A</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tag</span>: <span class=\"type\">String</span>, <span class=\"keyword\">_</span> <span class=\"params\">p</span>: <span class=\"type\">Parser</span>&lt;<span class=\"type\">A</span>&gt;)</span> -&gt; <span class=\"type\">Parser</span>&lt;[<span class=\"type\">A</span>]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string(<span class=\"string\">&quot;&lt;<span class=\"subst\">\\(tag)</span>&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(p, string(<span class=\"string\">&quot;&lt;/<span class=\"subst\">\\(tag)</span>&gt;&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _date1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;&lt;date&gt;&quot;</span>, _any) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.date(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>).date<span class=\"operator\">!</span>) &#125;</span><br><span class=\"line\">_date1.parse(<span class=\"string\">&quot;&lt;date&gt;2017-08-05T14:25:14Z&lt;/date&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _string1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;string&quot;</span>, _any) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.string(<span class=\"type\">String</span>(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\">_string1.parse(<span class=\"string\">&quot;&lt;string&gt;The String&lt;/string&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-Parser\"><a href=\"#Array-Parser\" class=\"headerlink\" title=\"Array Parser\"></a>Array Parser</h3><p>Array Parser 和 Dictionary Parser 相对比较复杂，因为它们是容器类型，里面可以是任意的 PLIST 类型，包括它们本身。对于 Enum PLIST 来说，可以使用 <code>indirect</code> 关键字来表示这种情况，但是在定义 parser 的时候，确没有这些魔法。</p>\n<p>但是通过利用 Swift 的一些特性，还是很容易解决这个递归的问题。先忽略 Dictionary 类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> plist()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">plist</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _array <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;array&quot;</span>, _plist) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PLIST</span>.array(<span class=\"variable\">$0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Dictionary-Parser\"><a href=\"#Dictionary-Parser\" class=\"headerlink\" title=\"Dictionary Parser\"></a>Dictionary Parser</h3><p>Dictionary Parser 的递归问题和 Array Parser 一样。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> plist()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">plist</span>()</span> -&gt; <span class=\"type\">Parser</span>&lt;<span class=\"type\">PLIST</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array <span class=\"operator\">&lt;|&gt;</span> _dict</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _dict <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, <span class=\"operator\">?</span>) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/// 转换为 PLIST.dict</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但 Dictionary 和 Array 不一样的地方在于，Array 里面是多个 Plist 的元素，而 Dictionary 是 key-value 对，且必须是 key-value 对，也就是 <code>tag(&quot;dict&quot;, _keyValue)</code>。</p>\n<p>先实现一个 Key-Value Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _key <span class=\"operator\">=</span> string(<span class=\"string\">&quot;&lt;key&gt;&quot;</span>) <span class=\"operator\">*&gt;</span> manyTill(_any, string(<span class=\"string\">&quot;&lt;/key&gt;&quot;</span>)) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">String</span>(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> _keyValue <span class=\"operator\">=</span> (&#123; a <span class=\"keyword\">in</span> &#123; b <span class=\"keyword\">in</span> (a, b) &#125;&#125; <span class=\"operator\">&lt;^&gt;</span> _key <span class=\"operator\">&lt;*&gt;</span> (value))</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以得到 Dictionary Parser：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _dict <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, _keyValue) <span class=\"operator\">&lt;&amp;&gt;</span> &#123; <span class=\"type\">PLIST</span>.dict(atod(<span class=\"variable\">$0</span>)) &#125;</span><br><span class=\"line\"><span class=\"comment\">/// Tuple Array to Dictionary</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">atod</span>&lt;<span class=\"type\">Key</span>: <span class=\"type\">Hashable</span>, <span class=\"type\">Value</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tuples</span>: [(<span class=\"type\">Key</span>, <span class=\"type\">Value</span>)])</span> -&gt; [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dict: [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] <span class=\"operator\">=</span> [:]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> tuples &#123;</span><br><span class=\"line\">        dict[key] <span class=\"operator\">=</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dict</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者换一种写法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _kv <span class=\"operator\">=</span> _keyValue <span class=\"operator\">&lt;&amp;&gt;</span> &#123; ttod(<span class=\"variable\">$0</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> _dict1 <span class=\"operator\">=</span> tag(<span class=\"string\">&quot;dict&quot;</span>, _kv) <span class=\"operator\">&lt;&amp;&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PLIST</span>.dict(</span><br><span class=\"line\">    \t\t<span class=\"variable\">$0</span>.flatMap &#123; <span class=\"variable\">$0</span> &#125;</span><br><span class=\"line\">        .reduce([String: <span class=\"type\">PLIST</span>]()) &#123; d, kv <span class=\"keyword\">in</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> dict <span class=\"operator\">=</span> d</span><br><span class=\"line\">            dict.updateValue(kv.value, forKey: kv.key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dict</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ttod</span>&lt;<span class=\"type\">Key</span>: <span class=\"type\">Hashable</span>, <span class=\"type\">Value</span>&gt;(<span class=\"keyword\">_</span> <span class=\"params\">tuple</span>: (<span class=\"type\">Key</span>, <span class=\"type\">Value</span>))</span> -&gt; [<span class=\"type\">Key</span>: <span class=\"type\">Value</span>] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tuple.<span class=\"number\">0</span>: tuple.<span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Plist-Parser\"><a href=\"#Plist-Parser\" class=\"headerlink\" title=\"Plist Parser\"></a>Plist Parser</h3><p>最后</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _plist <span class=\"operator\">=</span> _bool <span class=\"operator\">&lt;|&gt;</span> _string <span class=\"operator\">&lt;|&gt;</span> _integer <span class=\"operator\">&lt;|&gt;</span> _date <span class=\"operator\">&lt;|&gt;</span> _data <span class=\"operator\">&lt;|&gt;</span> _array <span class=\"operator\">&lt;|&gt;</span> _dict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result <span class=\"operator\">=</span> _plist.parse(plist)</span><br><span class=\"line\"><span class=\"built_in\">dump</span>(result)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h2><p><a href=\"https://zh.wikipedia.org/zh-hans/%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">属性列表</a><br><a href=\"http://blessingsoft.com/2017/05/28/parser-combinator/\">Parser Combinator</a><br><a href=\"https://github.com/nixzhu/dev-blog/blob/master/2017-04-12-json-parser.md\">解析组合子</a></p>\n"},{"title":"HTTP Streaming/Chunked","date":"2020-04-15T12:00:00.000Z","_content":"## TL;DR\n\n使用 `Cocoa Foundation` 框架来实现 `HTTP Streaming/Chunked` 的时候，底层会将设置的 `Transfer-Encoding: chunked` 的值改成大写的 `Chunked` 发出去，如果后端不支持，那么必须通过比如 `hook` 的方式不让底层对这个值进行修改并发送出去。其次就是如果服务器已经返回了数据但是框架没有给任何回调，可能是因为服务器返回的 `Content-Type` 为 `text/html`，导致框架等待 `first 512 bytes` 数据，改用其他的类型即可。\n\n\n## 背景\n\n提供全球服务的能音视频通话的 IM 产品，大多数都是以 **自定义信令** 为基础来提升网络性通信能以及防止被封禁。\n\n常见的几种通信方式有：\n\n* IP/Port (TCP)\n* TLS (TLS Resumption or TLS Verify)\n* GCM (FCM)\n* WebSocket\n* HTTP Persistent Connection\n\n前面几种都是其实都是通过 `IP/Port` 的方式来建立连接，那么一旦 IP 被封禁了，那么就只能通过其他手段下发 IP 地址然后不断的更换 IP 来绕过。 `GCM`([FCM](https://firebase.google.com/docs/cloud-messaging/)) 是谷歌提供的信令通道。`WebSocket` 需要服务器的支持，`Nginx` 和 `Amazon Cloudfront` 是支持的，但是 `Azure` 和 `Azure Domain Fronting` 不支持。所以最近为了进一步完善网络通信的建设，决定增加 HTTP 长链接的通道作为候补。\n\n\n## HTTP Persistent Connection\n\nHTTP Persistent Connection 也叫 HTTP Connection Reuse 或者其他的 Keep Alive 等。像 IM 类型应用，如果每一次通信都使用普通的 HTTP(s) 的话，那么由于每次建立 TCP 都需要三次握手，外加上 SSL/TLS 握手，可能需要 10+ 个 RTT，这对于 IM 来说是难以接受的。优化的方向也很明显，就是尽量避免 HTTPS 建立和关闭所带来的性能消耗，最好就是整个生命周期内，只建立一次关闭一次。\n\nHTTP 1.1 中默认使用 `Keep-Alive` ，来达到连接复用，但仅仅是这个对于 IM 应用来说，还是太捉襟见肘了。然后对比 `Long Poll` 的方式，显然 `Streaming` 的方式性能会更加好。\n\n> HTTP 2.0 也由于服务器不支持的原因，暂时不可行。\n\n\n## Streaming/Chunked\n\nHTTP 1.1 中支持了 chunked message （见 [Chunked transfer encoding - Wikipedia](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)）。利用这个特性，我们可以通过 chunked 的方式，来避免重复建立连接。\n\n网络请求包含了上行和下行，所以我们调研了两种方案：\n\n1. 利用一条 URL 同时上下行 chunked 数据，发现 `cloudfront` 是支持的，但 `Azure` 不支持。Azure cdn 在收到第一个下行包时，会在上行包中插入 chunked 结束符，并不再转发上行包，但下行包仍然会被转发到客户端。❌\n2. 利用两条 URL 来实现，一条s用于发送信令，一条用于读取信令。✅\n\n\n### How to\n\n既然是 HTTP 协议，那么首先想到的就是使用 `Foundation` 中的 `URLSession` 来实现。为了方便我们先把上行的 URL 叫做 `uplink` ，下行专用的 URL  叫做 `downlink`。\n\n首先按照 `HTTP 1.1` 的标准，将 `uplink` 的请求头 `Transfer-Encoding` 设为 `chunked`。为了能给异步持续的将信令数据发送到服务器，需要利用 `Bound Pair Stream`，将 `InputStream` 连上 `httpBody`，然后持有 `OutputStream`，每次有数据需要发送的时候，就将数据从 `OutputStream` 写入，然后数据就会流到 `InputStream` 去，`URLSession` 就会不断的读取数据并发送到服务器。\n\n至于 `downlink`，只需要服务器在 response 的时候，将 `Transfer-Encoding` 设为 `chunked` 即可，这样我们就可以通过 `delegate` 方法 `func urlSession(_:dataTask:didReceive:)` 源源不断的读取下行数据。\n\n除此之外，后端还需要对 `uplink` 和 `downlink` 进行配对，进行密钥交换等步骤。成功之后才能够开始发送和接收普通的信令消息。举例比如我们配对的步骤叫做 `name channel`，首先是 `uplink` 发送第一个 `name channel` 的包，将加密方式、密钥和 `Connection ID` 等发送给服务器，然后进入等待状态。然后 `downlink` 发起请求，将 `name channel` 的数据发送给服务器，服务器通过对比 `Connection ID` 配对成功后，通过 `downlink` 返回第一个包，通知客户端已经连接建立完成，后续可以开始发送普通信令。\n\n\n### But\n\n但往往理想很丰满，现实却很骨感。\n\n\n#### 问题 1\n\n按照前面的流程建立连接，`uplink` 在发送第一个 chunk 数据的时候，服务端马上就返回了 `Server 500` 的错误。这个错误和 `Transfer-Encoding` 有关，通过抓包能看到请求的 `header` 和 `body` 都很普通。之前调研时使用 `python` 写的测试代码，已经证明了这个方案是没问题的。但到了 iOS 这一端，服务器却发生了错误。\n\n通过连调，发现 `uplink` 走到了普通 `Post` 的流程，而不是应该的 `Stream` 流程。如果将 `Transfer-Encoding` 去掉，却不会 `Server 500`，连接正常结束了。得出结论是当存在 `Tranfer-Encoding` 为 `Chunked` 时，后端走到了 `Post` 流程，然后用 `Post` 流程的方式去获取 `body` 的时候，数据异常导致了 `Server 500`，简单来说也就是 `Transfer-Encoding` 和 `body` 不匹配。\n\n根据抓包的数据对比，iOS 端的包和正常的 python 的包，**唯一** 的区别是 `Chunked` 和 `chunked`，一个大写一个小写。并且 [Wireshark](https://www.wireshark.org) 中也会提示 `[Expert Info (Warning/Undecoded): Unknown transfer coding name in Transfer-Encoding header]`。而我们在设置 `Transfer-Encoding` 的时候，其实也是使用小写的 `chunked`，但经过 `URLSession` 后会变成了大写。HTTP RFC 规定 header field 大小写不敏感，但没有对 value 进行规定。对比用的 python 的框架，则会将 `Transfer-Encoding` 处理成小写。这个问题和迷幻，但我们可以得到结论就是后端所使用的服务，并不支持大写的 `Chunked`。\n\n解决办法就是通过 Hook 的方式，禁止底层将 `header` 中的 `Transfer-Encoding` 进行更改。\n\n> 实际操作中其实还有更多问题，比如 `URLSessionDataTask` 进行处理 `orignalRequest` 的时候，会把 `currentRequest` 的 `Transfer-Encoding` 的值设为 `nil`。\n\n\n#### 问题 2\n\n在 `downlink` 发送完 `name channel` 之后，一直等待不到返回，直到超时后才返回第一个包，`HTTP/1.1 200 OK`，并马上结束连接。由于 `downlink` 其实就是一个普通的 `POST` 请求，需要的参数也比较少，`name channel` 的数据也很容易确定是否正确，并且返回的第一个包 `header` 和 `body` 除了 `Transfer-Encoding` 为 `Identity` 外并无异常。\n\n首先还是进行抓包，发现其实在请求刚发出去不久，服务器就马上返回了，并且 `header` 和 `body` 所有的数据都很正常，包括 `Transfer-Encoding` 为 `chunked`。问题来了，为什么服务器返回给 `URLSession` 了，`URLSession` 却没有通过 `delegate` 回调给我们呢，它连 `func urlSession(_:dataTask:didReceive, completionHandler:`，明明 `header` 和第一个 `chunk` 的 `body` 都已经返回了。\n\n这个问题比问题 1 还迷，虽然它把 `Transfer-Encoding` 从 `chunked` 改为了 `Identity` 还能接受，因为我们还可以通过查看 `header` 中没有 `Content-Length` 来判断，它其实就是 `chunked` 的方式。\n\n这个问题的解决过程比较曲折，首先我发现不等待 `downlink` 返回 `name channel` 成功，继续通过 `uplink` 发送信令时，`downlink` 就能够返回 `name channel` 成功的 `chunk` 以及后续信令的 `chunk`，`downlink` 不会超时断开。但是我们的整个流程是必须要等 `name channel` 成功之后才能发生消息，中间牵扯着很多 `seq` 和 `ack` 的问题。不能发送普通的信令，那么就尝试多发送一次 `name channel` 的时候，发现也还是不行。\n\n发送普通信令可以，发送 `name channel` 却不行。后来尝试了其他信令，看看是否是偶然问题，最终发现了主要的问题：** `URLSession` 会等待第一个 512 bytes 数据，只有当 buffer 大于 512 bytes 后才会返回 response 和 data**。\n\n通过以 `first 512 bytes` 为关键词搜索时，在 [HTML 5 rules for determining content types](https://dev.w3.org/html5/cts/html5-type-sniffing.html) 发现 H5 对 `first 512 bytes` 有一定的要求。猜想原因和 `Content-Type` 为 `text/html` 有关，后来验证了这个猜想。\n\n反过来一想，也很难说 `URLSession` 的实现是否有问题，但没有任何文档说明确认给人带来不少困扰。对比起来 `Java` 和 `Python` 都没有遇到这个问题。至于为什么服务器返回的是 `text/html`，而不是做客户端常用的 `application/json` 之类的，大概是因为后端用的服务框架是一个标准对 `web` 框架吧。\n\n到这里解决方式就很简单了，** 把该死的 `Content-Type` 改为符合场景的 `application/octet-stream` **。\n\n\n#### 问题 3\n\n其实是最初遇到的问题，就是 `Proxy` 的影响。首先 `Proxy` 看到的数据，是否可信的问题，其次就是 `Proxy` 对 `header` 带来的影响，比如 `End-to-end headers` 和 `Hop-by-hop headers`。([HTTP headers - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers)）\n\n开发过程中，早期使用 `Charles` 和 `ProxyMan` 来抓 `HTTPS` 的包，没有遇到问题 1 `Server 500` 的问题，某一次重启电脑后，没有打开 `Proxy`，然后才发现会稳定出现 `Server 500`。\n\n还有值得一提的就是代码服务器的问题，在开发过程中也遇到过直连和通过代理服务器后出现不一致的问题，虽然后端说代理服务器不会做任何处理，只是将数据进行透传。\n\n\n#### 其他的方案\n\n在解决上面的几个问题时，由于文档和相关的讨论都比较少，并且没有看到有人遇到这些问题，在确定问题出在 `URLSession` 及其底层实现上的情况下，在没头绪的时候还尝试过 `libcurl` 的方案。\n\n由于 apple 为了建设 Swift 的生态，提供了一个开源版的 [Foundation](https://github.com/apple/swift-corelibs-foundation)，其中就包含有 [URLSession](https://github.com/apple/swift-corelibs-foundation/tree/master/Sources/FoundationNetworking/URLSession) 的实现。在使用过程中发现它在处理 `body` 的时候，是有问题的： `当 Body 为 Stream 的情况下，根据 libcurl 的 read function 来读取 body 数据，每次读取一个指定大小的 chunk，当读取的时候，发现 inputStream 已经没有数据了，就认为是读取完所有数据了。` 这显然与我们的要求，以及 iOS 上的 `URLSession` 的行为不一致，`input stream` 在读的时候没读到数据，有可能 `output stream` 还在写或者即将写，并不代表整个流已经完成。最简单来说就是为了性能考虑，`Output stream` 并不是用循环的方式进行写数据的，它有一个有限大小的 `buffer`，必须要等到有足够空间的时候才能成功写入数据。所以一般的方式也是 [官方推荐](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Streams/Streams.html#//apple_ref/doc/uid/10000188-SW1) 的方式，都是使用 `RunLoop` 。\n\n所以我们需要将这部分的实现改一下，改为 `RunLoop` 的方式，当 `read function` 要读取数据时，发现 `input stream` 还没有数据，那么就返回 `retryLater`，告诉 `libcurl` 的 `read socket` 暂停发送数据，先等待。当 `RunLoop` 告诉我们有数据了 `hasBytesAvailable` 的时候，再让 `read socket` 进行 `resume`。可以参考 `File` 类型的 `Body` 的实现。\n\n\n### Conclusion\n\n如果想用 `Cocoa Foundation` 实现 `Streaming/Chunked`，可能并不会那么顺利。有些问题在其他平台没有暴露出来，也不代表着一定就是 `Cocoa Foundation` 的锅，要善于用可靠的方式从一个更 low level 的角度找到不同平台不同实现直接的差异。当没有文档资料对问题有帮助的时候，「思考 -> 猜测 -> 验证」，可能是最佳的解决问题的方式。","source":"_posts/http-chunked.md","raw":"---\ntitle: HTTP Streaming/Chunked\ndate: 2020-04-15 20:00:00\ntags:\n    - swift\n    - chunked\n    - streaming\n    - http\ncategories: networking\n---\n## TL;DR\n\n使用 `Cocoa Foundation` 框架来实现 `HTTP Streaming/Chunked` 的时候，底层会将设置的 `Transfer-Encoding: chunked` 的值改成大写的 `Chunked` 发出去，如果后端不支持，那么必须通过比如 `hook` 的方式不让底层对这个值进行修改并发送出去。其次就是如果服务器已经返回了数据但是框架没有给任何回调，可能是因为服务器返回的 `Content-Type` 为 `text/html`，导致框架等待 `first 512 bytes` 数据，改用其他的类型即可。\n\n\n## 背景\n\n提供全球服务的能音视频通话的 IM 产品，大多数都是以 **自定义信令** 为基础来提升网络性通信能以及防止被封禁。\n\n常见的几种通信方式有：\n\n* IP/Port (TCP)\n* TLS (TLS Resumption or TLS Verify)\n* GCM (FCM)\n* WebSocket\n* HTTP Persistent Connection\n\n前面几种都是其实都是通过 `IP/Port` 的方式来建立连接，那么一旦 IP 被封禁了，那么就只能通过其他手段下发 IP 地址然后不断的更换 IP 来绕过。 `GCM`([FCM](https://firebase.google.com/docs/cloud-messaging/)) 是谷歌提供的信令通道。`WebSocket` 需要服务器的支持，`Nginx` 和 `Amazon Cloudfront` 是支持的，但是 `Azure` 和 `Azure Domain Fronting` 不支持。所以最近为了进一步完善网络通信的建设，决定增加 HTTP 长链接的通道作为候补。\n\n\n## HTTP Persistent Connection\n\nHTTP Persistent Connection 也叫 HTTP Connection Reuse 或者其他的 Keep Alive 等。像 IM 类型应用，如果每一次通信都使用普通的 HTTP(s) 的话，那么由于每次建立 TCP 都需要三次握手，外加上 SSL/TLS 握手，可能需要 10+ 个 RTT，这对于 IM 来说是难以接受的。优化的方向也很明显，就是尽量避免 HTTPS 建立和关闭所带来的性能消耗，最好就是整个生命周期内，只建立一次关闭一次。\n\nHTTP 1.1 中默认使用 `Keep-Alive` ，来达到连接复用，但仅仅是这个对于 IM 应用来说，还是太捉襟见肘了。然后对比 `Long Poll` 的方式，显然 `Streaming` 的方式性能会更加好。\n\n> HTTP 2.0 也由于服务器不支持的原因，暂时不可行。\n\n\n## Streaming/Chunked\n\nHTTP 1.1 中支持了 chunked message （见 [Chunked transfer encoding - Wikipedia](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)）。利用这个特性，我们可以通过 chunked 的方式，来避免重复建立连接。\n\n网络请求包含了上行和下行，所以我们调研了两种方案：\n\n1. 利用一条 URL 同时上下行 chunked 数据，发现 `cloudfront` 是支持的，但 `Azure` 不支持。Azure cdn 在收到第一个下行包时，会在上行包中插入 chunked 结束符，并不再转发上行包，但下行包仍然会被转发到客户端。❌\n2. 利用两条 URL 来实现，一条s用于发送信令，一条用于读取信令。✅\n\n\n### How to\n\n既然是 HTTP 协议，那么首先想到的就是使用 `Foundation` 中的 `URLSession` 来实现。为了方便我们先把上行的 URL 叫做 `uplink` ，下行专用的 URL  叫做 `downlink`。\n\n首先按照 `HTTP 1.1` 的标准，将 `uplink` 的请求头 `Transfer-Encoding` 设为 `chunked`。为了能给异步持续的将信令数据发送到服务器，需要利用 `Bound Pair Stream`，将 `InputStream` 连上 `httpBody`，然后持有 `OutputStream`，每次有数据需要发送的时候，就将数据从 `OutputStream` 写入，然后数据就会流到 `InputStream` 去，`URLSession` 就会不断的读取数据并发送到服务器。\n\n至于 `downlink`，只需要服务器在 response 的时候，将 `Transfer-Encoding` 设为 `chunked` 即可，这样我们就可以通过 `delegate` 方法 `func urlSession(_:dataTask:didReceive:)` 源源不断的读取下行数据。\n\n除此之外，后端还需要对 `uplink` 和 `downlink` 进行配对，进行密钥交换等步骤。成功之后才能够开始发送和接收普通的信令消息。举例比如我们配对的步骤叫做 `name channel`，首先是 `uplink` 发送第一个 `name channel` 的包，将加密方式、密钥和 `Connection ID` 等发送给服务器，然后进入等待状态。然后 `downlink` 发起请求，将 `name channel` 的数据发送给服务器，服务器通过对比 `Connection ID` 配对成功后，通过 `downlink` 返回第一个包，通知客户端已经连接建立完成，后续可以开始发送普通信令。\n\n\n### But\n\n但往往理想很丰满，现实却很骨感。\n\n\n#### 问题 1\n\n按照前面的流程建立连接，`uplink` 在发送第一个 chunk 数据的时候，服务端马上就返回了 `Server 500` 的错误。这个错误和 `Transfer-Encoding` 有关，通过抓包能看到请求的 `header` 和 `body` 都很普通。之前调研时使用 `python` 写的测试代码，已经证明了这个方案是没问题的。但到了 iOS 这一端，服务器却发生了错误。\n\n通过连调，发现 `uplink` 走到了普通 `Post` 的流程，而不是应该的 `Stream` 流程。如果将 `Transfer-Encoding` 去掉，却不会 `Server 500`，连接正常结束了。得出结论是当存在 `Tranfer-Encoding` 为 `Chunked` 时，后端走到了 `Post` 流程，然后用 `Post` 流程的方式去获取 `body` 的时候，数据异常导致了 `Server 500`，简单来说也就是 `Transfer-Encoding` 和 `body` 不匹配。\n\n根据抓包的数据对比，iOS 端的包和正常的 python 的包，**唯一** 的区别是 `Chunked` 和 `chunked`，一个大写一个小写。并且 [Wireshark](https://www.wireshark.org) 中也会提示 `[Expert Info (Warning/Undecoded): Unknown transfer coding name in Transfer-Encoding header]`。而我们在设置 `Transfer-Encoding` 的时候，其实也是使用小写的 `chunked`，但经过 `URLSession` 后会变成了大写。HTTP RFC 规定 header field 大小写不敏感，但没有对 value 进行规定。对比用的 python 的框架，则会将 `Transfer-Encoding` 处理成小写。这个问题和迷幻，但我们可以得到结论就是后端所使用的服务，并不支持大写的 `Chunked`。\n\n解决办法就是通过 Hook 的方式，禁止底层将 `header` 中的 `Transfer-Encoding` 进行更改。\n\n> 实际操作中其实还有更多问题，比如 `URLSessionDataTask` 进行处理 `orignalRequest` 的时候，会把 `currentRequest` 的 `Transfer-Encoding` 的值设为 `nil`。\n\n\n#### 问题 2\n\n在 `downlink` 发送完 `name channel` 之后，一直等待不到返回，直到超时后才返回第一个包，`HTTP/1.1 200 OK`，并马上结束连接。由于 `downlink` 其实就是一个普通的 `POST` 请求，需要的参数也比较少，`name channel` 的数据也很容易确定是否正确，并且返回的第一个包 `header` 和 `body` 除了 `Transfer-Encoding` 为 `Identity` 外并无异常。\n\n首先还是进行抓包，发现其实在请求刚发出去不久，服务器就马上返回了，并且 `header` 和 `body` 所有的数据都很正常，包括 `Transfer-Encoding` 为 `chunked`。问题来了，为什么服务器返回给 `URLSession` 了，`URLSession` 却没有通过 `delegate` 回调给我们呢，它连 `func urlSession(_:dataTask:didReceive, completionHandler:`，明明 `header` 和第一个 `chunk` 的 `body` 都已经返回了。\n\n这个问题比问题 1 还迷，虽然它把 `Transfer-Encoding` 从 `chunked` 改为了 `Identity` 还能接受，因为我们还可以通过查看 `header` 中没有 `Content-Length` 来判断，它其实就是 `chunked` 的方式。\n\n这个问题的解决过程比较曲折，首先我发现不等待 `downlink` 返回 `name channel` 成功，继续通过 `uplink` 发送信令时，`downlink` 就能够返回 `name channel` 成功的 `chunk` 以及后续信令的 `chunk`，`downlink` 不会超时断开。但是我们的整个流程是必须要等 `name channel` 成功之后才能发生消息，中间牵扯着很多 `seq` 和 `ack` 的问题。不能发送普通的信令，那么就尝试多发送一次 `name channel` 的时候，发现也还是不行。\n\n发送普通信令可以，发送 `name channel` 却不行。后来尝试了其他信令，看看是否是偶然问题，最终发现了主要的问题：** `URLSession` 会等待第一个 512 bytes 数据，只有当 buffer 大于 512 bytes 后才会返回 response 和 data**。\n\n通过以 `first 512 bytes` 为关键词搜索时，在 [HTML 5 rules for determining content types](https://dev.w3.org/html5/cts/html5-type-sniffing.html) 发现 H5 对 `first 512 bytes` 有一定的要求。猜想原因和 `Content-Type` 为 `text/html` 有关，后来验证了这个猜想。\n\n反过来一想，也很难说 `URLSession` 的实现是否有问题，但没有任何文档说明确认给人带来不少困扰。对比起来 `Java` 和 `Python` 都没有遇到这个问题。至于为什么服务器返回的是 `text/html`，而不是做客户端常用的 `application/json` 之类的，大概是因为后端用的服务框架是一个标准对 `web` 框架吧。\n\n到这里解决方式就很简单了，** 把该死的 `Content-Type` 改为符合场景的 `application/octet-stream` **。\n\n\n#### 问题 3\n\n其实是最初遇到的问题，就是 `Proxy` 的影响。首先 `Proxy` 看到的数据，是否可信的问题，其次就是 `Proxy` 对 `header` 带来的影响，比如 `End-to-end headers` 和 `Hop-by-hop headers`。([HTTP headers - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers)）\n\n开发过程中，早期使用 `Charles` 和 `ProxyMan` 来抓 `HTTPS` 的包，没有遇到问题 1 `Server 500` 的问题，某一次重启电脑后，没有打开 `Proxy`，然后才发现会稳定出现 `Server 500`。\n\n还有值得一提的就是代码服务器的问题，在开发过程中也遇到过直连和通过代理服务器后出现不一致的问题，虽然后端说代理服务器不会做任何处理，只是将数据进行透传。\n\n\n#### 其他的方案\n\n在解决上面的几个问题时，由于文档和相关的讨论都比较少，并且没有看到有人遇到这些问题，在确定问题出在 `URLSession` 及其底层实现上的情况下，在没头绪的时候还尝试过 `libcurl` 的方案。\n\n由于 apple 为了建设 Swift 的生态，提供了一个开源版的 [Foundation](https://github.com/apple/swift-corelibs-foundation)，其中就包含有 [URLSession](https://github.com/apple/swift-corelibs-foundation/tree/master/Sources/FoundationNetworking/URLSession) 的实现。在使用过程中发现它在处理 `body` 的时候，是有问题的： `当 Body 为 Stream 的情况下，根据 libcurl 的 read function 来读取 body 数据，每次读取一个指定大小的 chunk，当读取的时候，发现 inputStream 已经没有数据了，就认为是读取完所有数据了。` 这显然与我们的要求，以及 iOS 上的 `URLSession` 的行为不一致，`input stream` 在读的时候没读到数据，有可能 `output stream` 还在写或者即将写，并不代表整个流已经完成。最简单来说就是为了性能考虑，`Output stream` 并不是用循环的方式进行写数据的，它有一个有限大小的 `buffer`，必须要等到有足够空间的时候才能成功写入数据。所以一般的方式也是 [官方推荐](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Streams/Streams.html#//apple_ref/doc/uid/10000188-SW1) 的方式，都是使用 `RunLoop` 。\n\n所以我们需要将这部分的实现改一下，改为 `RunLoop` 的方式，当 `read function` 要读取数据时，发现 `input stream` 还没有数据，那么就返回 `retryLater`，告诉 `libcurl` 的 `read socket` 暂停发送数据，先等待。当 `RunLoop` 告诉我们有数据了 `hasBytesAvailable` 的时候，再让 `read socket` 进行 `resume`。可以参考 `File` 类型的 `Body` 的实现。\n\n\n### Conclusion\n\n如果想用 `Cocoa Foundation` 实现 `Streaming/Chunked`，可能并不会那么顺利。有些问题在其他平台没有暴露出来，也不代表着一定就是 `Cocoa Foundation` 的锅，要善于用可靠的方式从一个更 low level 的角度找到不同平台不同实现直接的差异。当没有文档资料对问题有帮助的时候，「思考 -> 猜测 -> 验证」，可能是最佳的解决问题的方式。","slug":"http-chunked","published":1,"updated":"2022-01-02T11:46:40.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxx810xh000m9ith27rh8my9","content":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><p>使用 <code>Cocoa Foundation</code> 框架来实现 <code>HTTP Streaming/Chunked</code> 的时候，底层会将设置的 <code>Transfer-Encoding: chunked</code> 的值改成大写的 <code>Chunked</code> 发出去，如果后端不支持，那么必须通过比如 <code>hook</code> 的方式不让底层对这个值进行修改并发送出去。其次就是如果服务器已经返回了数据但是框架没有给任何回调，可能是因为服务器返回的 <code>Content-Type</code> 为 <code>text/html</code>，导致框架等待 <code>first 512 bytes</code> 数据，改用其他的类型即可。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>提供全球服务的能音视频通话的 IM 产品，大多数都是以 <strong>自定义信令</strong> 为基础来提升网络性通信能以及防止被封禁。</p>\n<p>常见的几种通信方式有：</p>\n<ul>\n<li>IP/Port (TCP)</li>\n<li>TLS (TLS Resumption or TLS Verify)</li>\n<li>GCM (FCM)</li>\n<li>WebSocket</li>\n<li>HTTP Persistent Connection</li>\n</ul>\n<p>前面几种都是其实都是通过 <code>IP/Port</code> 的方式来建立连接，那么一旦 IP 被封禁了，那么就只能通过其他手段下发 IP 地址然后不断的更换 IP 来绕过。 <code>GCM</code>(<a href=\"https://firebase.google.com/docs/cloud-messaging/\">FCM</a>) 是谷歌提供的信令通道。<code>WebSocket</code> 需要服务器的支持，<code>Nginx</code> 和 <code>Amazon Cloudfront</code> 是支持的，但是 <code>Azure</code> 和 <code>Azure Domain Fronting</code> 不支持。所以最近为了进一步完善网络通信的建设，决定增加 HTTP 长链接的通道作为候补。</p>\n<h2 id=\"HTTP-Persistent-Connection\"><a href=\"#HTTP-Persistent-Connection\" class=\"headerlink\" title=\"HTTP Persistent Connection\"></a>HTTP Persistent Connection</h2><p>HTTP Persistent Connection 也叫 HTTP Connection Reuse 或者其他的 Keep Alive 等。像 IM 类型应用，如果每一次通信都使用普通的 HTTP(s) 的话，那么由于每次建立 TCP 都需要三次握手，外加上 SSL/TLS 握手，可能需要 10+ 个 RTT，这对于 IM 来说是难以接受的。优化的方向也很明显，就是尽量避免 HTTPS 建立和关闭所带来的性能消耗，最好就是整个生命周期内，只建立一次关闭一次。</p>\n<p>HTTP 1.1 中默认使用 <code>Keep-Alive</code> ，来达到连接复用，但仅仅是这个对于 IM 应用来说，还是太捉襟见肘了。然后对比 <code>Long Poll</code> 的方式，显然 <code>Streaming</code> 的方式性能会更加好。</p>\n<blockquote>\n<p>HTTP 2.0 也由于服务器不支持的原因，暂时不可行。</p>\n</blockquote>\n<h2 id=\"Streaming-Chunked\"><a href=\"#Streaming-Chunked\" class=\"headerlink\" title=\"Streaming/Chunked\"></a>Streaming/Chunked</h2><p>HTTP 1.1 中支持了 chunked message （见 <a href=\"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\">Chunked transfer encoding - Wikipedia</a>）。利用这个特性，我们可以通过 chunked 的方式，来避免重复建立连接。</p>\n<p>网络请求包含了上行和下行，所以我们调研了两种方案：</p>\n<ol>\n<li>利用一条 URL 同时上下行 chunked 数据，发现 <code>cloudfront</code> 是支持的，但 <code>Azure</code> 不支持。Azure cdn 在收到第一个下行包时，会在上行包中插入 chunked 结束符，并不再转发上行包，但下行包仍然会被转发到客户端。❌</li>\n<li>利用两条 URL 来实现，一条s用于发送信令，一条用于读取信令。✅</li>\n</ol>\n<h3 id=\"How-to\"><a href=\"#How-to\" class=\"headerlink\" title=\"How to\"></a>How to</h3><p>既然是 HTTP 协议，那么首先想到的就是使用 <code>Foundation</code> 中的 <code>URLSession</code> 来实现。为了方便我们先把上行的 URL 叫做 <code>uplink</code> ，下行专用的 URL  叫做 <code>downlink</code>。</p>\n<p>首先按照 <code>HTTP 1.1</code> 的标准，将 <code>uplink</code> 的请求头 <code>Transfer-Encoding</code> 设为 <code>chunked</code>。为了能给异步持续的将信令数据发送到服务器，需要利用 <code>Bound Pair Stream</code>，将 <code>InputStream</code> 连上 <code>httpBody</code>，然后持有 <code>OutputStream</code>，每次有数据需要发送的时候，就将数据从 <code>OutputStream</code> 写入，然后数据就会流到 <code>InputStream</code> 去，<code>URLSession</code> 就会不断的读取数据并发送到服务器。</p>\n<p>至于 <code>downlink</code>，只需要服务器在 response 的时候，将 <code>Transfer-Encoding</code> 设为 <code>chunked</code> 即可，这样我们就可以通过 <code>delegate</code> 方法 <code>func urlSession(_:dataTask:didReceive:)</code> 源源不断的读取下行数据。</p>\n<p>除此之外，后端还需要对 <code>uplink</code> 和 <code>downlink</code> 进行配对，进行密钥交换等步骤。成功之后才能够开始发送和接收普通的信令消息。举例比如我们配对的步骤叫做 <code>name channel</code>，首先是 <code>uplink</code> 发送第一个 <code>name channel</code> 的包，将加密方式、密钥和 <code>Connection ID</code> 等发送给服务器，然后进入等待状态。然后 <code>downlink</code> 发起请求，将 <code>name channel</code> 的数据发送给服务器，服务器通过对比 <code>Connection ID</code> 配对成功后，通过 <code>downlink</code> 返回第一个包，通知客户端已经连接建立完成，后续可以开始发送普通信令。</p>\n<h3 id=\"But\"><a href=\"#But\" class=\"headerlink\" title=\"But\"></a>But</h3><p>但往往理想很丰满，现实却很骨感。</p>\n<h4 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h4><p>按照前面的流程建立连接，<code>uplink</code> 在发送第一个 chunk 数据的时候，服务端马上就返回了 <code>Server 500</code> 的错误。这个错误和 <code>Transfer-Encoding</code> 有关，通过抓包能看到请求的 <code>header</code> 和 <code>body</code> 都很普通。之前调研时使用 <code>python</code> 写的测试代码，已经证明了这个方案是没问题的。但到了 iOS 这一端，服务器却发生了错误。</p>\n<p>通过连调，发现 <code>uplink</code> 走到了普通 <code>Post</code> 的流程，而不是应该的 <code>Stream</code> 流程。如果将 <code>Transfer-Encoding</code> 去掉，却不会 <code>Server 500</code>，连接正常结束了。得出结论是当存在 <code>Tranfer-Encoding</code> 为 <code>Chunked</code> 时，后端走到了 <code>Post</code> 流程，然后用 <code>Post</code> 流程的方式去获取 <code>body</code> 的时候，数据异常导致了 <code>Server 500</code>，简单来说也就是 <code>Transfer-Encoding</code> 和 <code>body</code> 不匹配。</p>\n<p>根据抓包的数据对比，iOS 端的包和正常的 python 的包，<strong>唯一</strong> 的区别是 <code>Chunked</code> 和 <code>chunked</code>，一个大写一个小写。并且 <a href=\"https://www.wireshark.org/\">Wireshark</a> 中也会提示 <code>[Expert Info (Warning/Undecoded): Unknown transfer coding name in Transfer-Encoding header]</code>。而我们在设置 <code>Transfer-Encoding</code> 的时候，其实也是使用小写的 <code>chunked</code>，但经过 <code>URLSession</code> 后会变成了大写。HTTP RFC 规定 header field 大小写不敏感，但没有对 value 进行规定。对比用的 python 的框架，则会将 <code>Transfer-Encoding</code> 处理成小写。这个问题和迷幻，但我们可以得到结论就是后端所使用的服务，并不支持大写的 <code>Chunked</code>。</p>\n<p>解决办法就是通过 Hook 的方式，禁止底层将 <code>header</code> 中的 <code>Transfer-Encoding</code> 进行更改。</p>\n<blockquote>\n<p>实际操作中其实还有更多问题，比如 <code>URLSessionDataTask</code> 进行处理 <code>orignalRequest</code> 的时候，会把 <code>currentRequest</code> 的 <code>Transfer-Encoding</code> 的值设为 <code>nil</code>。</p>\n</blockquote>\n<h4 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h4><p>在 <code>downlink</code> 发送完 <code>name channel</code> 之后，一直等待不到返回，直到超时后才返回第一个包，<code>HTTP/1.1 200 OK</code>，并马上结束连接。由于 <code>downlink</code> 其实就是一个普通的 <code>POST</code> 请求，需要的参数也比较少，<code>name channel</code> 的数据也很容易确定是否正确，并且返回的第一个包 <code>header</code> 和 <code>body</code> 除了 <code>Transfer-Encoding</code> 为 <code>Identity</code> 外并无异常。</p>\n<p>首先还是进行抓包，发现其实在请求刚发出去不久，服务器就马上返回了，并且 <code>header</code> 和 <code>body</code> 所有的数据都很正常，包括 <code>Transfer-Encoding</code> 为 <code>chunked</code>。问题来了，为什么服务器返回给 <code>URLSession</code> 了，<code>URLSession</code> 却没有通过 <code>delegate</code> 回调给我们呢，它连 <code>func urlSession(_:dataTask:didReceive, completionHandler:</code>，明明 <code>header</code> 和第一个 <code>chunk</code> 的 <code>body</code> 都已经返回了。</p>\n<p>这个问题比问题 1 还迷，虽然它把 <code>Transfer-Encoding</code> 从 <code>chunked</code> 改为了 <code>Identity</code> 还能接受，因为我们还可以通过查看 <code>header</code> 中没有 <code>Content-Length</code> 来判断，它其实就是 <code>chunked</code> 的方式。</p>\n<p>这个问题的解决过程比较曲折，首先我发现不等待 <code>downlink</code> 返回 <code>name channel</code> 成功，继续通过 <code>uplink</code> 发送信令时，<code>downlink</code> 就能够返回 <code>name channel</code> 成功的 <code>chunk</code> 以及后续信令的 <code>chunk</code>，<code>downlink</code> 不会超时断开。但是我们的整个流程是必须要等 <code>name channel</code> 成功之后才能发生消息，中间牵扯着很多 <code>seq</code> 和 <code>ack</code> 的问题。不能发送普通的信令，那么就尝试多发送一次 <code>name channel</code> 的时候，发现也还是不行。</p>\n<p>发送普通信令可以，发送 <code>name channel</code> 却不行。后来尝试了其他信令，看看是否是偶然问题，最终发现了主要的问题：** <code>URLSession</code> 会等待第一个 512 bytes 数据，只有当 buffer 大于 512 bytes 后才会返回 response 和 data**。</p>\n<p>通过以 <code>first 512 bytes</code> 为关键词搜索时，在 <a href=\"https://dev.w3.org/html5/cts/html5-type-sniffing.html\">HTML 5 rules for determining content types</a> 发现 H5 对 <code>first 512 bytes</code> 有一定的要求。猜想原因和 <code>Content-Type</code> 为 <code>text/html</code> 有关，后来验证了这个猜想。</p>\n<p>反过来一想，也很难说 <code>URLSession</code> 的实现是否有问题，但没有任何文档说明确认给人带来不少困扰。对比起来 <code>Java</code> 和 <code>Python</code> 都没有遇到这个问题。至于为什么服务器返回的是 <code>text/html</code>，而不是做客户端常用的 <code>application/json</code> 之类的，大概是因为后端用的服务框架是一个标准对 <code>web</code> 框架吧。</p>\n<p>到这里解决方式就很简单了，** 把该死的 <code>Content-Type</code> 改为符合场景的 <code>application/octet-stream</code> **。</p>\n<h4 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h4><p>其实是最初遇到的问题，就是 <code>Proxy</code> 的影响。首先 <code>Proxy</code> 看到的数据，是否可信的问题，其次就是 <code>Proxy</code> 对 <code>header</code> 带来的影响，比如 <code>End-to-end headers</code> 和 <code>Hop-by-hop headers</code>。(<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\">HTTP headers - HTTP | MDN</a>）</p>\n<p>开发过程中，早期使用 <code>Charles</code> 和 <code>ProxyMan</code> 来抓 <code>HTTPS</code> 的包，没有遇到问题 1 <code>Server 500</code> 的问题，某一次重启电脑后，没有打开 <code>Proxy</code>，然后才发现会稳定出现 <code>Server 500</code>。</p>\n<p>还有值得一提的就是代码服务器的问题，在开发过程中也遇到过直连和通过代理服务器后出现不一致的问题，虽然后端说代理服务器不会做任何处理，只是将数据进行透传。</p>\n<h4 id=\"其他的方案\"><a href=\"#其他的方案\" class=\"headerlink\" title=\"其他的方案\"></a>其他的方案</h4><p>在解决上面的几个问题时，由于文档和相关的讨论都比较少，并且没有看到有人遇到这些问题，在确定问题出在 <code>URLSession</code> 及其底层实现上的情况下，在没头绪的时候还尝试过 <code>libcurl</code> 的方案。</p>\n<p>由于 apple 为了建设 Swift 的生态，提供了一个开源版的 <a href=\"https://github.com/apple/swift-corelibs-foundation\">Foundation</a>，其中就包含有 <a href=\"https://github.com/apple/swift-corelibs-foundation/tree/master/Sources/FoundationNetworking/URLSession\">URLSession</a> 的实现。在使用过程中发现它在处理 <code>body</code> 的时候，是有问题的： <code>当 Body 为 Stream 的情况下，根据 libcurl 的 read function 来读取 body 数据，每次读取一个指定大小的 chunk，当读取的时候，发现 inputStream 已经没有数据了，就认为是读取完所有数据了。</code> 这显然与我们的要求，以及 iOS 上的 <code>URLSession</code> 的行为不一致，<code>input stream</code> 在读的时候没读到数据，有可能 <code>output stream</code> 还在写或者即将写，并不代表整个流已经完成。最简单来说就是为了性能考虑，<code>Output stream</code> 并不是用循环的方式进行写数据的，它有一个有限大小的 <code>buffer</code>，必须要等到有足够空间的时候才能成功写入数据。所以一般的方式也是 <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Streams/Streams.html#//apple_ref/doc/uid/10000188-SW1\">官方推荐</a> 的方式，都是使用 <code>RunLoop</code> 。</p>\n<p>所以我们需要将这部分的实现改一下，改为 <code>RunLoop</code> 的方式，当 <code>read function</code> 要读取数据时，发现 <code>input stream</code> 还没有数据，那么就返回 <code>retryLater</code>，告诉 <code>libcurl</code> 的 <code>read socket</code> 暂停发送数据，先等待。当 <code>RunLoop</code> 告诉我们有数据了 <code>hasBytesAvailable</code> 的时候，再让 <code>read socket</code> 进行 <code>resume</code>。可以参考 <code>File</code> 类型的 <code>Body</code> 的实现。</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>如果想用 <code>Cocoa Foundation</code> 实现 <code>Streaming/Chunked</code>，可能并不会那么顺利。有些问题在其他平台没有暴露出来，也不代表着一定就是 <code>Cocoa Foundation</code> 的锅，要善于用可靠的方式从一个更 low level 的角度找到不同平台不同实现直接的差异。当没有文档资料对问题有帮助的时候，「思考 -&gt; 猜测 -&gt; 验证」，可能是最佳的解决问题的方式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR\"></a>TL;DR</h2><p>使用 <code>Cocoa Foundation</code> 框架来实现 <code>HTTP Streaming/Chunked</code> 的时候，底层会将设置的 <code>Transfer-Encoding: chunked</code> 的值改成大写的 <code>Chunked</code> 发出去，如果后端不支持，那么必须通过比如 <code>hook</code> 的方式不让底层对这个值进行修改并发送出去。其次就是如果服务器已经返回了数据但是框架没有给任何回调，可能是因为服务器返回的 <code>Content-Type</code> 为 <code>text/html</code>，导致框架等待 <code>first 512 bytes</code> 数据，改用其他的类型即可。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>提供全球服务的能音视频通话的 IM 产品，大多数都是以 <strong>自定义信令</strong> 为基础来提升网络性通信能以及防止被封禁。</p>\n<p>常见的几种通信方式有：</p>\n<ul>\n<li>IP/Port (TCP)</li>\n<li>TLS (TLS Resumption or TLS Verify)</li>\n<li>GCM (FCM)</li>\n<li>WebSocket</li>\n<li>HTTP Persistent Connection</li>\n</ul>\n<p>前面几种都是其实都是通过 <code>IP/Port</code> 的方式来建立连接，那么一旦 IP 被封禁了，那么就只能通过其他手段下发 IP 地址然后不断的更换 IP 来绕过。 <code>GCM</code>(<a href=\"https://firebase.google.com/docs/cloud-messaging/\">FCM</a>) 是谷歌提供的信令通道。<code>WebSocket</code> 需要服务器的支持，<code>Nginx</code> 和 <code>Amazon Cloudfront</code> 是支持的，但是 <code>Azure</code> 和 <code>Azure Domain Fronting</code> 不支持。所以最近为了进一步完善网络通信的建设，决定增加 HTTP 长链接的通道作为候补。</p>\n<h2 id=\"HTTP-Persistent-Connection\"><a href=\"#HTTP-Persistent-Connection\" class=\"headerlink\" title=\"HTTP Persistent Connection\"></a>HTTP Persistent Connection</h2><p>HTTP Persistent Connection 也叫 HTTP Connection Reuse 或者其他的 Keep Alive 等。像 IM 类型应用，如果每一次通信都使用普通的 HTTP(s) 的话，那么由于每次建立 TCP 都需要三次握手，外加上 SSL/TLS 握手，可能需要 10+ 个 RTT，这对于 IM 来说是难以接受的。优化的方向也很明显，就是尽量避免 HTTPS 建立和关闭所带来的性能消耗，最好就是整个生命周期内，只建立一次关闭一次。</p>\n<p>HTTP 1.1 中默认使用 <code>Keep-Alive</code> ，来达到连接复用，但仅仅是这个对于 IM 应用来说，还是太捉襟见肘了。然后对比 <code>Long Poll</code> 的方式，显然 <code>Streaming</code> 的方式性能会更加好。</p>\n<blockquote>\n<p>HTTP 2.0 也由于服务器不支持的原因，暂时不可行。</p>\n</blockquote>\n<h2 id=\"Streaming-Chunked\"><a href=\"#Streaming-Chunked\" class=\"headerlink\" title=\"Streaming/Chunked\"></a>Streaming/Chunked</h2><p>HTTP 1.1 中支持了 chunked message （见 <a href=\"https://en.wikipedia.org/wiki/Chunked_transfer_encoding\">Chunked transfer encoding - Wikipedia</a>）。利用这个特性，我们可以通过 chunked 的方式，来避免重复建立连接。</p>\n<p>网络请求包含了上行和下行，所以我们调研了两种方案：</p>\n<ol>\n<li>利用一条 URL 同时上下行 chunked 数据，发现 <code>cloudfront</code> 是支持的，但 <code>Azure</code> 不支持。Azure cdn 在收到第一个下行包时，会在上行包中插入 chunked 结束符，并不再转发上行包，但下行包仍然会被转发到客户端。❌</li>\n<li>利用两条 URL 来实现，一条s用于发送信令，一条用于读取信令。✅</li>\n</ol>\n<h3 id=\"How-to\"><a href=\"#How-to\" class=\"headerlink\" title=\"How to\"></a>How to</h3><p>既然是 HTTP 协议，那么首先想到的就是使用 <code>Foundation</code> 中的 <code>URLSession</code> 来实现。为了方便我们先把上行的 URL 叫做 <code>uplink</code> ，下行专用的 URL  叫做 <code>downlink</code>。</p>\n<p>首先按照 <code>HTTP 1.1</code> 的标准，将 <code>uplink</code> 的请求头 <code>Transfer-Encoding</code> 设为 <code>chunked</code>。为了能给异步持续的将信令数据发送到服务器，需要利用 <code>Bound Pair Stream</code>，将 <code>InputStream</code> 连上 <code>httpBody</code>，然后持有 <code>OutputStream</code>，每次有数据需要发送的时候，就将数据从 <code>OutputStream</code> 写入，然后数据就会流到 <code>InputStream</code> 去，<code>URLSession</code> 就会不断的读取数据并发送到服务器。</p>\n<p>至于 <code>downlink</code>，只需要服务器在 response 的时候，将 <code>Transfer-Encoding</code> 设为 <code>chunked</code> 即可，这样我们就可以通过 <code>delegate</code> 方法 <code>func urlSession(_:dataTask:didReceive:)</code> 源源不断的读取下行数据。</p>\n<p>除此之外，后端还需要对 <code>uplink</code> 和 <code>downlink</code> 进行配对，进行密钥交换等步骤。成功之后才能够开始发送和接收普通的信令消息。举例比如我们配对的步骤叫做 <code>name channel</code>，首先是 <code>uplink</code> 发送第一个 <code>name channel</code> 的包，将加密方式、密钥和 <code>Connection ID</code> 等发送给服务器，然后进入等待状态。然后 <code>downlink</code> 发起请求，将 <code>name channel</code> 的数据发送给服务器，服务器通过对比 <code>Connection ID</code> 配对成功后，通过 <code>downlink</code> 返回第一个包，通知客户端已经连接建立完成，后续可以开始发送普通信令。</p>\n<h3 id=\"But\"><a href=\"#But\" class=\"headerlink\" title=\"But\"></a>But</h3><p>但往往理想很丰满，现实却很骨感。</p>\n<h4 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h4><p>按照前面的流程建立连接，<code>uplink</code> 在发送第一个 chunk 数据的时候，服务端马上就返回了 <code>Server 500</code> 的错误。这个错误和 <code>Transfer-Encoding</code> 有关，通过抓包能看到请求的 <code>header</code> 和 <code>body</code> 都很普通。之前调研时使用 <code>python</code> 写的测试代码，已经证明了这个方案是没问题的。但到了 iOS 这一端，服务器却发生了错误。</p>\n<p>通过连调，发现 <code>uplink</code> 走到了普通 <code>Post</code> 的流程，而不是应该的 <code>Stream</code> 流程。如果将 <code>Transfer-Encoding</code> 去掉，却不会 <code>Server 500</code>，连接正常结束了。得出结论是当存在 <code>Tranfer-Encoding</code> 为 <code>Chunked</code> 时，后端走到了 <code>Post</code> 流程，然后用 <code>Post</code> 流程的方式去获取 <code>body</code> 的时候，数据异常导致了 <code>Server 500</code>，简单来说也就是 <code>Transfer-Encoding</code> 和 <code>body</code> 不匹配。</p>\n<p>根据抓包的数据对比，iOS 端的包和正常的 python 的包，<strong>唯一</strong> 的区别是 <code>Chunked</code> 和 <code>chunked</code>，一个大写一个小写。并且 <a href=\"https://www.wireshark.org/\">Wireshark</a> 中也会提示 <code>[Expert Info (Warning/Undecoded): Unknown transfer coding name in Transfer-Encoding header]</code>。而我们在设置 <code>Transfer-Encoding</code> 的时候，其实也是使用小写的 <code>chunked</code>，但经过 <code>URLSession</code> 后会变成了大写。HTTP RFC 规定 header field 大小写不敏感，但没有对 value 进行规定。对比用的 python 的框架，则会将 <code>Transfer-Encoding</code> 处理成小写。这个问题和迷幻，但我们可以得到结论就是后端所使用的服务，并不支持大写的 <code>Chunked</code>。</p>\n<p>解决办法就是通过 Hook 的方式，禁止底层将 <code>header</code> 中的 <code>Transfer-Encoding</code> 进行更改。</p>\n<blockquote>\n<p>实际操作中其实还有更多问题，比如 <code>URLSessionDataTask</code> 进行处理 <code>orignalRequest</code> 的时候，会把 <code>currentRequest</code> 的 <code>Transfer-Encoding</code> 的值设为 <code>nil</code>。</p>\n</blockquote>\n<h4 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h4><p>在 <code>downlink</code> 发送完 <code>name channel</code> 之后，一直等待不到返回，直到超时后才返回第一个包，<code>HTTP/1.1 200 OK</code>，并马上结束连接。由于 <code>downlink</code> 其实就是一个普通的 <code>POST</code> 请求，需要的参数也比较少，<code>name channel</code> 的数据也很容易确定是否正确，并且返回的第一个包 <code>header</code> 和 <code>body</code> 除了 <code>Transfer-Encoding</code> 为 <code>Identity</code> 外并无异常。</p>\n<p>首先还是进行抓包，发现其实在请求刚发出去不久，服务器就马上返回了，并且 <code>header</code> 和 <code>body</code> 所有的数据都很正常，包括 <code>Transfer-Encoding</code> 为 <code>chunked</code>。问题来了，为什么服务器返回给 <code>URLSession</code> 了，<code>URLSession</code> 却没有通过 <code>delegate</code> 回调给我们呢，它连 <code>func urlSession(_:dataTask:didReceive, completionHandler:</code>，明明 <code>header</code> 和第一个 <code>chunk</code> 的 <code>body</code> 都已经返回了。</p>\n<p>这个问题比问题 1 还迷，虽然它把 <code>Transfer-Encoding</code> 从 <code>chunked</code> 改为了 <code>Identity</code> 还能接受，因为我们还可以通过查看 <code>header</code> 中没有 <code>Content-Length</code> 来判断，它其实就是 <code>chunked</code> 的方式。</p>\n<p>这个问题的解决过程比较曲折，首先我发现不等待 <code>downlink</code> 返回 <code>name channel</code> 成功，继续通过 <code>uplink</code> 发送信令时，<code>downlink</code> 就能够返回 <code>name channel</code> 成功的 <code>chunk</code> 以及后续信令的 <code>chunk</code>，<code>downlink</code> 不会超时断开。但是我们的整个流程是必须要等 <code>name channel</code> 成功之后才能发生消息，中间牵扯着很多 <code>seq</code> 和 <code>ack</code> 的问题。不能发送普通的信令，那么就尝试多发送一次 <code>name channel</code> 的时候，发现也还是不行。</p>\n<p>发送普通信令可以，发送 <code>name channel</code> 却不行。后来尝试了其他信令，看看是否是偶然问题，最终发现了主要的问题：** <code>URLSession</code> 会等待第一个 512 bytes 数据，只有当 buffer 大于 512 bytes 后才会返回 response 和 data**。</p>\n<p>通过以 <code>first 512 bytes</code> 为关键词搜索时，在 <a href=\"https://dev.w3.org/html5/cts/html5-type-sniffing.html\">HTML 5 rules for determining content types</a> 发现 H5 对 <code>first 512 bytes</code> 有一定的要求。猜想原因和 <code>Content-Type</code> 为 <code>text/html</code> 有关，后来验证了这个猜想。</p>\n<p>反过来一想，也很难说 <code>URLSession</code> 的实现是否有问题，但没有任何文档说明确认给人带来不少困扰。对比起来 <code>Java</code> 和 <code>Python</code> 都没有遇到这个问题。至于为什么服务器返回的是 <code>text/html</code>，而不是做客户端常用的 <code>application/json</code> 之类的，大概是因为后端用的服务框架是一个标准对 <code>web</code> 框架吧。</p>\n<p>到这里解决方式就很简单了，** 把该死的 <code>Content-Type</code> 改为符合场景的 <code>application/octet-stream</code> **。</p>\n<h4 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h4><p>其实是最初遇到的问题，就是 <code>Proxy</code> 的影响。首先 <code>Proxy</code> 看到的数据，是否可信的问题，其次就是 <code>Proxy</code> 对 <code>header</code> 带来的影响，比如 <code>End-to-end headers</code> 和 <code>Hop-by-hop headers</code>。(<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers\">HTTP headers - HTTP | MDN</a>）</p>\n<p>开发过程中，早期使用 <code>Charles</code> 和 <code>ProxyMan</code> 来抓 <code>HTTPS</code> 的包，没有遇到问题 1 <code>Server 500</code> 的问题，某一次重启电脑后，没有打开 <code>Proxy</code>，然后才发现会稳定出现 <code>Server 500</code>。</p>\n<p>还有值得一提的就是代码服务器的问题，在开发过程中也遇到过直连和通过代理服务器后出现不一致的问题，虽然后端说代理服务器不会做任何处理，只是将数据进行透传。</p>\n<h4 id=\"其他的方案\"><a href=\"#其他的方案\" class=\"headerlink\" title=\"其他的方案\"></a>其他的方案</h4><p>在解决上面的几个问题时，由于文档和相关的讨论都比较少，并且没有看到有人遇到这些问题，在确定问题出在 <code>URLSession</code> 及其底层实现上的情况下，在没头绪的时候还尝试过 <code>libcurl</code> 的方案。</p>\n<p>由于 apple 为了建设 Swift 的生态，提供了一个开源版的 <a href=\"https://github.com/apple/swift-corelibs-foundation\">Foundation</a>，其中就包含有 <a href=\"https://github.com/apple/swift-corelibs-foundation/tree/master/Sources/FoundationNetworking/URLSession\">URLSession</a> 的实现。在使用过程中发现它在处理 <code>body</code> 的时候，是有问题的： <code>当 Body 为 Stream 的情况下，根据 libcurl 的 read function 来读取 body 数据，每次读取一个指定大小的 chunk，当读取的时候，发现 inputStream 已经没有数据了，就认为是读取完所有数据了。</code> 这显然与我们的要求，以及 iOS 上的 <code>URLSession</code> 的行为不一致，<code>input stream</code> 在读的时候没读到数据，有可能 <code>output stream</code> 还在写或者即将写，并不代表整个流已经完成。最简单来说就是为了性能考虑，<code>Output stream</code> 并不是用循环的方式进行写数据的，它有一个有限大小的 <code>buffer</code>，必须要等到有足够空间的时候才能成功写入数据。所以一般的方式也是 <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Streams/Streams.html#//apple_ref/doc/uid/10000188-SW1\">官方推荐</a> 的方式，都是使用 <code>RunLoop</code> 。</p>\n<p>所以我们需要将这部分的实现改一下，改为 <code>RunLoop</code> 的方式，当 <code>read function</code> 要读取数据时，发现 <code>input stream</code> 还没有数据，那么就返回 <code>retryLater</code>，告诉 <code>libcurl</code> 的 <code>read socket</code> 暂停发送数据，先等待。当 <code>RunLoop</code> 告诉我们有数据了 <code>hasBytesAvailable</code> 的时候，再让 <code>read socket</code> 进行 <code>resume</code>。可以参考 <code>File</code> 类型的 <code>Body</code> 的实现。</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><p>如果想用 <code>Cocoa Foundation</code> 实现 <code>Streaming/Chunked</code>，可能并不会那么顺利。有些问题在其他平台没有暴露出来，也不代表着一定就是 <code>Cocoa Foundation</code> 的锅，要善于用可靠的方式从一个更 low level 的角度找到不同平台不同实现直接的差异。当没有文档资料对问题有帮助的时候，「思考 -&gt; 猜测 -&gt; 验证」，可能是最佳的解决问题的方式。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxx810x100019ithgkok4y2u","category_id":"ckxx810x600049ith5nfg6ej7","_id":"ckxx810xd000d9ithggzf7r4u"},{"post_id":"ckxx810xa00089ithdlbsbdbf","category_id":"ckxx810x600049ith5nfg6ej7","_id":"ckxx810xf000h9itharvu01vn"},{"post_id":"ckxx810x400039ith5vew3297","category_id":"ckxx810xb00099ithfzo6gcuj","_id":"ckxx810xh000k9ithb5km2xuq"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","category_id":"ckxx810xb00099ithfzo6gcuj","_id":"ckxx810xi000n9ithaky9gff3"},{"post_id":"ckxx810xf000g9ith0tr985fe","category_id":"ckxx810x600049ith5nfg6ej7","_id":"ckxx810xi000p9ithg2e50lcs"},{"post_id":"ckxx810x800069ithgptq97vn","category_id":"ckxx810x600049ith5nfg6ej7","_id":"ckxx810xj000s9ithh914fp2n"},{"post_id":"ckxx810xg000i9ith73ww8npz","category_id":"ckxx810xb00099ithfzo6gcuj","_id":"ckxx810xj000u9ith8r9vapyo"},{"post_id":"ckxx810xh000m9ith27rh8my9","category_id":"ckxx810xg000j9ith3w6fgxtw","_id":"ckxx810xj000w9ithenvq5vy2"},{"post_id":"ckxx810xb000b9ith7wjda3v3","category_id":"ckxx810xg000j9ith3w6fgxtw","_id":"ckxx810xk000x9ith6fixg6h7"}],"PostTag":[{"post_id":"ckxx810x100019ithgkok4y2u","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xi000o9ithgen9bono"},{"post_id":"ckxx810x100019ithgkok4y2u","tag_id":"ckxx810xb000a9ith3yvl6h31","_id":"ckxx810xi000q9ith9bzo0wx4"},{"post_id":"ckxx810x100019ithgkok4y2u","tag_id":"ckxx810xd000f9ithccfaa4qe","_id":"ckxx810xj000t9ith1yh8e5k6"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xh000l9ith7nfvaq0z","_id":"ckxx810xm00159ith4a3c0bdt"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xj000r9ith4qc2f4j4","_id":"ckxx810xm00169ith69taddab"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xj000v9ithgqfe3qv1","_id":"ckxx810xm00189ithh1um4vss"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xk000y9ithdwc7hf7y","_id":"ckxx810xm00199ith1xbm4men"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xk000z9ith6izx2pz7","_id":"ckxx810xm001b9ith03b81und"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xk00109ith8lmg1bf0","_id":"ckxx810xm001c9ith3jrxaft7"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xk00119ith0o62g1dx","_id":"ckxx810xn001e9ithe9iudp65"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810xl00129ithceh0318b","_id":"ckxx810xn001f9ith2adk7bgd"},{"post_id":"ckxx810x400039ith5vew3297","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xn001h9ith9wyjdddw"},{"post_id":"ckxx810x800069ithgptq97vn","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xn001j9ith7jq103tz"},{"post_id":"ckxx810x800069ithgptq97vn","tag_id":"ckxx810xm00179ith70zc4dm7","_id":"ckxx810xo001k9ith6zbhb4im"},{"post_id":"ckxx810x800069ithgptq97vn","tag_id":"ckxx810xm001a9ithc1ui18m5","_id":"ckxx810xo001m9ithdk0b1auv"},{"post_id":"ckxx810x800069ithgptq97vn","tag_id":"ckxx810xn001d9ith191v7di2","_id":"ckxx810xo001n9ithbhlf8zoz"},{"post_id":"ckxx810x800069ithgptq97vn","tag_id":"ckxx810xn001g9ithggng520c","_id":"ckxx810xo001p9ithc55475uk"},{"post_id":"ckxx810xa00089ithdlbsbdbf","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xo001q9ithedbsdipu"},{"post_id":"ckxx810xa00089ithdlbsbdbf","tag_id":"ckxx810xn001i9ith2r8u1n9k","_id":"ckxx810xp001s9ith3fgf1snr"},{"post_id":"ckxx810xa00089ithdlbsbdbf","tag_id":"ckxx810xo001l9itheh0d9hvw","_id":"ckxx810xp001t9itheb7l9mg3"},{"post_id":"ckxx810xb000b9ith7wjda3v3","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xp001w9ith0d9t4fxg"},{"post_id":"ckxx810xb000b9ith7wjda3v3","tag_id":"ckxx810xo001o9ith6vfq4ltb","_id":"ckxx810xq001x9itheit7fbiq"},{"post_id":"ckxx810xb000b9ith7wjda3v3","tag_id":"ckxx810xo001r9ith5xd4d64s","_id":"ckxx810xq001z9ith4q636s76"},{"post_id":"ckxx810xb000b9ith7wjda3v3","tag_id":"ckxx810xp001u9ithgp3s2g8z","_id":"ckxx810xq00209ithd973dusa"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","tag_id":"ckxx810xp001v9ith0qpyfjqh","_id":"ckxx810xr00249ith4ux0057r"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","tag_id":"ckxx810xq001y9ith80yrabkc","_id":"ckxx810xr00259ithcxfcgy8f"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","tag_id":"ckxx810xk00119ith0o62g1dx","_id":"ckxx810xs00279ithdzevh9ty"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","tag_id":"ckxx810xl00129ithceh0318b","_id":"ckxx810xs00289ithgiq50l5x"},{"post_id":"ckxx810xc000c9ithe6tt7fs8","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xs002a9ithd4xzfhil"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xt002e9ithh21z4q8x"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810xr00239ith4jfo1am3","_id":"ckxx810xt002f9ith9yuc7cy1"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810xr00269ith8qin6vol","_id":"ckxx810xt002h9itha8xrf5xu"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810xn001g9ithggng520c","_id":"ckxx810xu002i9ithh2m65wpz"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810xm001a9ithc1ui18m5","_id":"ckxx810xu002k9ith6rte5w6k"},{"post_id":"ckxx810xf000g9ith0tr985fe","tag_id":"ckxx810xn001d9ith191v7di2","_id":"ckxx810xu002l9ith76300m6c"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810xt002d9ith0gi483na","_id":"ckxx810xv002p9ithbq4ua6s4"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810xp001v9ith0qpyfjqh","_id":"ckxx810xv002q9ithd6fx9p0y"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810xq001y9ith80yrabkc","_id":"ckxx810xv002s9ith9hy714f2"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810xk00119ith0o62g1dx","_id":"ckxx810xv002t9ith14b04hig"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810xl00129ithceh0318b","_id":"ckxx810xw002v9ith84dh107j"},{"post_id":"ckxx810xg000i9ith73ww8npz","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xw002w9ith5dy3327r"},{"post_id":"ckxx810xh000m9ith27rh8my9","tag_id":"ckxx810x700059ith9hgibdb1","_id":"ckxx810xw002x9ithb6b309p2"},{"post_id":"ckxx810xh000m9ith27rh8my9","tag_id":"ckxx810xo001o9ith6vfq4ltb","_id":"ckxx810xw002y9ithbuv1b2du"},{"post_id":"ckxx810xh000m9ith27rh8my9","tag_id":"ckxx810xo001r9ith5xd4d64s","_id":"ckxx810xw002z9ith3wyfbgeo"},{"post_id":"ckxx810xh000m9ith27rh8my9","tag_id":"ckxx810xp001u9ithgp3s2g8z","_id":"ckxx810xw00309ith2avt4wci"}],"Tag":[{"name":"swift","_id":"ckxx810x700059ith9hgibdb1"},{"name":"error handling","_id":"ckxx810xb000a9ith3yvl6h31"},{"name":"result","_id":"ckxx810xd000f9ithccfaa4qe"},{"name":"group theory","_id":"ckxx810xh000l9ith7nfvaq0z"},{"name":"category theory","_id":"ckxx810xj000r9ith4qc2f4j4"},{"name":"semigroup","_id":"ckxx810xj000v9ithgqfe3qv1"},{"name":"monoid","_id":"ckxx810xk000y9ithdwc7hf7y"},{"name":"functor","_id":"ckxx810xk000z9ith6izx2pz7"},{"name":"applicative","_id":"ckxx810xk00109ith8lmg1bf0"},{"name":"monad","_id":"ckxx810xk00119ith0o62g1dx"},{"name":"functional programming","_id":"ckxx810xl00129ithceh0318b"},{"name":"existential","_id":"ckxx810xm00179ith70zc4dm7"},{"name":"protocol","_id":"ckxx810xm001a9ithc1ui18m5"},{"name":"generic","_id":"ckxx810xn001d9ith191v7di2"},{"name":"pats","_id":"ckxx810xn001g9ithggng520c"},{"name":"logger","_id":"ckxx810xn001i9ith2r8u1n9k"},{"name":"logging","_id":"ckxx810xo001l9itheh0d9hvw"},{"name":"chunked","_id":"ckxx810xo001o9ith6vfq4ltb"},{"name":"streaming","_id":"ckxx810xo001r9ith5xd4d64s"},{"name":"http","_id":"ckxx810xp001u9ithgp3s2g8z"},{"name":"parser","_id":"ckxx810xp001v9ith0qpyfjqh"},{"name":"parser combinator","_id":"ckxx810xq001y9ith80yrabkc"},{"name":"type erasure","_id":"ckxx810xr00239ith4jfo1am3"},{"name":"type erased","_id":"ckxx810xr00269ith8qin6vol"},{"name":"plist parser","_id":"ckxx810xt002d9ith0gi483na"}]}}